; generated by ARM C/C++ Compiler, RVCT4.0 [Build 728]
; commandline ArmCC [--debug -c --asm --interleave -o.\Obj\timer16.o --depend=.\Obj\timer16.d --cpu=Cortex-M0 --apcs=interwork -O0 -I.\Inc -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\NXP\LPC11Uxx -D__MICROLIB -D__DEBUG_FLASH --omf_browse=.\Obj\timer16.crf Src\timer16.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  TIMER16_0_IRQHandler PROC
;;;36     ******************************************************************************/
;;;37     void TIMER16_0_IRQHandler(void)
000000  486d              LDR      r0,|L1.440|
;;;38     {
;;;39     	if(LPC_CT16B0->IR & BIT0)
000002  6800              LDR      r0,[r0,#0]
000004  07c0              LSLS     r0,r0,#31
000006  0fc0              LSRS     r0,r0,#31
000008  d03a              BEQ      |L1.128|
;;;40     	{
;;;41     		LPC_CT16B0->IR = BIT0;/*Clear interrupt flag */
00000a  2001              MOVS     r0,#1
00000c  496a              LDR      r1,|L1.440|
00000e  6008              STR      r0,[r1,#0]
;;;42     		g_Timer16_Setting.Timer16_0_Counter[0]++;	// Dennis: what is this for?
000010  486a              LDR      r0,|L1.444|
000012  6800              LDR      r0,[r0,#0]  ; g_Timer16_Setting
000014  1c40              ADDS     r0,r0,#1
000016  4969              LDR      r1,|L1.444|
000018  6008              STR      r0,[r1,#0]  ; g_Timer16_Setting
;;;43     		poll_tick_btn++;
00001a  4869              LDR      r0,|L1.448|
00001c  8800              LDRH     r0,[r0,#0]  ; poll_tick_btn
00001e  1c40              ADDS     r0,r0,#1
000020  4967              LDR      r1,|L1.448|
000022  8008              STRH     r0,[r1,#0]
;;;44     		poll_usb++;
000024  4867              LDR      r0,|L1.452|
000026  8800              LDRH     r0,[r0,#0]  ; poll_usb
000028  1c40              ADDS     r0,r0,#1
00002a  4966              LDR      r1,|L1.452|
00002c  8008              STRH     r0,[r1,#0]
;;;45     		poll_id++;
00002e  4866              LDR      r0,|L1.456|
000030  8800              LDRH     r0,[r0,#0]  ; poll_id
000032  1c40              ADDS     r0,r0,#1
000034  4964              LDR      r1,|L1.456|
000036  8008              STRH     r0,[r1,#0]
;;;46     		poll_z_wheel++;
000038  4864              LDR      r0,|L1.460|
00003a  8800              LDRH     r0,[r0,#0]  ; poll_z_wheel
00003c  1c40              ADDS     r0,r0,#1
00003e  4963              LDR      r1,|L1.460|
000040  8008              STRH     r0,[r1,#0]
;;;47     
;;;48     		if (glitch_prevention>0)
000042  4863              LDR      r0,|L1.464|
000044  8800              LDRH     r0,[r0,#0]  ; glitch_prevention
000046  2800              CMP      r0,#0
000048  dd04              BLE      |L1.84|
;;;49     		glitch_prevention--;
00004a  4861              LDR      r0,|L1.464|
00004c  8800              LDRH     r0,[r0,#0]  ; glitch_prevention
00004e  1e40              SUBS     r0,r0,#1
000050  495f              LDR      r1,|L1.464|
000052  8008              STRH     r0,[r1,#0]
                  |L1.84|
;;;50     
;;;51     		if (cpi_clicked_flag) {
000054  485f              LDR      r0,|L1.468|
000056  8800              LDRH     r0,[r0,#0]  ; cpi_clicked_flag
000058  2800              CMP      r0,#0
00005a  d011              BEQ      |L1.128|
;;;52     			if( g_GpioButtonEvent.ButtonEvent == CPI_P_CLICKED) 
00005c  485e              LDR      r0,|L1.472|
00005e  8840              LDRH     r0,[r0,#2]  ; g_GpioButtonEvent
000060  2808              CMP      r0,#8
000062  d104              BNE      |L1.110|
;;;53     			{
;;;54     				cpi_p_Cntr++;		
000064  485d              LDR      r0,|L1.476|
000066  7800              LDRB     r0,[r0,#0]  ; cpi_p_Cntr
000068  1c40              ADDS     r0,r0,#1
00006a  495c              LDR      r1,|L1.476|
00006c  7008              STRB     r0,[r1,#0]
                  |L1.110|
;;;55     			}
;;;56     			if ( g_GpioButtonEvent.ButtonEvent == CPI_M_CLICKED)
00006e  485a              LDR      r0,|L1.472|
000070  8840              LDRH     r0,[r0,#2]  ; g_GpioButtonEvent
000072  2810              CMP      r0,#0x10
000074  d104              BNE      |L1.128|
;;;57     			{
;;;58     				cpi_m_Cntr++;
000076  485a              LDR      r0,|L1.480|
000078  7800              LDRB     r0,[r0,#0]  ; cpi_m_Cntr
00007a  1c40              ADDS     r0,r0,#1
00007c  4958              LDR      r1,|L1.480|
00007e  7008              STRB     r0,[r1,#0]
                  |L1.128|
;;;59     			}
;;;60     		}
;;;61     
;;;62     	}
;;;63     
;;;64     	if(LPC_CT16B0->IR & BIT1)
000080  484d              LDR      r0,|L1.440|
000082  6800              LDR      r0,[r0,#0]
000084  2102              MOVS     r1,#2
000086  4208              TST      r0,r1
000088  d007              BEQ      |L1.154|
;;;65     	{
;;;66     		LPC_CT16B0->IR = BIT1;/*Clear interrupt flag */
00008a  2002              MOVS     r0,#2
00008c  494a              LDR      r1,|L1.440|
00008e  6008              STR      r0,[r1,#0]
;;;67     		g_Timer16_Setting.Timer16_0_Counter[1]++;	// Dennis: what is this for?	
000090  484a              LDR      r0,|L1.444|
000092  6840              LDR      r0,[r0,#4]  ; g_Timer16_Setting
000094  1c40              ADDS     r0,r0,#1
000096  4949              LDR      r1,|L1.444|
000098  6048              STR      r0,[r1,#4]  ; g_Timer16_Setting
                  |L1.154|
;;;68     	}
;;;69     }
00009a  4770              BX       lr
;;;70     
                          ENDP

                  TIMER16_1_IRQHandler PROC
;;;79     ******************************************************************************/
;;;80     void TIMER16_1_IRQHandler(void)
00009c  4851              LDR      r0,|L1.484|
;;;81     {
;;;82     	if(LPC_CT16B1->IR & BIT0)
00009e  6800              LDR      r0,[r0,#0]
0000a0  07c0              LSLS     r0,r0,#31
0000a2  0fc0              LSRS     r0,r0,#31
0000a4  d002              BEQ      |L1.172|
;;;83     	{  
;;;84     		LPC_CT16B1->IR = BIT0;/* clear interrupt flag */
0000a6  2001              MOVS     r0,#1
0000a8  494e              LDR      r1,|L1.484|
0000aa  6008              STR      r0,[r1,#0]
                  |L1.172|
;;;85     		//g_Timer16_Setting.Timer16_1_Counter[0]++;				
;;;86     	}
;;;87     
;;;88     	if(LPC_CT16B1->IR & BIT1)
0000ac  484d              LDR      r0,|L1.484|
0000ae  6800              LDR      r0,[r0,#0]
0000b0  2102              MOVS     r1,#2
0000b2  4208              TST      r0,r1
0000b4  d002              BEQ      |L1.188|
;;;89     	{  
;;;90     		LPC_CT16B1->IR = BIT1;/* clear interrupt flag */
0000b6  2002              MOVS     r0,#2
0000b8  494a              LDR      r1,|L1.484|
0000ba  6008              STR      r0,[r1,#0]
                  |L1.188|
;;;91     		//g_Timer16_Setting.Timer16_1_Counter[1]++;		
;;;92     	}	
;;;93     }
0000bc  4770              BX       lr
;;;94     
                          ENDP

                  NDrv_Timer16_Enable PROC
;;;103    ******************************************************************************/
;;;104    void NDrv_Timer16_Enable(U8 timer_num)
0000be  2800              CMP      r0,#0
;;;105    {
;;;106    	if(timer_num == 0) 
0000c0  d103              BNE      |L1.202|
;;;107    	LPC_CT16B0->TCR = 1; 
0000c2  2101              MOVS     r1,#1
0000c4  4a3c              LDR      r2,|L1.440|
0000c6  6051              STR      r1,[r2,#4]
0000c8  e002              B        |L1.208|
                  |L1.202|
;;;108    	else 
;;;109    	LPC_CT16B1->TCR = 1;  
0000ca  2101              MOVS     r1,#1
0000cc  4a45              LDR      r2,|L1.484|
0000ce  6051              STR      r1,[r2,#4]
                  |L1.208|
;;;110    }
0000d0  4770              BX       lr
;;;111    
                          ENDP

                  NDrv_Timer16_Reset PROC
;;;120    ******************************************************************************/
;;;121    void NDrv_Timer16_Reset(uint8_t timer_num)
0000d2  2800              CMP      r0,#0
;;;122    {
;;;123    	uint32_t regVal;
;;;124    
;;;125    	if(timer_num == 0)
0000d4  d106              BNE      |L1.228|
;;;126    	{
;;;127    		regVal = LPC_CT16B0->TCR;
0000d6  4a38              LDR      r2,|L1.440|
0000d8  6851              LDR      r1,[r2,#4]
;;;128    		regVal |= 0x02;
0000da  2202              MOVS     r2,#2
0000dc  4311              ORRS     r1,r1,r2
;;;129    		LPC_CT16B0->TCR = regVal;
0000de  4a36              LDR      r2,|L1.440|
0000e0  6051              STR      r1,[r2,#4]
0000e2  e005              B        |L1.240|
                  |L1.228|
;;;130    	}
;;;131    	else
;;;132    	{
;;;133    		regVal = LPC_CT16B1->TCR;
0000e4  4a3f              LDR      r2,|L1.484|
0000e6  6851              LDR      r1,[r2,#4]
;;;134    		regVal |= 0x02;
0000e8  2202              MOVS     r2,#2
0000ea  4311              ORRS     r1,r1,r2
;;;135    		LPC_CT16B1->TCR = regVal;
0000ec  4a3d              LDR      r2,|L1.484|
0000ee  6051              STR      r1,[r2,#4]
                  |L1.240|
;;;136    	}
;;;137    }
0000f0  4770              BX       lr
;;;138    
                          ENDP

                  NDrv_Timer16_Disable PROC
;;;147    ******************************************************************************/
;;;148    void NDrv_Timer16_Disable(U8 timer_num)
0000f2  2800              CMP      r0,#0
;;;149    {
;;;150    	if(timer_num == 0) 
0000f4  d103              BNE      |L1.254|
;;;151    	LPC_CT16B0->TCR = 0; 
0000f6  2100              MOVS     r1,#0
0000f8  4a2f              LDR      r2,|L1.440|
0000fa  6051              STR      r1,[r2,#4]
0000fc  e002              B        |L1.260|
                  |L1.254|
;;;152    	else 
;;;153    	LPC_CT16B1->TCR = 0; 
0000fe  2100              MOVS     r1,#0
000100  4a38              LDR      r2,|L1.484|
000102  6051              STR      r1,[r2,#4]
                  |L1.260|
;;;154    }
000104  4770              BX       lr
;;;155    /******************************************************************************
                          ENDP

                  nsAPI_Timer16_Init PROC
;;;164    ******************************************************************************/
;;;165    void nsAPI_Timer16_Init(U8 timer_num, U32 timer) 
000106  b570              PUSH     {r4-r6,lr}
;;;166    {
000108  4604              MOV      r4,r0
00010a  460d              MOV      r5,r1
;;;167    	if(timer_num == Timer16_0)
00010c  2c00              CMP      r4,#0
00010e  d121              BNE      |L1.340|
;;;168    	{
;;;169    		NVIC_DisableIRQ(TIMER_16_0_IRQn);
000110  2010              MOVS     r0,#0x10
000112  f7fffffe          BL       NVIC_DisableIRQ
;;;170    		NDrv_Timer16_Reset(Timer16_0);
000116  2000              MOVS     r0,#0
000118  f7fffffe          BL       NDrv_Timer16_Reset
;;;171    
;;;172    		/* Some of the I/O pins need to be clearfully planned if
;;;173    		you use below module because JTAG and TIMER CAP/MAT pins are muxed. */
;;;174    		LPC_SYSCON->SYSAHBCLKCTRL |= BIT7; 			
00011c  4832              LDR      r0,|L1.488|
00011e  6800              LDR      r0,[r0,#0]
000120  2180              MOVS     r1,#0x80
000122  4308              ORRS     r0,r0,r1
000124  4930              LDR      r1,|L1.488|
000126  6008              STR      r0,[r1,#0]
;;;175    
;;;176    		LPC_CT16B0->PR = Timer16_MHz_Prescale;
000128  4930              LDR      r1,|L1.492|
00012a  4831              LDR      r0,|L1.496|
00012c  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00012e  f7fffffe          BL       __aeabi_uidivmod
000132  4921              LDR      r1,|L1.440|
000134  60c8              STR      r0,[r1,#0xc]
;;;177    		LPC_CT16B0->MR0 = timer*Timer16_IntervalmS;
000136  207d              MOVS     r0,#0x7d
000138  00c0              LSLS     r0,r0,#3
00013a  4368              MULS     r0,r5,r0
00013c  6188              STR      r0,[r1,#0x18]
;;;178    		//LPC_CT16B0->MR1 = timer*Timer16_IntervalmS;
;;;179    
;;;180    		/* Capture 0 and 1 on rising edge, interrupt enable. */
;;;181    		LPC_CT16B0->CCR = (BIT0|BIT2);
00013e  2005              MOVS     r0,#5
000140  6288              STR      r0,[r1,#0x28]
;;;182    		LPC_CT16B0->MCR = (BIT0|BIT1);/*Interrupt and Reset on MR0 and MR1*/		
000142  2003              MOVS     r0,#3
000144  6148              STR      r0,[r1,#0x14]
;;;183    
;;;184    		/* Enable the TIMER0 Interrupt */
;;;185    		NVIC_EnableIRQ(TIMER_16_0_IRQn);
000146  2010              MOVS     r0,#0x10
000148  f7fffffe          BL       NVIC_EnableIRQ
;;;186    
;;;187    		NDrv_Timer16_Enable(Timer16_0); 			
00014c  2000              MOVS     r0,#0
00014e  f7fffffe          BL       NDrv_Timer16_Enable
000152  e021              B        |L1.408|
                  |L1.340|
;;;188    	}
;;;189    	else if(timer_num ==  Timer16_1)
000154  2c01              CMP      r4,#1
000156  d11f              BNE      |L1.408|
;;;190    	{
;;;191    		NVIC_DisableIRQ(TIMER_16_1_IRQn);
000158  2011              MOVS     r0,#0x11
00015a  f7fffffe          BL       NVIC_DisableIRQ
;;;192    		NDrv_Timer16_Reset(Timer16_1);
00015e  2001              MOVS     r0,#1
000160  f7fffffe          BL       NDrv_Timer16_Reset
;;;193    		/* Some of the I/O pins need to be clearfully planned if
;;;194    		you use below module because JTAG and TIMER CAP/MAT pins are muxed. */
;;;195    		LPC_SYSCON->SYSAHBCLKCTRL |= BIT8;
000164  4820              LDR      r0,|L1.488|
000166  6800              LDR      r0,[r0,#0]
000168  0221              LSLS     r1,r4,#8
00016a  4308              ORRS     r0,r0,r1
00016c  491e              LDR      r1,|L1.488|
00016e  6008              STR      r0,[r1,#0]
;;;196    		LPC_CT16B1->PR = Timer16_MHz_Prescale;	  
000170  491e              LDR      r1,|L1.492|
000172  481f              LDR      r0,|L1.496|
000174  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000176  f7fffffe          BL       __aeabi_uidivmod
00017a  491a              LDR      r1,|L1.484|
00017c  60c8              STR      r0,[r1,#0xc]
;;;197    
;;;198    		LPC_CT16B1->MR0 = timer*Timer16_IntervalmS;
00017e  207d              MOVS     r0,#0x7d
000180  00c0              LSLS     r0,r0,#3
000182  4368              MULS     r0,r5,r0
000184  6188              STR      r0,[r1,#0x18]
;;;199    		//LPC_CT16B1->MR1 = timer*Timer16_IntervalmS;	
;;;200    
;;;201    		/* Capture 0 and 1 on rising edge, interrupt enable. */
;;;202    		LPC_CT16B1->CCR = (BIT0|BIT2);
000186  2005              MOVS     r0,#5
000188  6288              STR      r0,[r1,#0x28]
;;;203    		LPC_CT16B1->MCR = (BIT0|BIT2);/* Interrupt and Reset on MR0 and MR1 */
00018a  6148              STR      r0,[r1,#0x14]
;;;204    
;;;205    		/* Enable the TIMER1 Interrupt */
;;;206    		NVIC_EnableIRQ(TIMER_16_1_IRQn);
00018c  2011              MOVS     r0,#0x11
00018e  f7fffffe          BL       NVIC_EnableIRQ
;;;207    
;;;208    		NDrv_Timer16_Enable(Timer16_1);    
000192  2001              MOVS     r0,#1
000194  f7fffffe          BL       NDrv_Timer16_Enable
                  |L1.408|
;;;209    	}
;;;210    }
000198  bd70              POP      {r4-r6,pc}
;;;211    
                          ENDP

                  NVIC_EnableIRQ PROC
;;;535     */
;;;536    static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
00019a  06c2              LSLS     r2,r0,#27
;;;537    {
;;;538      NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
00019c  0ed2              LSRS     r2,r2,#27
00019e  2101              MOVS     r1,#1
0001a0  4091              LSLS     r1,r1,r2
0001a2  4a14              LDR      r2,|L1.500|
0001a4  6011              STR      r1,[r2,#0]
;;;539    }
0001a6  4770              BX       lr
;;;540    
                          ENDP

                  NVIC_DisableIRQ PROC
;;;548     */
;;;549    static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
0001a8  06c2              LSLS     r2,r0,#27
;;;550    {
;;;551      NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
0001aa  0ed2              LSRS     r2,r2,#27
0001ac  2101              MOVS     r1,#1
0001ae  4091              LSLS     r1,r1,r2
0001b0  4a10              LDR      r2,|L1.500|
0001b2  3280              ADDS     r2,r2,#0x80
0001b4  6011              STR      r1,[r2,#0]
;;;552    }
0001b6  4770              BX       lr
;;;553    
                          ENDP

                  |L1.440|
                          DCD      0x4000c000
                  |L1.444|
                          DCD      g_Timer16_Setting
                  |L1.448|
                          DCD      poll_tick_btn
                  |L1.452|
                          DCD      poll_usb
                  |L1.456|
                          DCD      poll_id
                  |L1.460|
                          DCD      poll_z_wheel
                  |L1.464|
                          DCD      glitch_prevention
                  |L1.468|
                          DCD      cpi_clicked_flag
                  |L1.472|
                          DCD      g_GpioButtonEvent
                  |L1.476|
                          DCD      cpi_p_Cntr
                  |L1.480|
                          DCD      cpi_m_Cntr
                  |L1.484|
                          DCD      0x40010000
                  |L1.488|
                          DCD      0x40048080
                  |L1.492|
                          DCD      0x000f4240
                  |L1.496|
                          DCD      SystemCoreClock
                  |L1.500|
                          DCD      0xe000e100

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_Timer16_Setting
                          %        16

                          AREA ||.data||, DATA, ALIGN=1

                  poll_tick_btn
000000  0000              DCB      0x00,0x00
                  poll_usb
000002  0000              DCB      0x00,0x00
                  poll_id
000004  0000              DCB      0x00,0x00
                  poll_z_wheel
000006  0000              DCB      0x00,0x00
                  glitch_prevention
000008  0000              DCB      0x00,0x00
                  cpi_clicked_flag
00000a  0000              DCB      0x00,0x00

;*** Start embedded assembler ***

#line 1 "Src\\timer16.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_timer16_c_39661c92____REV16|
#line 112 ".\\Inc\\core_cmInstr.h"
|__asm___9_timer16_c_39661c92____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_timer16_c_39661c92____REVSH|
#line 130
|__asm___9_timer16_c_39661c92____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
