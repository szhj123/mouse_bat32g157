; generated by ARM C/C++ Compiler, RVCT4.0 [Build 728]
; commandline ArmCC [--debug -c --asm --interleave -o.\Obj\usbcore.o --depend=.\Obj\usbcore.d --cpu=Cortex-M0 --apcs=interwork -O0 -I.\Inc -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\NXP\LPC11Uxx -D__MICROLIB -D__DEBUG_FLASH --omf_browse=.\Obj\usbcore.crf Src\usbcore.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  nsAPI_USB_ResetCore PROC
;;;52     //----------------------------------------------------------------------------
;;;53     void nsAPI_USB_ResetCore (void)
000000  2000              MOVS     r0,#0
;;;54     {
;;;55     	usb_reg_addr = 0;
000002  49fa              LDR      r1,|L1.1004|
000004  7008              STRB     r0,[r1,#0]
;;;56     	usb_reg_data = 0;
000006  49fa              LDR      r1,|L1.1008|
000008  7008              STRB     r0,[r1,#0]
;;;57     	
;;;58     	g_USBCore_Setting.USB_DeviceStatus = USB_POWER;
00000a  49fa              LDR      r1,|L1.1012|
00000c  8008              STRH     r0,[r1,#0]
;;;59     	g_USBCore_Setting.USB_DeviceAddress = 0;
00000e  70c8              STRB     r0,[r1,#3]
;;;60     	g_USBCore_Setting.USB_Configuration = 0;
000010  7108              STRB     r0,[r1,#4]
;;;61     	g_USBCore_Setting.USB_EndPointMask = 0x00010001;
000012  48f9              LDR      r0,|L1.1016|
000014  6488              STR      r0,[r1,#0x48]  ; g_USBCore_Setting
;;;62     	g_USBCore_Setting.USB_EndPointHalt = 0x00000000;
000016  2000              MOVS     r0,#0
000018  64c8              STR      r0,[r1,#0x4c]  ; g_USBCore_Setting
;;;63     	g_USBCore_Setting.USB_EndPointStall = 0x00000000;
00001a  6508              STR      r0,[r1,#0x50]  ; g_USBCore_Setting
;;;64     }
00001c  4770              BX       lr
;;;65     
                          ENDP

                  nsAPI_USB_SetupStage PROC
;;;69     //----------------------------------------------------------------------------
;;;70     void nsAPI_USB_SetupStage(void)
00001e  b510              PUSH     {r4,lr}
;;;71     {
;;;72     	nsAPI_USB_ReadSetupEP(0x00, (U8 *)&g_USBCore_Setting.SetupPacket);
000020  49f4              LDR      r1,|L1.1012|
000022  315c              ADDS     r1,r1,#0x5c
000024  2000              MOVS     r0,#0
000026  f7fffffe          BL       nsAPI_USB_ReadSetupEP
;;;73     }
00002a  bd10              POP      {r4,pc}
;;;74     
                          ENDP

                  nsAPI_USB_DataInStage PROC
;;;78     //----------------------------------------------------------------------------
;;;79     void nsAPI_USB_DataInStage(void)
00002c  b510              PUSH     {r4,lr}
;;;80     {
;;;81     	U32 cnt;
;;;82     
;;;83     	if(g_USBCore_Setting.EP0Data.Count > USB_MAX_PACKET0)
00002e  48f1              LDR      r0,|L1.1012|
000030  3054              ADDS     r0,r0,#0x54
000032  8880              LDRH     r0,[r0,#4]
000034  2840              CMP      r0,#0x40
000036  dd01              BLE      |L1.60|
;;;84     		cnt = USB_MAX_PACKET0;
000038  2440              MOVS     r4,#0x40
00003a  e002              B        |L1.66|
                  |L1.60|
;;;85     	else
;;;86     		cnt = g_USBCore_Setting.EP0Data.Count;
00003c  48ed              LDR      r0,|L1.1012|
00003e  3054              ADDS     r0,r0,#0x54
000040  8884              LDRH     r4,[r0,#4]
                  |L1.66|
;;;87     
;;;88     	cnt = nsAPI_USB_WriteEP(0x80, g_USBCore_Setting.EP0Data.pData, cnt);
000042  48ec              LDR      r0,|L1.1012|
000044  4622              MOV      r2,r4
000046  6d41              LDR      r1,[r0,#0x54]  ; g_USBCore_Setting
000048  2080              MOVS     r0,#0x80
00004a  f7fffffe          BL       nsAPI_USB_WriteEP
00004e  4604              MOV      r4,r0
;;;89     	g_USBCore_Setting.EP0Data.pData += cnt;
000050  48e8              LDR      r0,|L1.1012|
000052  6d40              LDR      r0,[r0,#0x54]  ; g_USBCore_Setting
000054  1900              ADDS     r0,r0,r4
000056  49e7              LDR      r1,|L1.1012|
000058  6548              STR      r0,[r1,#0x54]  ; g_USBCore_Setting
;;;90     	g_USBCore_Setting.EP0Data.Count -= cnt;
00005a  4608              MOV      r0,r1
00005c  3054              ADDS     r0,r0,#0x54
00005e  8880              LDRH     r0,[r0,#4]
000060  1b00              SUBS     r0,r0,r4
000062  b281              UXTH     r1,r0
000064  48e3              LDR      r0,|L1.1012|
000066  3054              ADDS     r0,r0,#0x54
000068  8081              STRH     r1,[r0,#4]
;;;91     }
00006a  bd10              POP      {r4,pc}
;;;92     
                          ENDP

                  nsAPI_USB_DataOutStage PROC
;;;96     //----------------------------------------------------------------------------
;;;97     void nsAPI_USB_DataOutStage(void)
00006c  b510              PUSH     {r4,lr}
;;;98     {
;;;99     	U32 cnt;
;;;100    
;;;101    	cnt = nsAPI_USB_ReadEP(0x00, g_USBCore_Setting.EP0Data.pData);
00006e  48e1              LDR      r0,|L1.1012|
000070  6d41              LDR      r1,[r0,#0x54]  ; g_USBCore_Setting
000072  2000              MOVS     r0,#0
000074  f7fffffe          BL       nsAPI_USB_ReadEP
000078  4604              MOV      r4,r0
;;;102    	g_USBCore_Setting.EP0Data.Count -= cnt;
00007a  48de              LDR      r0,|L1.1012|
00007c  3054              ADDS     r0,r0,#0x54
00007e  8880              LDRH     r0,[r0,#4]
000080  1b00              SUBS     r0,r0,r4
000082  b281              UXTH     r1,r0
000084  48db              LDR      r0,|L1.1012|
000086  3054              ADDS     r0,r0,#0x54
000088  8081              STRH     r1,[r0,#4]
;;;103    }
00008a  bd10              POP      {r4,pc}
;;;104    
                          ENDP

                  nsAPI_USB_StatusInStage PROC
;;;108    //----------------------------------------------------------------------------
;;;109    void nsAPI_USB_StatusInStage(void)
00008c  b510              PUSH     {r4,lr}
;;;110    {
;;;111    	nsAPI_USB_WriteEP(0x80, NULL, 0);
00008e  2200              MOVS     r2,#0
000090  4611              MOV      r1,r2
000092  2080              MOVS     r0,#0x80
000094  f7fffffe          BL       nsAPI_USB_WriteEP
;;;112    }
000098  bd10              POP      {r4,pc}
;;;113    
                          ENDP

                  nsAPI_USB_StatusOutStage PROC
;;;117    //----------------------------------------------------------------------------
;;;118    void nsAPI_USB_StatusOutStage(void)
00009a  b510              PUSH     {r4,lr}
;;;119    {
;;;120    	nsAPI_USB_ReadEP(0x00, g_USBCore_Setting.EP0Buf);
00009c  49d5              LDR      r1,|L1.1012|
00009e  1d89              ADDS     r1,r1,#6
0000a0  2000              MOVS     r0,#0
0000a2  f7fffffe          BL       nsAPI_USB_ReadEP
;;;121    }
0000a6  bd10              POP      {r4,pc}
;;;122    
                          ENDP

                  nsAPI_USBCore_Stall_i PROC
;;;1256   //----------------------------------------------------------------------------
;;;1257   void nsAPI_USBCore_Stall_i(void)
0000a8  b510              PUSH     {r4,lr}
;;;1258   {
;;;1259   	nsAPI_USB_SetStallEP(0x80);
0000aa  2080              MOVS     r0,#0x80
0000ac  f7fffffe          BL       nsAPI_USB_SetStallEP
;;;1260   	g_USBCore_Setting.EP0Data.Count = 0;
0000b0  2100              MOVS     r1,#0
0000b2  48d0              LDR      r0,|L1.1012|
0000b4  3054              ADDS     r0,r0,#0x54
0000b6  8081              STRH     r1,[r0,#4]
;;;1261   }
0000b8  bd10              POP      {r4,pc}
                          ENDP

                  nsAPI_USB_EndPoint0 PROC
;;;591    //----------------------------------------------------------------------------
;;;592    void nsAPI_USB_EndPoint0(U32 event)
0000ba  b570              PUSH     {r4-r6,lr}
;;;593    {
0000bc  4604              MOV      r4,r0
;;;594    	Boolean bSetupClassOk = FALSE, bOutClassOk = FALSE;
0000be  2500              MOVS     r5,#0
0000c0  2600              MOVS     r6,#0
;;;595    
;;;596    	//----------------------------------------------------------
;;;597    	// USB Params for tickle read write capabilities
;;;598    	//----------------------------------------------------------
;;;599    	
;;;600    	static U8 ready_flash_flag = 0;
;;;601    	static U16 sromCntr = 0;
;;;602    	static U32 flash_sector_address = 0;
;;;603    	static U32 flash_address_offset = 0;
;;;604    /*
;;;605    	static U8 frameCntr = 0;
;;;606    	static U8 tempframe[FRAME_CAPTURE_SIZE] = {0}; //frame capture
;;;607    	*/
;;;608    	//-----------------------------------------------------------
;;;609    
;;;610    	switch(event)
0000c2  4623              MOV      r3,r4
0000c4  2b08              CMP      r3,#8
0000c6  d276              BCS      |L1.438|
0000c8  005b              LSLS     r3,r3,#1
0000ca  447b              ADD      r3,r3,pc
0000cc  889b              LDRH     r3,[r3,#4]
0000ce  005b              LSLS     r3,r3,#1
0000d0  449f              ADD      pc,pc,r3
0000d2  0328              DCW      0x0328
0000d4  000702b9          DCW      0x0007,0x02b9
0000d8  03050328          DCW      0x0305,0x0328
0000dc  03280320          DCW      0x0328,0x0320
0000e0  0324              DCW      0x0324
;;;611    	{
;;;612    		case USB_EVT_SETUP:
;;;613    			nsAPI_USB_SetupStage();
0000e2  f7fffffe          BL       nsAPI_USB_SetupStage
;;;614    			g_USBCore_Setting.EP0Data.Count = g_USBCore_Setting.SetupPacket.wLength;	// number of bytes to transfer
0000e6  48c3              LDR      r0,|L1.1012|
0000e8  305c              ADDS     r0,r0,#0x5c
0000ea  88c1              LDRH     r1,[r0,#6]
0000ec  3808              SUBS     r0,r0,#8
0000ee  8081              STRH     r1,[r0,#4]
;;;615    
;;;616    			switch(g_USBCore_Setting.SetupPacket.bmRequestType.BM.Type)
0000f0  3814              SUBS     r0,r0,#0x14
0000f2  7f00              LDRB     r0,[r0,#0x1c]
0000f4  0640              LSLS     r0,r0,#25
0000f6  0f80              LSRS     r0,r0,#30
0000f8  d004              BEQ      |L1.260|
0000fa  2801              CMP      r0,#1
0000fc  d071              BEQ      |L1.482|
0000fe  2802              CMP      r0,#2
000100  d170              BNE      |L1.484|
000102  e117              B        |L1.820|
                  |L1.260|
;;;617    			{		
;;;618    				case REQUEST_STANDARD:
;;;619    					switch(g_USBCore_Setting.SetupPacket.bRequest)
000104  48bb              LDR      r0,|L1.1012|
000106  305c              ADDS     r0,r0,#0x5c
000108  7843              LDRB     r3,[r0,#1]
00010a  f7fffffe          BL       __ARM_common_switch8
00010e  0c07              DCB      0x0c,0x07
000110  11af1caf          DCB      0x11,0xaf,0x1c,0xaf
000114  27424c55          DCB      0x27,0x42,0x4c,0x55
000118  6f7ba5af          DCB      0x6f,0x7b,0xa5,0xaf
;;;620    					{
;;;621    						case USB_REQUEST_GET_STATUS:
;;;622    #if 0
;;;623    							if(!nsAPI_USB_ReqGetStatus())
;;;624    								goto stall_i;
;;;625    							
;;;626    							nsAPI_USB_DataInStage();
;;;627    #else
;;;628    							if(nsAPI_USB_ReqGetStatus())
00011c  f7fffffe          BL       nsAPI_USB_ReqGetStatus
000120  2800              CMP      r0,#0
000122  d002              BEQ      |L1.298|
;;;629    								nsAPI_USB_DataInStage();
000124  f7fffffe          BL       nsAPI_USB_DataInStage
000128  e001              B        |L1.302|
                  |L1.298|
;;;630    							else
;;;631    								nsAPI_USBCore_Stall_i();
00012a  f7fffffe          BL       nsAPI_USBCore_Stall_i
                  |L1.302|
;;;632    #endif
;;;633    							break;
00012e  e0a0              B        |L1.626|
;;;634    
;;;635    						case USB_REQUEST_CLEAR_FEATURE:
;;;636    #if 0
;;;637    							if(!nsAPI_USB_ReqSetClrFeature(0))
;;;638    								goto stall_i;
;;;639    
;;;640    							nsAPI_USB_StatusInStage();
;;;641    #if USB_FEATURE_EVENT
;;;642    							USB_Feature_Event();
;;;643    #endif
;;;644    #else
;;;645    							if(nsAPI_USB_ReqSetClrFeature(0))
000130  2000              MOVS     r0,#0
000132  f7fffffe          BL       nsAPI_USB_ReqSetClrFeature
000136  2800              CMP      r0,#0
000138  d002              BEQ      |L1.320|
;;;646    							{
;;;647    								nsAPI_USB_StatusInStage();
00013a  f7fffffe          BL       nsAPI_USB_StatusInStage
00013e  e001              B        |L1.324|
                  |L1.320|
;;;648    #if USB_FEATURE_EVENT
;;;649    								USB_Feature_Event();
;;;650    #endif
;;;651    							}
;;;652    							else
;;;653    							{
;;;654    								nsAPI_USBCore_Stall_i();
000140  f7fffffe          BL       nsAPI_USBCore_Stall_i
                  |L1.324|
;;;655    							}
;;;656    #endif
;;;657    							break;
000144  e095              B        |L1.626|
;;;658    
;;;659    						case USB_REQUEST_SET_FEATURE:
;;;660    #if 0
;;;661    							if(!nsAPI_USB_ReqSetClrFeature(1))
;;;662    								goto stall_i;
;;;663    							
;;;664    							nsAPI_USB_StatusInStage();
;;;665    #if USB_FEATURE_EVENT
;;;666    							USB_Feature_Event();
;;;667    #endif
;;;668    #else
;;;669    							if(nsAPI_USB_ReqSetClrFeature(1))
000146  2001              MOVS     r0,#1
000148  f7fffffe          BL       nsAPI_USB_ReqSetClrFeature
00014c  2800              CMP      r0,#0
00014e  d002              BEQ      |L1.342|
;;;670    							{
;;;671    								nsAPI_USB_StatusInStage();
000150  f7fffffe          BL       nsAPI_USB_StatusInStage
000154  e001              B        |L1.346|
                  |L1.342|
;;;672    #if USB_FEATURE_EVENT
;;;673    								USB_Feature_Event();
;;;674    #endif
;;;675    							}
;;;676    							else
;;;677    							{
;;;678    								nsAPI_USBCore_Stall_i();
000156  f7fffffe          BL       nsAPI_USBCore_Stall_i
                  |L1.346|
;;;679    							}
;;;680    #endif
;;;681    							break;
00015a  e08a              B        |L1.626|
;;;682    
;;;683    						case USB_REQUEST_SET_ADDRESS:
;;;684    #if 0
;;;685    							if(!nsAPI_USB_ReqSetAddress())
;;;686    								goto stall_i;
;;;687    							
;;;688    							nsAPI_USB_StatusInStage();
;;;689    #else
;;;690    							if(nsAPI_USB_ReqSetAddress())
00015c  bf00              NOP      
00015e  48a5              LDR      r0,|L1.1012|
000160  3040              ADDS     r0,r0,#0x40
000162  7f00              LDRB     r0,[r0,#0x1c]
000164  06c0              LSLS     r0,r0,#27
000166  0ec0              LSRS     r0,r0,#27
000168  d107              BNE      |L1.378|
00016a  48a2              LDR      r0,|L1.1012|
00016c  305c              ADDS     r0,r0,#0x5c
00016e  7880              LDRB     r0,[r0,#2]
000170  2180              MOVS     r1,#0x80
000172  4308              ORRS     r0,r0,r1
000174  499f              LDR      r1,|L1.1012|
000176  70c8              STRB     r0,[r1,#3]
000178  e001              B        |L1.382|
                  |L1.378|
00017a  2000              MOVS     r0,#0
00017c  e001              B        |L1.386|
                  |L1.382|
00017e  bf00              NOP      
000180  2001              MOVS     r0,#1
                  |L1.386|
000182  2800              CMP      r0,#0
000184  d002              BEQ      |L1.396|
;;;691    								nsAPI_USB_StatusInStage();
000186  f7fffffe          BL       nsAPI_USB_StatusInStage
00018a  e001              B        |L1.400|
                  |L1.396|
;;;692    							else
;;;693    								nsAPI_USBCore_Stall_i();
00018c  f7fffffe          BL       nsAPI_USBCore_Stall_i
                  |L1.400|
;;;694    #endif
;;;695    							break;
000190  e06f              B        |L1.626|
;;;696    
;;;697    						case USB_REQUEST_GET_DESCRIPTOR:
;;;698    #if 0
;;;699    							if(!nsAPI_USB_ReqGetDescriptor())
;;;700    								goto stall_i;
;;;701    				
;;;702    							nsAPI_USB_DataInStage();
;;;703    #else
;;;704    							if(nsAPI_USB_ReqGetDescriptor())
000192  f7fffffe          BL       nsAPI_USB_ReqGetDescriptor
000196  2800              CMP      r0,#0
000198  d002              BEQ      |L1.416|
;;;705    								nsAPI_USB_DataInStage();
00019a  f7fffffe          BL       nsAPI_USB_DataInStage
00019e  e001              B        |L1.420|
                  |L1.416|
;;;706    							else
;;;707    								nsAPI_USBCore_Stall_i();
0001a0  f7fffffe          BL       nsAPI_USBCore_Stall_i
                  |L1.420|
;;;708    #endif
;;;709    							break;
0001a4  e065              B        |L1.626|
;;;710    
;;;711    						case USB_REQUEST_SET_DESCRIPTOR:
;;;712    							nsAPI_USB_SetStallEP(0x00);
0001a6  2000              MOVS     r0,#0
0001a8  f7fffffe          BL       nsAPI_USB_SetStallEP
;;;713    							g_USBCore_Setting.EP0Data.Count = 0;
0001ac  2100              MOVS     r1,#0
0001ae  4891              LDR      r0,|L1.1012|
0001b0  3054              ADDS     r0,r0,#0x54
0001b2  8081              STRH     r1,[r0,#4]
;;;714    							break;
0001b4  e05d              B        |L1.626|
                  |L1.438|
0001b6  e245              B        |L1.1604|
;;;715    
;;;716    						case USB_REQUEST_GET_CONFIGURATION:
;;;717    #if 0
;;;718    							if(!nsAPI_USB_ReqGetConfiguration())
;;;719    								goto stall_i;
;;;720    							
;;;721    							nsAPI_USB_DataInStage();
;;;722    #else
;;;723    							if(nsAPI_USB_ReqGetConfiguration())
0001b8  bf00              NOP      
0001ba  488e              LDR      r0,|L1.1012|
0001bc  3040              ADDS     r0,r0,#0x40
0001be  7f00              LDRB     r0,[r0,#0x1c]
0001c0  06c0              LSLS     r0,r0,#27
0001c2  0ec0              LSRS     r0,r0,#27
0001c4  d104              BNE      |L1.464|
0001c6  488b              LDR      r0,|L1.1012|
0001c8  1d00              ADDS     r0,r0,#4
0001ca  1f01              SUBS     r1,r0,#4
0001cc  6548              STR      r0,[r1,#0x54]  ; g_USBCore_Setting
0001ce  e001              B        |L1.468|
                  |L1.464|
0001d0  2000              MOVS     r0,#0
0001d2  e001              B        |L1.472|
                  |L1.468|
0001d4  bf00              NOP      
0001d6  2001              MOVS     r0,#1
                  |L1.472|
0001d8  2800              CMP      r0,#0
0001da  d004              BEQ      |L1.486|
;;;724    								nsAPI_USB_DataInStage();
0001dc  f7fffffe          BL       nsAPI_USB_DataInStage
0001e0  e003              B        |L1.490|
                  |L1.482|
0001e2  e048              B        |L1.630|
                  |L1.484|
0001e4  e229              B        |L1.1594|
                  |L1.486|
;;;725    							else
;;;726    								nsAPI_USBCore_Stall_i();
0001e6  f7fffffe          BL       nsAPI_USBCore_Stall_i
                  |L1.490|
;;;727    #endif
;;;728    							break;
0001ea  e042              B        |L1.626|
;;;729    
;;;730    						case USB_REQUEST_SET_CONFIGURATION:
;;;731    #if 0
;;;732    							if(!nsAPI_USB_ReqSetConfiguration())
;;;733    								goto stall_i;
;;;734    							
;;;735    							nsAPI_USB_StatusInStage();
;;;736    #if USB_CONFIGURE_EVENT
;;;737    							nsAPI_USB_Configure_Event();
;;;738    #endif
;;;739    #else
;;;740    							if(nsAPI_USB_ReqSetConfiguration())
0001ec  f7fffffe          BL       nsAPI_USB_ReqSetConfiguration
0001f0  2800              CMP      r0,#0
0001f2  d004              BEQ      |L1.510|
;;;741    							{
;;;742    								nsAPI_USB_StatusInStage();
0001f4  f7fffffe          BL       nsAPI_USB_StatusInStage
;;;743    #if USB_CONFIGURE_EVENT
;;;744    								nsAPI_USB_Configure_Event();
0001f8  f7fffffe          BL       nsAPI_USB_Configure_Event
0001fc  e001              B        |L1.514|
                  |L1.510|
;;;745    #endif
;;;746    							}
;;;747    							else
;;;748    							{
;;;749    								nsAPI_USBCore_Stall_i();
0001fe  f7fffffe          BL       nsAPI_USBCore_Stall_i
                  |L1.514|
;;;750    							}
;;;751    #endif
;;;752    							break;
000202  e036              B        |L1.626|
;;;753    
;;;754    						case USB_REQUEST_GET_INTERFACE:
;;;755    #if 0
;;;756    							if(!nsAPI_USB_ReqGetInterface())
;;;757    								goto stall_i;
;;;758    							
;;;759    							nsAPI_USB_DataInStage();
;;;760    #else
;;;761    							if(nsAPI_USB_ReqGetInterface())
000204  bf00              NOP      
000206  487b              LDR      r0,|L1.1012|
000208  3040              ADDS     r0,r0,#0x40
00020a  7f00              LDRB     r0,[r0,#0x1c]
00020c  06c0              LSLS     r0,r0,#27
00020e  0ec0              LSRS     r0,r0,#27
000210  2801              CMP      r0,#1
000212  d115              BNE      |L1.576|
000214  4877              LDR      r0,|L1.1012|
000216  7900              LDRB     r0,[r0,#4]  ; g_USBCore_Setting
000218  2800              CMP      r0,#0
00021a  d00e              BEQ      |L1.570|
00021c  4875              LDR      r0,|L1.1012|
00021e  305c              ADDS     r0,r0,#0x5c
000220  7900              LDRB     r0,[r0,#4]
000222  4974              LDR      r1,|L1.1012|
000224  7889              LDRB     r1,[r1,#2]  ; g_USBCore_Setting
000226  4288              CMP      r0,r1
000228  da07              BGE      |L1.570|
00022a  4872              LDR      r0,|L1.1012|
00022c  305c              ADDS     r0,r0,#0x5c
00022e  7901              LDRB     r1,[r0,#4]
000230  3857              SUBS     r0,r0,#0x57
000232  1808              ADDS     r0,r1,r0
000234  496f              LDR      r1,|L1.1012|
000236  6548              STR      r0,[r1,#0x54]  ; g_USBCore_Setting
000238  e001              B        |L1.574|
                  |L1.570|
00023a  2000              MOVS     r0,#0
00023c  e004              B        |L1.584|
                  |L1.574|
00023e  e001              B        |L1.580|
                  |L1.576|
000240  2000              MOVS     r0,#0
000242  e001              B        |L1.584|
                  |L1.580|
000244  bf00              NOP      
000246  2001              MOVS     r0,#1
                  |L1.584|
000248  2800              CMP      r0,#0
00024a  d002              BEQ      |L1.594|
;;;762    								nsAPI_USB_DataInStage();
00024c  f7fffffe          BL       nsAPI_USB_DataInStage
000250  e001              B        |L1.598|
                  |L1.594|
;;;763    							else
;;;764    								nsAPI_USBCore_Stall_i();
000252  f7fffffe          BL       nsAPI_USBCore_Stall_i
                  |L1.598|
;;;765    #endif
;;;766    							break;
000256  e00c              B        |L1.626|
;;;767    
;;;768    						case USB_REQUEST_SET_INTERFACE:
;;;769    #if 0
;;;770    							if(!nsAPI_USB_ReqSetInterface())
;;;771    								goto stall_i;
;;;772    
;;;773    							nsAPI_USB_StatusInStage();
;;;774    #if USB_INTERFACE_EVENT
;;;775    							USB_Interface_Event();
;;;776    #endif
;;;777    #else
;;;778    							if(nsAPI_USB_ReqSetInterface())
000258  f7fffffe          BL       nsAPI_USB_ReqSetInterface
00025c  2800              CMP      r0,#0
00025e  d002              BEQ      |L1.614|
;;;779    							{
;;;780    								nsAPI_USB_StatusInStage();
000260  f7fffffe          BL       nsAPI_USB_StatusInStage
000264  e001              B        |L1.618|
                  |L1.614|
;;;781    #if USB_INTERFACE_EVENT
;;;782    								USB_Interface_Event();
;;;783    #endif
;;;784    							}
;;;785    							else
;;;786    							{
;;;787    								nsAPI_USBCore_Stall_i();
000266  f7fffffe          BL       nsAPI_USBCore_Stall_i
                  |L1.618|
;;;788    							}
;;;789    #endif
;;;790    							break;
00026a  e002              B        |L1.626|
;;;791    
;;;792    						default:
;;;793    #if 0
;;;794    							goto stall_i;
;;;795    #else
;;;796    							nsAPI_USBCore_Stall_i();
00026c  f7fffffe          BL       nsAPI_USBCore_Stall_i
000270  bf00              NOP                            ;619
                  |L1.626|
000272  bf00              NOP                            ;633
;;;797    #endif
;;;798    					}
;;;799    					break;
000274  e1e5              B        |L1.1602|
                  |L1.630|
;;;800    
;;;801    #if USB_CLASS
;;;802    				case REQUEST_CLASS:
;;;803    					switch(g_USBCore_Setting.SetupPacket.bmRequestType.BM.Recipient)
000276  485f              LDR      r0,|L1.1012|
000278  3040              ADDS     r0,r0,#0x40
00027a  7f00              LDRB     r0,[r0,#0x1c]
00027c  06c0              LSLS     r0,r0,#27
00027e  0ec0              LSRS     r0,r0,#27
000280  d004              BEQ      |L1.652|
000282  2801              CMP      r0,#1
000284  d003              BEQ      |L1.654|
000286  2802              CMP      r0,#2
000288  d04d              BEQ      |L1.806|
00028a  e04b              B        |L1.804|
                  |L1.652|
;;;804    					{
;;;805    						case REQUEST_TO_DEVICE:
;;;806    							goto stall_i;
00028c  e1d6              B        |L1.1596|
                  |L1.654|
;;;807    							break;
;;;808    		
;;;809    						case REQUEST_TO_INTERFACE:
;;;810    #if USB_HID
;;;811    							switch(g_USBCore_Setting.SetupPacket.bRequest)
00028e  4859              LDR      r0,|L1.1012|
000290  305c              ADDS     r0,r0,#0x5c
000292  7843              LDRB     r3,[r0,#1]
000294  f7fffffe          BL       __ARM_common_switch8
000298  0c44071c          DCB      0x0c,0x44,0x07,0x1c
00029c  30444444          DCB      0x30,0x44,0x44,0x44
0002a0  44441228          DCB      0x44,0x44,0x12,0x28
0002a4  3c44              DCB      0x3c,0x44
;;;812    							{
;;;813    								case HID_REQUEST_GET_REPORT:
;;;814    								{
;;;815    									g_USBCore_Setting.EP0Data.pData = g_USBCore_Setting.EP0Buf;
0002a6  4853              LDR      r0,|L1.1012|
0002a8  1d80              ADDS     r0,r0,#6
0002aa  1f81              SUBS     r1,r0,#6
0002ac  6548              STR      r0,[r1,#0x54]  ; g_USBCore_Setting
;;;816    									nsAPI_USB_DataInStage();
0002ae  f7fffffe          BL       nsAPI_USB_DataInStage
;;;817    									bSetupClassOk = TRUE;
0002b2  2501              MOVS     r5,#1
;;;818    								}
;;;819    
;;;820    								wnDrv_Usb_ClrGetReqStatus(0x80); 
0002b4  2080              MOVS     r0,#0x80
0002b6  f7fffffe          BL       wnDrv_Usb_ClrGetReqStatus
;;;821    								break;
0002ba  e031              B        |L1.800|
;;;822    
;;;823    								case HID_REQUEST_SET_REPORT:
;;;824    									nsAPI_USB_SetupStage();
0002bc  f7fffffe          BL       nsAPI_USB_SetupStage
;;;825    									nsAPI_USB_StatusInStage();
0002c0  f7fffffe          BL       nsAPI_USB_StatusInStage
;;;826    									g_USBCore_Setting.EP0Data.pData = g_USBCore_Setting.EP0Buf;                             
0002c4  484b              LDR      r0,|L1.1012|
0002c6  1d80              ADDS     r0,r0,#6
0002c8  1f81              SUBS     r1,r0,#6
0002ca  6548              STR      r0,[r1,#0x54]  ; g_USBCore_Setting
;;;827    									bSetupClassOk = TRUE;
0002cc  2501              MOVS     r5,#1
;;;828    									break;
0002ce  e027              B        |L1.800|
;;;829    		
;;;830    								case HID_REQUEST_GET_IDLE:
;;;831    									if(HID_GetIdle())
0002d0  f7fffffe          BL       HID_GetIdle
0002d4  2800              CMP      r0,#0
0002d6  d006              BEQ      |L1.742|
;;;832    									{
;;;833    										g_USBCore_Setting.EP0Data.pData = g_USBCore_Setting.EP0Buf;	// point to data to be sent
0002d8  4846              LDR      r0,|L1.1012|
0002da  1d80              ADDS     r0,r0,#6
0002dc  1f81              SUBS     r1,r0,#6
0002de  6548              STR      r0,[r1,#0x54]  ; g_USBCore_Setting
;;;834    										nsAPI_USB_DataInStage();									// send requested data
0002e0  f7fffffe          BL       nsAPI_USB_DataInStage
;;;835    										bSetupClassOk = TRUE;
0002e4  2501              MOVS     r5,#1
                  |L1.742|
;;;836    									}
;;;837    									break;
0002e6  e01b              B        |L1.800|
;;;838    		
;;;839    								case HID_REQUEST_SET_IDLE:
;;;840    									if(HID_SetIdle())
0002e8  f7fffffe          BL       HID_SetIdle
0002ec  2800              CMP      r0,#0
0002ee  d002              BEQ      |L1.758|
;;;841    									{
;;;842    										nsAPI_USB_StatusInStage();									// send Acknowledge
0002f0  f7fffffe          BL       nsAPI_USB_StatusInStage
;;;843    										bSetupClassOk = TRUE;
0002f4  2501              MOVS     r5,#1
                  |L1.758|
;;;844    									}
;;;845    									break;
0002f6  e013              B        |L1.800|
;;;846    		
;;;847    								case HID_REQUEST_GET_PROTOCOL:
;;;848    									if(HID_GetProtocol())
0002f8  f7fffffe          BL       HID_GetProtocol
0002fc  2800              CMP      r0,#0
0002fe  d006              BEQ      |L1.782|
;;;849    									{
;;;850    										g_USBCore_Setting.EP0Data.pData = g_USBCore_Setting.EP0Buf;	// point to data to be sent
000300  483c              LDR      r0,|L1.1012|
000302  1d80              ADDS     r0,r0,#6
000304  1f81              SUBS     r1,r0,#6
000306  6548              STR      r0,[r1,#0x54]  ; g_USBCore_Setting
;;;851    										nsAPI_USB_DataInStage();									// send requested data
000308  f7fffffe          BL       nsAPI_USB_DataInStage
;;;852    										bSetupClassOk = TRUE;
00030c  2501              MOVS     r5,#1
                  |L1.782|
;;;853    									}
;;;854    									break;
00030e  e007              B        |L1.800|
;;;855    		
;;;856    								case HID_REQUEST_SET_PROTOCOL:
;;;857    									if(HID_SetProtocol())
000310  f7fffffe          BL       HID_SetProtocol
000314  2800              CMP      r0,#0
000316  d002              BEQ      |L1.798|
;;;858    									{
;;;859    										nsAPI_USB_StatusInStage();									// send Acknowledge
000318  f7fffffe          BL       nsAPI_USB_StatusInStage
;;;860    										bSetupClassOk = TRUE;
00031c  2501              MOVS     r5,#1
                  |L1.798|
;;;861    									}
;;;862    									break;
00031e  bf00              NOP      
                  |L1.800|
000320  bf00              NOP                            ;821
;;;863    							}
;;;864    #endif
;;;865    						case REQUEST_TO_ENDPOINT:
;;;866    						default:
000322  bf00              NOP      
                  |L1.804|
000324  bf00              NOP                            ;865
                  |L1.806|
;;;867    #if 0
;;;868    							goto stall_i;
;;;869    #else
;;;870    							if(!bSetupClassOk)
000326  2d00              CMP      r5,#0
000328  d101              BNE      |L1.814|
;;;871    								nsAPI_USBCore_Stall_i();
00032a  f7fffffe          BL       nsAPI_USBCore_Stall_i
                  |L1.814|
00032e  bf00              NOP                            ;803
000330  bf00              NOP                            ;807
;;;872    #endif
;;;873    					}
;;;874    setup_class_ok: // request finished successfully
;;;875    					break;
000332  e186              B        |L1.1602|
                  |L1.820|
;;;876    #endif
;;;877    
;;;878    				case REQUEST_VENDOR:						 	
;;;879    					switch(g_USBCore_Setting.SetupPacket.bmRequestType.BM.Recipient)
000334  482f              LDR      r0,|L1.1012|
000336  3040              ADDS     r0,r0,#0x40
000338  7f00              LDRB     r0,[r0,#0x1c]
00033a  06c0              LSLS     r0,r0,#27
00033c  0ec0              LSRS     r0,r0,#27
00033e  d004              BEQ      |L1.842|
000340  2801              CMP      r0,#1
000342  d052              BEQ      |L1.1002|
000344  2802              CMP      r0,#2
000346  d17b              BNE      |L1.1088|
000348  e163              B        |L1.1554|
                  |L1.842|
;;;880    					{
;;;881    						case REQUEST_TO_DEVICE:
;;;882    							if(g_USBCore_Setting.SetupPacket.bmRequestType.B == TCL_CONTROL_0_READ)		// read
00034a  482a              LDR      r0,|L1.1012|
00034c  3040              ADDS     r0,r0,#0x40
00034e  7f00              LDRB     r0,[r0,#0x1c]
000350  28c0              CMP      r0,#0xc0
000352  d157              BNE      |L1.1028|
;;;883    							{
;;;884    								usb_reg_addr = g_USBCore_Setting.SetupPacket.wIndex.WB.L;	// get the register address
000354  4827              LDR      r0,|L1.1012|
000356  305c              ADDS     r0,r0,#0x5c
000358  7900              LDRB     r0,[r0,#4]
00035a  4924              LDR      r1,|L1.1004|
00035c  7008              STRB     r0,[r1,#0]
;;;885    								
;;;886    								if(g_USBCore_Setting.SetupPacket.bRequest == 0x04)			// mcu register
00035e  4825              LDR      r0,|L1.1012|
000360  305c              ADDS     r0,r0,#0x5c
000362  7840              LDRB     r0,[r0,#1]
000364  2804              CMP      r0,#4
000366  d129              BNE      |L1.956|
;;;887    								{  
;;;888    									
;;;889    									switch(usb_reg_addr)
000368  4608              MOV      r0,r1
00036a  7800              LDRB     r0,[r0,#0]  ; usb_reg_addr
00036c  2806              CMP      r0,#6
00036e  d013              BEQ      |L1.920|
000370  dc04              BGT      |L1.892|
000372  2800              CMP      r0,#0
000374  d007              BEQ      |L1.902|
000376  2803              CMP      r0,#3
000378  d11b              BNE      |L1.946|
00037a  e008              B        |L1.910|
                  |L1.892|
00037c  2807              CMP      r0,#7
00037e  d00f              BEQ      |L1.928|
000380  28ff              CMP      r0,#0xff
000382  d116              BNE      |L1.946|
000384  e010              B        |L1.936|
                  |L1.902|
;;;890    									{
;;;891    										case REF_MOUSE_INFO_ADDR:
;;;892    											usb_reg_data = MOUSE_INFO;					// get infomation for mouse
000386  2001              MOVS     r0,#1
000388  4919              LDR      r1,|L1.1008|
00038a  7008              STRB     r0,[r1,#0]
;;;893    											break;
00038c  e015              B        |L1.954|
                  |L1.910|
;;;894    		      
;;;895    										case REF_MOUSE_EVENT_CTRL_ADDR:
;;;896    											usb_reg_data = mouse_event_ctrl;			// get event control settings for mouse
00038e  481b              LDR      r0,|L1.1020|
000390  7800              LDRB     r0,[r0,#0]  ; mouse_event_ctrl
000392  4917              LDR      r1,|L1.1008|
000394  7008              STRB     r0,[r1,#0]
;;;897    											break;
000396  e010              B        |L1.954|
                  |L1.920|
;;;898    
;;;899    										case REF_MOUSE_FIRMWARE_MAJOR_ADDR:
;;;900    											usb_reg_data = MOUSE_FIRMWARE_major;		// get major firmware revision for mouse
000398  2003              MOVS     r0,#3
00039a  4915              LDR      r1,|L1.1008|
00039c  7008              STRB     r0,[r1,#0]
;;;901    											break;
00039e  e00c              B        |L1.954|
                  |L1.928|
;;;902    										
;;;903    										case REF_MOUSE_FIRMWARE_MINOR_ADDR:
;;;904    											usb_reg_data = MOUSE_FIRMWARE_minor;		// get minor firmware revision for mouse
0003a0  2001              MOVS     r0,#1
0003a2  4913              LDR      r1,|L1.1008|
0003a4  7008              STRB     r0,[r1,#0]
;;;905    											break;
0003a6  e008              B        |L1.954|
                  |L1.936|
;;;906    
;;;907    										case REF_MOUSE_SROM_WRITE_ADDR:
;;;908    											usb_reg_data = ready_flash_flag;
0003a8  4815              LDR      r0,|L1.1024|
0003aa  7800              LDRB     r0,[r0,#0]  ; ready_flash_flag
0003ac  4910              LDR      r1,|L1.1008|
0003ae  7008              STRB     r0,[r1,#0]
;;;909    											break;
0003b0  e003              B        |L1.954|
                  |L1.946|
;;;910    										/*
;;;911    										case REF_MOUSE_SPI_BURST_FRAME_CAPTURE:
;;;912    
;;;913    											for(frameCntr = 0; frameCntr < FRAME_CAPTURE_SIZE; frameCntr++)
;;;914    												tempframe[frameCntr] = 0;
;;;915    
;;;916    											nsAPI_SSP_Sensor_Write(0x10, 0x00);
;;;917    											nsAPI_SSP_Sensor_Write(0x12, 0x83);
;;;918    											nsAPI_SSP_Sensor_Write(0x12, 0xC5);
;;;919    
;;;920    											NCS_LOW();
;;;921    											
;;;922    											for(frameCntr = 0; frameCntr < FRAME_CAPTURE_SIZE; frameCntr++)
;;;923    												nsAPI_SSP_Receive( &tempframe[frameCntr],1);
;;;924    
;;;925    											NCS_HIGH();
;;;926    											frameCntr = 0;
;;;927    
;;;928    											usb_reg_data = 1;
;;;929    
;;;930    											break;
;;;931    										case REF_MOUSE_SPI_BURST_FRAME_CAPTURE_READ:
;;;932    											usb_reg_data =	tempframe[frameCntr];
;;;933    											frameCntr++;
;;;934    											break;
;;;935    										*/
;;;936    																					
;;;937    										default:
;;;938    											usb_reg_data = 0;
0003b2  2000              MOVS     r0,#0
0003b4  490e              LDR      r1,|L1.1008|
0003b6  7008              STRB     r0,[r1,#0]
;;;939    											break;
0003b8  bf00              NOP      
                  |L1.954|
0003ba  e00e              B        |L1.986|
                  |L1.956|
;;;940    									
;;;941    									} 
;;;942    								}
;;;943    								else if(g_USBCore_Setting.SetupPacket.bRequest == 0x01)		// sensor register
0003bc  480d              LDR      r0,|L1.1012|
0003be  305c              ADDS     r0,r0,#0x5c
0003c0  7840              LDRB     r0,[r0,#1]
0003c2  2801              CMP      r0,#1
0003c4  d109              BNE      |L1.986|
;;;944    								{	
;;;945    									usb_reg_data = nsAPI_SSP_Sensor_Read(usb_reg_addr);
0003c6  4809              LDR      r0,|L1.1004|
0003c8  7800              LDRB     r0,[r0,#0]  ; usb_reg_addr
0003ca  f7fffffe          BL       nsAPI_SSP_Sensor_Read
0003ce  4908              LDR      r1,|L1.1008|
0003d0  7008              STRB     r0,[r1,#0]
;;;946    									nsAPI_SSP_Sensor_Write(0x50, 0x01); 					// UGS 2 only needed
0003d2  2101              MOVS     r1,#1
0003d4  2050              MOVS     r0,#0x50
0003d6  f7fffffe          BL       nsAPI_SSP_Sensor_Write
                  |L1.986|
;;;947    								}							
;;;948    								g_USBCore_Setting.EP0Data.pData = &usb_reg_data;
0003da  4805              LDR      r0,|L1.1008|
0003dc  4905              LDR      r1,|L1.1012|
0003de  6548              STR      r0,[r1,#0x54]  ; g_USBCore_Setting
;;;949    							    g_USBCore_Setting.EP0Data.Count = sizeof(usb_reg_data);
0003e0  2101              MOVS     r1,#1
0003e2  4804              LDR      r0,|L1.1012|
0003e4  3054              ADDS     r0,r0,#0x54
0003e6  8081              STRH     r1,[r0,#4]
                  |L1.1000|
0003e8  e111              B        |L1.1550|
                  |L1.1002|
0003ea  e111              B        |L1.1552|
                  |L1.1004|
                          DCD      usb_reg_addr
                  |L1.1008|
                          DCD      usb_reg_data
                  |L1.1012|
                          DCD      g_USBCore_Setting
                  |L1.1016|
                          DCD      0x00010001
                  |L1.1020|
                          DCD      mouse_event_ctrl
                  |L1.1024|
                          DCD      ||.data||
                  |L1.1028|
;;;950    							}
;;;951    							else if(g_USBCore_Setting.SetupPacket.bmRequestType.B == TCL_CONTROL_0_WRITE)	// write
000404  48c8              LDR      r0,|L1.1832|
000406  7f00              LDRB     r0,[r0,#0x1c]
000408  2840              CMP      r0,#0x40
00040a  d1ed              BNE      |L1.1000|
;;;952    							{
;;;953    								usb_reg_addr = g_USBCore_Setting.SetupPacket.wIndex.WB.L;	// get the register address
00040c  48c6              LDR      r0,|L1.1832|
00040e  301c              ADDS     r0,r0,#0x1c
000410  7900              LDRB     r0,[r0,#4]
000412  49c6              LDR      r1,|L1.1836|
000414  7008              STRB     r0,[r1,#0]
;;;954    								usb_reg_data = g_USBCore_Setting.SetupPacket.wIndex.WB.H;	// get the register data
000416  48c4              LDR      r0,|L1.1832|
000418  301c              ADDS     r0,r0,#0x1c
00041a  7940              LDRB     r0,[r0,#5]
00041c  49c4              LDR      r1,|L1.1840|
00041e  7008              STRB     r0,[r1,#0]
;;;955    
;;;956    								if(g_USBCore_Setting.SetupPacket.bRequest == 0x04)			// mcu register
000420  48c1              LDR      r0,|L1.1832|
000422  301c              ADDS     r0,r0,#0x1c
000424  7840              LDRB     r0,[r0,#1]
000426  2804              CMP      r0,#4
000428  d179              BNE      |L1.1310|
;;;957    								{  
;;;958    									switch(usb_reg_addr)
00042a  48c0              LDR      r0,|L1.1836|
00042c  7800              LDRB     r0,[r0,#0]  ; usb_reg_addr
00042e  2803              CMP      r0,#3
000430  d007              BEQ      |L1.1090|
000432  2808              CMP      r0,#8
000434  d064              BEQ      |L1.1280|
000436  28fb              CMP      r0,#0xfb
000438  d008              BEQ      |L1.1100|
00043a  28ff              CMP      r0,#0xff
00043c  d170              BNE      |L1.1312|
00043e  e044              B        |L1.1226|
                  |L1.1088|
000440  e0e8              B        |L1.1556|
                  |L1.1090|
;;;959    									{
;;;960    											
;;;961    										case REF_MOUSE_EVENT_CTRL_ADDR:
;;;962    											mouse_event_ctrl = usb_reg_data;      // set event control settings for mouse
000442  48bb              LDR      r0,|L1.1840|
000444  7800              LDRB     r0,[r0,#0]  ; usb_reg_data
000446  49bb              LDR      r1,|L1.1844|
000448  7008              STRB     r0,[r1,#0]
;;;963    											break;
00044a  e097              B        |L1.1404|
                  |L1.1100|
;;;964    								  					    
;;;965    										case REF_MOUSE_SROM_LOAD_CTRL_ADDR:
;;;966    											__disable_irq(); 											
00044c  b672              CPSID    i
;;;967    
;;;968    											if((usb_reg_data & BIT2) == REBOOT) // reboot										
00044e  48b8              LDR      r0,|L1.1840|
000450  7800              LDRB     r0,[r0,#0]  ; usb_reg_data
000452  2104              MOVS     r1,#4
000454  4008              ANDS     r0,r0,r1
000456  2804              CMP      r0,#4
000458  d101              BNE      |L1.1118|
;;;969    											{	
;;;970    												nsAPI_SSP_Sensor_Init();
00045a  f7fffffe          BL       nsAPI_SSP_Sensor_Init
                  |L1.1118|
;;;971    											}
;;;972    
;;;973    											if( (usb_reg_data & BIT0) == INIT_TCL_FLASH)		// start flash initialization
00045e  48b4              LDR      r0,|L1.1840|
000460  7800              LDRB     r0,[r0,#0]  ; usb_reg_data
000462  07c0              LSLS     r0,r0,#31
000464  0fc0              LSRS     r0,r0,#31
000466  2801              CMP      r0,#1
000468  d11c              BNE      |L1.1188|
;;;974    											{
;;;975    												sromCntr = 0;
00046a  2000              MOVS     r0,#0
00046c  49b2              LDR      r1,|L1.1848|
00046e  8008              STRH     r0,[r1,#0]
;;;976    												ready_flash_flag = FREE;
000470  20aa              MOVS     r0,#0xaa
000472  1e89              SUBS     r1,r1,#2
000474  7008              STRB     r0,[r1,#0]
;;;977    												flash_address_offset = 0;
000476  2000              MOVS     r0,#0
000478  3108              ADDS     r1,r1,#8
00047a  6008              STR      r0,[r1,#0]  ; flash_address_offset
;;;978    												flash_sector_address = START_OF_FLASH_SECTOR;
00047c  2003              MOVS     r0,#3
00047e  0340              LSLS     r0,r0,#13
000480  1f09              SUBS     r1,r1,#4
000482  6008              STR      r0,[r1,#0]  ; flash_sector_address
;;;979    		
;;;980    												memset(usbSROM, 0, SROM_BUFFER_SIZE);
000484  21ff              MOVS     r1,#0xff
000486  3101              ADDS     r1,#1
000488  48ac              LDR      r0,|L1.1852|
00048a  f7fffffe          BL       __aeabi_memclr4
;;;981    												
;;;982    												if(msAPI_Flash_PrepareSec(Sector_6, Sector_7) == IAP_STA_CMD_SUCCESS)	// erase flash sector for incoming data
00048e  2107              MOVS     r1,#7
000490  2006              MOVS     r0,#6
000492  f7fffffe          BL       msAPI_Flash_PrepareSec
000496  2800              CMP      r0,#0
000498  d115              BNE      |L1.1222|
;;;983    													msAPI_Flash_EraseSec(Sector_6, Sector_7);
00049a  2107              MOVS     r1,#7
00049c  2006              MOVS     r0,#6
00049e  f7fffffe          BL       msAPI_Flash_EraseSec
0004a2  e010              B        |L1.1222|
                  |L1.1188|
;;;984    											}
;;;985    											else if( (usb_reg_data & BIT1) == TCL_END_FLASH)	// stop flash (by fill last sector)
0004a4  48a2              LDR      r0,|L1.1840|
0004a6  7800              LDRB     r0,[r0,#0]  ; usb_reg_data
0004a8  2102              MOVS     r1,#2
0004aa  4008              ANDS     r0,r0,r1
0004ac  2802              CMP      r0,#2
0004ae  d10a              BNE      |L1.1222|
;;;986    											{																	
;;;987    												if(sromCntr)									// sending leftover data inside RAM to FLASH
0004b0  48a1              LDR      r0,|L1.1848|
0004b2  8800              LDRH     r0,[r0,#0]  ; sromCntr
0004b4  2800              CMP      r0,#0
0004b6  d006              BEQ      |L1.1222|
;;;988    												{
;;;989    													ready_flash_flag = READY_TO_FLASH;
0004b8  2001              MOVS     r0,#1
0004ba  499f              LDR      r1,|L1.1848|
0004bc  1e89              SUBS     r1,r1,#2
0004be  7008              STRB     r0,[r1,#0]
;;;990    													sromCntr =0;
0004c0  2000              MOVS     r0,#0
0004c2  1c89              ADDS     r1,r1,#2
0004c4  8008              STRH     r0,[r1,#0]
                  |L1.1222|
;;;991    												}														
;;;992    											}
;;;993    											
;;;994    											__enable_irq();
0004c6  b662              CPSIE    i
;;;995    											break;
0004c8  e058              B        |L1.1404|
                  |L1.1226|
;;;996    
;;;997    										case REF_MOUSE_SROM_WRITE_ADDR:
;;;998    											__disable_irq();
0004ca  b672              CPSID    i
;;;999    
;;;1000   											if( sromCntr < SROM_BUFFER_SIZE )		// check if buffer is full
0004cc  489a              LDR      r0,|L1.1848|
0004ce  8800              LDRH     r0,[r0,#0]  ; sromCntr
0004d0  28ff              CMP      r0,#0xff
0004d2  dc09              BGT      |L1.1256|
;;;1001   												usbSROM[sromCntr++] = usb_reg_data;	// if not continue loading the buffers
0004d4  4896              LDR      r0,|L1.1840|
0004d6  7801              LDRB     r1,[r0,#0]  ; usb_reg_data
0004d8  4897              LDR      r0,|L1.1848|
0004da  8802              LDRH     r2,[r0,#0]  ; sromCntr
0004dc  8800              LDRH     r0,[r0,#0]  ; sromCntr
0004de  1c40              ADDS     r0,r0,#1
0004e0  4b95              LDR      r3,|L1.1848|
0004e2  8018              STRH     r0,[r3,#0]
0004e4  4895              LDR      r0,|L1.1852|
0004e6  5481              STRB     r1,[r0,r2]
                  |L1.1256|
;;;1002   											
;;;1003   											if(sromCntr >= SROM_BUFFER_SIZE)		// if RAM buffer is full then proceed to ready the flashing
0004e8  4893              LDR      r0,|L1.1848|
0004ea  8800              LDRH     r0,[r0,#0]  ; sromCntr
0004ec  28ff              CMP      r0,#0xff
0004ee  dd05              BLE      |L1.1276|
;;;1004   											{										
;;;1005   												sromCntr =0;						
0004f0  2000              MOVS     r0,#0
0004f2  4991              LDR      r1,|L1.1848|
0004f4  8008              STRH     r0,[r1,#0]
;;;1006   												ready_flash_flag = READY_TO_FLASH;
0004f6  2001              MOVS     r0,#1
0004f8  1e89              SUBS     r1,r1,#2
0004fa  7008              STRB     r0,[r1,#0]
                  |L1.1276|
;;;1007   											}
;;;1008   											__enable_irq();
0004fc  b662              CPSIE    i
;;;1009   											break;
0004fe  e03d              B        |L1.1404|
                  |L1.1280|
;;;1010   
;;;1011   										case REF_MOUSE_LED_SW_ADDR:
;;;1012   											if(usb_reg_data == 0x03) 
000500  488b              LDR      r0,|L1.1840|
000502  7800              LDRB     r0,[r0,#0]  ; usb_reg_data
000504  2803              CMP      r0,#3
000506  d10c              BNE      |L1.1314|
;;;1013   											{
;;;1014   												TURN_ON_20R_SW1_LED(LOW);	// Both CLOSED. the highest light
000508  2200              MOVS     r2,#0
00050a  210e              MOVS     r1,#0xe
00050c  4610              MOV      r0,r2
00050e  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;1015   												TURN_ON_39R_SW2_LED(LOW);	
000512  2200              MOVS     r2,#0
000514  210d              MOVS     r1,#0xd
000516  4610              MOV      r0,r2
000518  f7fffffe          BL       NDrv_GPIO_SetBitValue
00051c  e02c              B        |L1.1400|
                  |L1.1310|
00051e  e063              B        |L1.1512|
                  |L1.1312|
000520  e02b              B        |L1.1402|
                  |L1.1314|
;;;1016   											} 
;;;1017   											else if (usb_reg_data == 0x02)
000522  4883              LDR      r0,|L1.1840|
000524  7800              LDRB     r0,[r0,#0]  ; usb_reg_data
000526  2802              CMP      r0,#2
000528  d10a              BNE      |L1.1344|
;;;1018   											{
;;;1019   												TURN_ON_20R_SW1_LED(LOW);	// 2nd highest light
00052a  2200              MOVS     r2,#0
00052c  210e              MOVS     r1,#0xe
00052e  4610              MOV      r0,r2
000530  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;1020   												TURN_ON_39R_SW2_LED(HIGH);
000534  2201              MOVS     r2,#1
000536  210d              MOVS     r1,#0xd
000538  2000              MOVS     r0,#0
00053a  f7fffffe          BL       NDrv_GPIO_SetBitValue
00053e  e01b              B        |L1.1400|
                  |L1.1344|
;;;1021   											}
;;;1022   											else if (usb_reg_data == 0x01)
000540  487b              LDR      r0,|L1.1840|
000542  7800              LDRB     r0,[r0,#0]  ; usb_reg_data
000544  2801              CMP      r0,#1
000546  d10a              BNE      |L1.1374|
;;;1023   											{
;;;1024   												TURN_ON_20R_SW1_LED(HIGH);	// 3rd highest light
000548  2201              MOVS     r2,#1
00054a  210e              MOVS     r1,#0xe
00054c  2000              MOVS     r0,#0
00054e  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;1025   												TURN_ON_39R_SW2_LED(LOW);
000552  2200              MOVS     r2,#0
000554  210d              MOVS     r1,#0xd
000556  4610              MOV      r0,r2
000558  f7fffffe          BL       NDrv_GPIO_SetBitValue
00055c  e00c              B        |L1.1400|
                  |L1.1374|
;;;1026   											}
;;;1027   											else if (usb_reg_data == 0x00)
00055e  4874              LDR      r0,|L1.1840|
000560  7800              LDRB     r0,[r0,#0]  ; usb_reg_data
000562  2800              CMP      r0,#0
000564  d108              BNE      |L1.1400|
;;;1028   											{
;;;1029   												TURN_ON_20R_SW1_LED(HIGH);	// Turn off LED
000566  2201              MOVS     r2,#1
000568  210e              MOVS     r1,#0xe
00056a  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;1030   												TURN_ON_39R_SW2_LED(HIGH);
00056e  2201              MOVS     r2,#1
000570  210d              MOVS     r1,#0xd
000572  2000              MOVS     r0,#0
000574  f7fffffe          BL       NDrv_GPIO_SetBitValue
                  |L1.1400|
;;;1031   											}
;;;1032   										break;
000578  e000              B        |L1.1404|
                  |L1.1402|
;;;1033   											
;;;1034   										default:
;;;1035   											break;
00057a  bf00              NOP      
                  |L1.1404|
00057c  bf00              NOP                            ;963
;;;1036   									}
;;;1037   
;;;1038   									if(ready_flash_flag == READY_TO_FLASH)
00057e  486e              LDR      r0,|L1.1848|
000580  1e80              SUBS     r0,r0,#2
000582  7800              LDRB     r0,[r0,#0]  ; ready_flash_flag
000584  2801              CMP      r0,#1
000586  d142              BNE      |L1.1550|
;;;1039   									{
;;;1040   										__disable_irq();
000588  b672              CPSID    i
;;;1041   									
;;;1042   										if(msAPI_Flash_PrepareSec(Sector_6, Sector_7) == IAP_STA_CMD_SUCCESS)
00058a  2107              MOVS     r1,#7
00058c  2006              MOVS     r0,#6
00058e  f7fffffe          BL       msAPI_Flash_PrepareSec
000592  2800              CMP      r0,#0
000594  d10a              BNE      |L1.1452|
;;;1043   											msAPI_Flash_CopyRAM2Flash((U32)(START_OF_FLASH_SECTOR + flash_address_offset),	// target start of flash
000596  4968              LDR      r1,|L1.1848|
000598  1d89              ADDS     r1,r1,#6
00059a  6809              LDR      r1,[r1,#0]  ; flash_address_offset
00059c  2203              MOVS     r2,#3
00059e  0352              LSLS     r2,r2,#13
0005a0  1888              ADDS     r0,r1,r2
0005a2  22ff              MOVS     r2,#0xff
0005a4  3201              ADDS     r2,#1
0005a6  4965              LDR      r1,|L1.1852|
0005a8  f7fffffe          BL       msAPI_Flash_CopyRAM2Flash
                  |L1.1452|
;;;1044   																	  (U32)usbSROM,			// source 
;;;1045   																	  SROM_BUFFER_SIZE);	// package size
;;;1046   									
;;;1047   										if((flash_sector_address + flash_address_offset) < END_OF_FLASH_SECTOR)
0005ac  4862              LDR      r0,|L1.1848|
0005ae  1c80              ADDS     r0,r0,#2
0005b0  6800              LDR      r0,[r0,#0]  ; flash_sector_address
0005b2  4961              LDR      r1,|L1.1848|
0005b4  1d89              ADDS     r1,r1,#6
0005b6  6809              LDR      r1,[r1,#0]  ; flash_address_offset
0005b8  1840              ADDS     r0,r0,r1
0005ba  2107              MOVS     r1,#7
0005bc  0309              LSLS     r1,r1,#12
0005be  4288              CMP      r0,r1
0005c0  d207              BCS      |L1.1490|
;;;1048   											flash_address_offset = flash_address_offset + SROM_BUFFER_SIZE;
0005c2  485d              LDR      r0,|L1.1848|
0005c4  1d80              ADDS     r0,r0,#6
0005c6  6800              LDR      r0,[r0,#0]  ; flash_address_offset
0005c8  30ff              ADDS     r0,r0,#0xff
0005ca  3001              ADDS     r0,#1
0005cc  495a              LDR      r1,|L1.1848|
0005ce  1d89              ADDS     r1,r1,#6
0005d0  6008              STR      r0,[r1,#0]  ; flash_address_offset
                  |L1.1490|
;;;1049   									
;;;1050   										memset(usbSROM, 0, SROM_BUFFER_SIZE);
0005d2  21ff              MOVS     r1,#0xff
0005d4  3101              ADDS     r1,#1
0005d6  4859              LDR      r0,|L1.1852|
0005d8  f7fffffe          BL       __aeabi_memclr4
;;;1051   	
;;;1052   										__enable_irq();
0005dc  b662              CPSIE    i
;;;1053   
;;;1054   										ready_flash_flag = FREE;
0005de  20aa              MOVS     r0,#0xaa
0005e0  4955              LDR      r1,|L1.1848|
0005e2  1e89              SUBS     r1,r1,#2
0005e4  7008              STRB     r0,[r1,#0]
0005e6  e012              B        |L1.1550|
                  |L1.1512|
;;;1055   									}
;;;1056   								}
;;;1057   								else if(g_USBCore_Setting.SetupPacket.bRequest == 0x01)		// sensor register
0005e8  484f              LDR      r0,|L1.1832|
0005ea  301c              ADDS     r0,r0,#0x1c
0005ec  7840              LDRB     r0,[r0,#1]
0005ee  2801              CMP      r0,#1
0005f0  d10d              BNE      |L1.1550|
;;;1058   								{
;;;1059   									ready_flash_flag = BUSY_RW;		
0005f2  2000              MOVS     r0,#0
0005f4  4950              LDR      r1,|L1.1848|
0005f6  1e89              SUBS     r1,r1,#2
0005f8  7008              STRB     r0,[r1,#0]
;;;1060   									nsAPI_SSP_Sensor_Write(usb_reg_addr, usb_reg_data);
0005fa  484d              LDR      r0,|L1.1840|
0005fc  7801              LDRB     r1,[r0,#0]  ; usb_reg_data
0005fe  484b              LDR      r0,|L1.1836|
000600  7800              LDRB     r0,[r0,#0]  ; usb_reg_addr
000602  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;1061   									ready_flash_flag = FREE;
000606  20aa              MOVS     r0,#0xaa
000608  494b              LDR      r1,|L1.1848|
00060a  1e89              SUBS     r1,r1,#2
00060c  7008              STRB     r0,[r1,#0]
                  |L1.1550|
;;;1062   								}	 
;;;1063   							}
;;;1064   							break;
00060e  e002              B        |L1.1558|
                  |L1.1552|
;;;1065   		
;;;1066   						case REQUEST_TO_INTERFACE:
;;;1067   							break;
000610  e001              B        |L1.1558|
                  |L1.1554|
;;;1068   		
;;;1069   						case REQUEST_TO_ENDPOINT:
;;;1070   							break;
000612  e000              B        |L1.1558|
                  |L1.1556|
;;;1071   
;;;1072   						default:
;;;1073   							goto stall_i;
000614  e012              B        |L1.1596|
                  |L1.1558|
000616  bf00              NOP                            ;1064
;;;1074   					}
;;;1075   	
;;;1076   	
;;;1077   					if(g_USBCore_Setting.SetupPacket.wLength)
000618  4843              LDR      r0,|L1.1832|
00061a  301c              ADDS     r0,r0,#0x1c
00061c  88c0              LDRH     r0,[r0,#6]
00061e  2800              CMP      r0,#0
000620  d008              BEQ      |L1.1588|
;;;1078   					{
;;;1079   						if(g_USBCore_Setting.SetupPacket.bmRequestType.BM.Dir == REQUEST_DEVICE_TO_HOST)
000622  4841              LDR      r0,|L1.1832|
000624  7f00              LDRB     r0,[r0,#0x1c]
000626  0600              LSLS     r0,r0,#24
000628  0fc0              LSRS     r0,r0,#31
00062a  2801              CMP      r0,#1
00062c  d104              BNE      |L1.1592|
;;;1080   							nsAPI_USB_DataInStage();  // read only
00062e  f7fffffe          BL       nsAPI_USB_DataInStage
000632  e001              B        |L1.1592|
                  |L1.1588|
;;;1081   					}
;;;1082   					else
;;;1083   					{
;;;1084   						nsAPI_USB_StatusInStage();
000634  f7fffffe          BL       nsAPI_USB_StatusInStage
                  |L1.1592|
;;;1085   					}
;;;1086   					break;
000638  e003              B        |L1.1602|
                  |L1.1594|
;;;1087   
;;;1088   
;;;1089   #if USB_VENDOR
;;;1090   				case REQUEST_VENDOR:
;;;1091   					switch(g_USBCore_Setting.SetupPacket.bmRequestType.BM.Recipient)
;;;1092   					{
;;;1093   						case REQUEST_TO_DEVICE:
;;;1094   							if(!USB_ReqVendorDev(TRUE))
;;;1095   								goto stall_i;
;;;1096   							break;
;;;1097   		
;;;1098   						case REQUEST_TO_INTERFACE:
;;;1099   							if(!USB_ReqVendorIF(TRUE))
;;;1100   								goto stall_i;
;;;1101   							break;
;;;1102   		
;;;1103   						case REQUEST_TO_ENDPOINT:
;;;1104   							if(!USB_ReqVendorEP(TRUE))
;;;1105   								goto stall_i;
;;;1106   							break;
;;;1107   		
;;;1108   						default:
;;;1109   							goto stall_i;
;;;1110   					}
;;;1111   
;;;1112   					if(g_USBCore_Setting.SetupPacket.wLength)
;;;1113   					{
;;;1114   						if(g_USBCore_Setting.SetupPacket.bmRequestType.BM.Dir == REQUEST_DEVICE_TO_HOST)
;;;1115   							nsAPI_USB_DataInStage();
;;;1116   					}
;;;1117   					else
;;;1118   					{
;;;1119   						nsAPI_USB_StatusInStage();
;;;1120   					}
;;;1121   					break;
;;;1122   #endif
;;;1123   
;;;1124   				default:
;;;1125   stall_i:
00063a  bf00              NOP      
                  |L1.1596|
;;;1126   					nsAPI_USBCore_Stall_i();
00063c  f7fffffe          BL       nsAPI_USBCore_Stall_i
;;;1127   					break;
000640  bf00              NOP      
                  |L1.1602|
000642  bf00              NOP                            ;799
                  |L1.1604|
;;;1128   			}
;;;1129   			break;
000644  e06e              B        |L1.1828|
;;;1130   
;;;1131   		case USB_EVT_OUT:
;;;1132   			if(g_USBCore_Setting.SetupPacket.bmRequestType.BM.Dir == REQUEST_HOST_TO_DEVICE)
000646  4838              LDR      r0,|L1.1832|
000648  7f00              LDRB     r0,[r0,#0x1c]
00064a  0600              LSLS     r0,r0,#24
00064c  0fc0              LSRS     r0,r0,#31
00064e  d143              BNE      |L1.1752|
;;;1133   			{
;;;1134   				if(g_USBCore_Setting.EP0Data.Count)				// still data to receive ?
000650  4835              LDR      r0,|L1.1832|
000652  3014              ADDS     r0,r0,#0x14
000654  8880              LDRH     r0,[r0,#4]
000656  2800              CMP      r0,#0
000658  d040              BEQ      |L1.1756|
;;;1135   				{
;;;1136   					nsAPI_USB_DataOutStage();					// receive data
00065a  f7fffffe          BL       nsAPI_USB_DataOutStage
;;;1137   
;;;1138   					if(g_USBCore_Setting.EP0Data.Count == 0)	// data complete ?
00065e  4832              LDR      r0,|L1.1832|
000660  3014              ADDS     r0,r0,#0x14
000662  8880              LDRH     r0,[r0,#4]
000664  2800              CMP      r0,#0
000666  d139              BNE      |L1.1756|
;;;1139   					{
;;;1140   						switch(g_USBCore_Setting.SetupPacket.bmRequestType.BM.Type)
000668  482f              LDR      r0,|L1.1832|
00066a  7f00              LDRB     r0,[r0,#0x1c]
00066c  0640              LSLS     r0,r0,#25
00066e  0f80              LSRS     r0,r0,#30
000670  d002              BEQ      |L1.1656|
000672  2801              CMP      r0,#1
000674  d12c              BNE      |L1.1744|
000676  e002              B        |L1.1662|
                  |L1.1656|
;;;1141   						{
;;;1142   							case REQUEST_STANDARD:
;;;1143   #if 0
;;;1144   								goto stall_i;
;;;1145   #else
;;;1146   								nsAPI_USBCore_Stall_i();
000678  f7fffffe          BL       nsAPI_USBCore_Stall_i
;;;1147   								break;
00067c  e02b              B        |L1.1750|
                  |L1.1662|
;;;1148   #endif
;;;1149   #if (USB_CLASS)
;;;1150   							case REQUEST_CLASS:
;;;1151   								switch(g_USBCore_Setting.SetupPacket.bmRequestType.BM.Recipient)
00067e  482a              LDR      r0,|L1.1832|
000680  7f00              LDRB     r0,[r0,#0x1c]
000682  06c0              LSLS     r0,r0,#27
000684  0ec0              LSRS     r0,r0,#27
000686  d004              BEQ      |L1.1682|
000688  2801              CMP      r0,#1
00068a  d005              BEQ      |L1.1688|
00068c  2802              CMP      r0,#2
00068e  d018              BEQ      |L1.1730|
000690  e016              B        |L1.1728|
                  |L1.1682|
;;;1152   								{
;;;1153   									case REQUEST_TO_DEVICE:
;;;1154   #if 0
;;;1155   										goto stall_i;
;;;1156   #else
;;;1157   										nsAPI_USBCore_Stall_i();
000692  f7fffffe          BL       nsAPI_USBCore_Stall_i
;;;1158   										break;
000696  e019              B        |L1.1740|
                  |L1.1688|
;;;1159   #endif
;;;1160   									case REQUEST_TO_INTERFACE:
;;;1161   #if USB_HID
;;;1162   										if(g_USBCore_Setting.SetupPacket.wIndex.WB.L == USB_HID_IF_NUM)	// if number correct?
000698  4823              LDR      r0,|L1.1832|
00069a  301c              ADDS     r0,r0,#0x1c
00069c  7900              LDRB     r0,[r0,#4]
00069e  2800              CMP      r0,#0
0006a0  d10d              BNE      |L1.1726|
;;;1163   										{
;;;1164   											switch(g_USBCore_Setting.SetupPacket.bRequest)
0006a2  4821              LDR      r0,|L1.1832|
0006a4  301c              ADDS     r0,r0,#0x1c
0006a6  7840              LDRB     r0,[r0,#1]
0006a8  2809              CMP      r0,#9
0006aa  d107              BNE      |L1.1724|
;;;1165   											{
;;;1166   												case HID_REQUEST_SET_REPORT:
;;;1167   													if(HID_SetReport())
0006ac  f7fffffe          BL       HID_SetReport
0006b0  2800              CMP      r0,#0
0006b2  d002              BEQ      |L1.1722|
;;;1168   													{
;;;1169   														nsAPI_USB_StatusInStage();	// send Acknowledge
0006b4  f7fffffe          BL       nsAPI_USB_StatusInStage
;;;1170   														bOutClassOk = TRUE;
0006b8  2601              MOVS     r6,#1
                  |L1.1722|
;;;1171   													}
;;;1172   													break;
0006ba  bf00              NOP      
                  |L1.1724|
0006bc  bf00              NOP      
                  |L1.1726|
;;;1173   											}
;;;1174   										}
;;;1175   #endif
;;;1176   
;;;1177   									case REQUEST_TO_ENDPOINT:
;;;1178   									default:
0006be  bf00              NOP      
                  |L1.1728|
0006c0  bf00              NOP                            ;1177
                  |L1.1730|
;;;1179   										if(!bOutClassOk)
0006c2  2e00              CMP      r6,#0
0006c4  d101              BNE      |L1.1738|
;;;1180   											nsAPI_USBCore_Stall_i();
0006c6  f7fffffe          BL       nsAPI_USBCore_Stall_i
                  |L1.1738|
0006ca  bf00              NOP                            ;1151
                  |L1.1740|
0006cc  bf00              NOP                            ;1158
;;;1181   								}
;;;1182   out_class_ok:
;;;1183   								break;
0006ce  e002              B        |L1.1750|
                  |L1.1744|
;;;1184   #endif
;;;1185   #if USB_VENDOR
;;;1186   							case REQUEST_VENDOR:
;;;1187   								switch(g_USBCore_Setting.SetupPacket.bmRequestType.BM.Recipient)
;;;1188   								{
;;;1189   									case REQUEST_TO_DEVICE:
;;;1190   										if(!USB_ReqVendorDev(FALSE))
;;;1191   											goto stall_i;
;;;1192   										break;
;;;1193   		
;;;1194   									case REQUEST_TO_INTERFACE:
;;;1195   										if(!USB_ReqVendorIF(FALSE))
;;;1196   											goto stall_i;
;;;1197   										break;
;;;1198   		
;;;1199   									case REQUEST_TO_ENDPOINT:
;;;1200   										if(!USB_ReqVendorEP(FALSE))
;;;1201   											goto stall_i;
;;;1202   										break;
;;;1203   									
;;;1204   									default:
;;;1205   										goto stall_i;
;;;1206   								}
;;;1207   
;;;1208   								nsAPI_USB_StatusInStage();
;;;1209   								break;
;;;1210   #endif
;;;1211   							default:
;;;1212   #if 0
;;;1213   								goto stall_i;
;;;1214   #else
;;;1215   								nsAPI_USBCore_Stall_i();
0006d0  f7fffffe          BL       nsAPI_USBCore_Stall_i
;;;1216   								break;
0006d4  bf00              NOP      
                  |L1.1750|
0006d6  e001              B        |L1.1756|
                  |L1.1752|
;;;1217   #endif
;;;1218   						}
;;;1219   					}
;;;1220   				}
;;;1221   			}
;;;1222   			else
;;;1223   			{
;;;1224   				nsAPI_USB_StatusOutStage();	// receive Acknowledge
0006d8  f7fffffe          BL       nsAPI_USB_StatusOutStage
                  |L1.1756|
;;;1225   			}
;;;1226   			break;
0006dc  e022              B        |L1.1828|
;;;1227   
;;;1228   		case USB_EVT_IN:
;;;1229   			if(g_USBCore_Setting.SetupPacket.bmRequestType.BM.Dir == REQUEST_DEVICE_TO_HOST)
0006de  4812              LDR      r0,|L1.1832|
0006e0  7f00              LDRB     r0,[r0,#0x1c]
0006e2  0600              LSLS     r0,r0,#24
0006e4  0fc0              LSRS     r0,r0,#31
0006e6  2801              CMP      r0,#1
0006e8  d102              BNE      |L1.1776|
;;;1230   			{
;;;1231   				nsAPI_USB_DataInStage();	// send data
0006ea  f7fffffe          BL       nsAPI_USB_DataInStage
0006ee  e010              B        |L1.1810|
                  |L1.1776|
;;;1232   			}
;;;1233   			else
;;;1234   			{
;;;1235   				if(g_USBCore_Setting.USB_DeviceAddress & 0x80)
0006f0  480d              LDR      r0,|L1.1832|
0006f2  3840              SUBS     r0,r0,#0x40
0006f4  78c0              LDRB     r0,[r0,#3]  ; g_USBCore_Setting
0006f6  2180              MOVS     r1,#0x80
0006f8  4208              TST      r0,r1
0006fa  d00a              BEQ      |L1.1810|
;;;1236   				{
;;;1237   					g_USBCore_Setting.USB_DeviceAddress &= 0x7F;
0006fc  480a              LDR      r0,|L1.1832|
0006fe  3840              SUBS     r0,r0,#0x40
000700  78c0              LDRB     r0,[r0,#3]  ; g_USBCore_Setting
000702  0640              LSLS     r0,r0,#25
000704  0e40              LSRS     r0,r0,#25
000706  4908              LDR      r1,|L1.1832|
000708  3940              SUBS     r1,r1,#0x40
00070a  70c8              STRB     r0,[r1,#3]
;;;1238   					nsAPI_USB_SetAddress(g_USBCore_Setting.USB_DeviceAddress);
00070c  78c8              LDRB     r0,[r1,#3]  ; g_USBCore_Setting
00070e  f7fffffe          BL       nsAPI_USB_SetAddress
                  |L1.1810|
;;;1239   				}
;;;1240   			}
;;;1241   			break;
000712  e007              B        |L1.1828|
;;;1242   
;;;1243   		case USB_EVT_OUT_STALL:
;;;1244   			nsAPI_USB_ClrStallEP(0x00);
000714  2000              MOVS     r0,#0
000716  f7fffffe          BL       nsAPI_USB_ClrStallEP
;;;1245   			break;
00071a  e003              B        |L1.1828|
;;;1246   
;;;1247   		case USB_EVT_IN_STALL:
;;;1248   			nsAPI_USB_ClrStallEP(0x80);
00071c  2080              MOVS     r0,#0x80
00071e  f7fffffe          BL       nsAPI_USB_ClrStallEP
;;;1249   			break;
000722  bf00              NOP      
                  |L1.1828|
000724  bf00              NOP                            ;1129
;;;1250   	}
;;;1251   }
000726  bd70              POP      {r4-r6,pc}
;;;1252   
                          ENDP

                  |L1.1832|
                          DCD      g_USBCore_Setting+0x40
                  |L1.1836|
                          DCD      usb_reg_addr
                  |L1.1840|
                          DCD      usb_reg_data
                  |L1.1844|
                          DCD      mouse_event_ctrl
                  |L1.1848|
                          DCD      ||.data||+0x2
                  |L1.1852|
                          DCD      usbSROM

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_USBCore_Setting
                          %        100
                  usbSROM
                          %        256

                          AREA ||.data||, DATA, ALIGN=2

                  ready_flash_flag
000000  0000              DCB      0x00,0x00
                  sromCntr
000002  0000              DCW      0x0000
                  flash_sector_address
                          DCD      0x00000000
                  flash_address_offset
                          DCD      0x00000000
                  usb_reg_addr
00000c  00                DCB      0x00
                  usb_reg_data
00000d  00                DCB      0x00

                          AREA ||i.nsAPI_USB_ReqGetStatus||, COMGROUP=nsAPI_USB_ReqGetStatus, CODE, READONLY, ALIGN=2

                  nsAPI_USB_ReqGetStatus PROC
;;;126    //----------------------------------------------------------------------------
;;;127    __inline Boolean nsAPI_USB_ReqGetStatus(void)
000000  482c              LDR      r0,|L17.180|
;;;128    {
;;;129    	U32 n, m;
;;;130    
;;;131    	switch(g_USBCore_Setting.SetupPacket.bmRequestType.BM.Recipient)
000002  7f00              LDRB     r0,[r0,#0x1c]
000004  06c0              LSLS     r0,r0,#27
000006  0ec0              LSRS     r0,r0,#27
000008  d004              BEQ      |L17.20|
00000a  2801              CMP      r0,#1
00000c  d007              BEQ      |L17.30|
00000e  2802              CMP      r0,#2
000010  d14a              BNE      |L17.168|
000012  e01b              B        |L17.76|
                  |L17.20|
;;;132    	{
;;;133    		case REQUEST_TO_DEVICE:
;;;134    			g_USBCore_Setting.EP0Data.pData = (U8 *)&g_USBCore_Setting.USB_DeviceStatus;
000014  4827              LDR      r0,|L17.180|
000016  3840              SUBS     r0,r0,#0x40
000018  4603              MOV      r3,r0
00001a  6558              STR      r0,[r3,#0x54]  ; g_USBCore_Setting
;;;135    			break;
00001c  e046              B        |L17.172|
                  |L17.30|
;;;136    
;;;137    		case REQUEST_TO_INTERFACE:
;;;138    			if((g_USBCore_Setting.USB_Configuration != 0) && (g_USBCore_Setting.SetupPacket.wIndex.WB.L < g_USBCore_Setting.USB_NumInterfaces))
00001e  4825              LDR      r0,|L17.180|
000020  3840              SUBS     r0,r0,#0x40
000022  7900              LDRB     r0,[r0,#4]  ; g_USBCore_Setting
000024  2800              CMP      r0,#0
000026  d00e              BEQ      |L17.70|
000028  4822              LDR      r0,|L17.180|
00002a  301c              ADDS     r0,r0,#0x1c
00002c  7900              LDRB     r0,[r0,#4]
00002e  4b21              LDR      r3,|L17.180|
000030  3b40              SUBS     r3,r3,#0x40
000032  789b              LDRB     r3,[r3,#2]  ; g_USBCore_Setting
000034  4298              CMP      r0,r3
000036  da06              BGE      |L17.70|
;;;139    			{
;;;140    				*((__packed U16 *)g_USBCore_Setting.EP0Buf) = 0;
000038  2000              MOVS     r0,#0
00003a  4b1e              LDR      r3,|L17.180|
00003c  3b40              SUBS     r3,r3,#0x40
00003e  80d8              STRH     r0,[r3,#6]
;;;141    				g_USBCore_Setting.EP0Data.pData = g_USBCore_Setting.EP0Buf;
000040  1d98              ADDS     r0,r3,#6
000042  6558              STR      r0,[r3,#0x54]  ; g_USBCore_Setting
000044  e001              B        |L17.74|
                  |L17.70|
;;;142    			}
;;;143    			else
;;;144    				return (FALSE);
000046  2000              MOVS     r0,#0
                  |L17.72|
;;;145    			break;
;;;146    
;;;147    		case REQUEST_TO_ENDPOINT:
;;;148    			n = g_USBCore_Setting.SetupPacket.wIndex.WB.L & 0x8F;
;;;149    			m = (n & 0x80) ? ((1 << 16) << (n & 0x0F)) : (1 << n);
;;;150    	
;;;151    			if(((g_USBCore_Setting.USB_Configuration != 0) || ((n & 0x0F) == 0)) && (g_USBCore_Setting.USB_EndPointMask & m))
;;;152    			{
;;;153    				*((__packed U16 *)g_USBCore_Setting.EP0Buf) = (g_USBCore_Setting.USB_EndPointHalt & m) ? 1 : 0;
;;;154    				g_USBCore_Setting.EP0Data.pData = g_USBCore_Setting.EP0Buf;
;;;155    			}
;;;156    			else
;;;157    			{
;;;158    				return (FALSE);
;;;159    			}
;;;160    			break;
;;;161    
;;;162    		default:
;;;163    			return (FALSE);
;;;164    	}
;;;165    
;;;166    	return (TRUE);
;;;167    }
000048  4770              BX       lr
                  |L17.74|
00004a  e02f              B        |L17.172|
                  |L17.76|
00004c  4819              LDR      r0,|L17.180|
00004e  301c              ADDS     r0,r0,#0x1c           ;148
000050  7901              LDRB     r1,[r0,#4]            ;148
000052  238f              MOVS     r3,#0x8f              ;148
000054  4019              ANDS     r1,r1,r3              ;148
000056  2080              MOVS     r0,#0x80              ;149
000058  4201              TST      r1,r0                 ;149
00005a  d004              BEQ      |L17.102|
00005c  070b              LSLS     r3,r1,#28             ;149
00005e  0f1b              LSRS     r3,r3,#28             ;149
000060  0240              LSLS     r0,r0,#9              ;149
000062  4098              LSLS     r0,r0,r3              ;149
000064  e001              B        |L17.106|
                  |L17.102|
000066  2001              MOVS     r0,#1                 ;149
000068  4088              LSLS     r0,r0,r1              ;149
                  |L17.106|
00006a  4602              MOV      r2,r0                 ;149
00006c  4811              LDR      r0,|L17.180|
00006e  3840              SUBS     r0,r0,#0x40           ;151
000070  7900              LDRB     r0,[r0,#4]            ;151  ; g_USBCore_Setting
000072  2800              CMP      r0,#0                 ;151
000074  d102              BNE      |L17.124|
000076  0708              LSLS     r0,r1,#28             ;151
000078  0f00              LSRS     r0,r0,#28             ;151
00007a  d112              BNE      |L17.162|
                  |L17.124|
00007c  480d              LDR      r0,|L17.180|
00007e  3840              SUBS     r0,r0,#0x40           ;151
000080  6c80              LDR      r0,[r0,#0x48]         ;151  ; g_USBCore_Setting
000082  4210              TST      r0,r2                 ;151
000084  d00d              BEQ      |L17.162|
000086  480b              LDR      r0,|L17.180|
000088  3840              SUBS     r0,r0,#0x40           ;153
00008a  6cc0              LDR      r0,[r0,#0x4c]         ;153  ; g_USBCore_Setting
00008c  4210              TST      r0,r2                 ;153
00008e  d001              BEQ      |L17.148|
000090  2001              MOVS     r0,#1                 ;153
000092  e000              B        |L17.150|
                  |L17.148|
000094  2000              MOVS     r0,#0                 ;153
                  |L17.150|
000096  4b07              LDR      r3,|L17.180|
000098  3b40              SUBS     r3,r3,#0x40           ;153
00009a  80d8              STRH     r0,[r3,#6]            ;153
00009c  1d98              ADDS     r0,r3,#6              ;154
00009e  6558              STR      r0,[r3,#0x54]         ;154  ; g_USBCore_Setting
0000a0  e001              B        |L17.166|
                  |L17.162|
0000a2  2000              MOVS     r0,#0                 ;158
0000a4  e7d0              B        |L17.72|
                  |L17.166|
0000a6  e001              B        |L17.172|
                  |L17.168|
0000a8  2000              MOVS     r0,#0                 ;163
0000aa  e7cd              B        |L17.72|
                  |L17.172|
0000ac  bf00              NOP                            ;135
0000ae  2001              MOVS     r0,#1                 ;166
0000b0  e7ca              B        |L17.72|
;;;168    
                          ENDP

0000b2  0000              DCW      0x0000
                  |L17.180|
                          DCD      g_USBCore_Setting+0x40

                          AREA ||i.nsAPI_USB_ReqSetClrFeature||, COMGROUP=nsAPI_USB_ReqSetClrFeature, CODE, READONLY, ALIGN=2

                  nsAPI_USB_ReqSetClrFeature PROC
;;;172    //----------------------------------------------------------------------------
;;;173    __inline Boolean nsAPI_USB_ReqSetClrFeature(U32 sc)
000000  b570              PUSH     {r4-r6,lr}
;;;174    {
000002  4604              MOV      r4,r0
;;;175    	U32 n, m;
;;;176    
;;;177    	switch(g_USBCore_Setting.SetupPacket.bmRequestType.BM.Recipient)
000004  483b              LDR      r0,|L24.244|
000006  7f00              LDRB     r0,[r0,#0x1c]
000008  06c0              LSLS     r0,r0,#27
00000a  0ec0              LSRS     r0,r0,#27
00000c  d004              BEQ      |L24.24|
00000e  2801              CMP      r0,#1
000010  d023              BEQ      |L24.90|
000012  2802              CMP      r0,#2
000014  d169              BNE      |L24.234|
000016  e022              B        |L24.94|
                  |L24.24|
;;;178    	{
;;;179    		case REQUEST_TO_DEVICE:
;;;180    			if(g_USBCore_Setting.SetupPacket.wValue.W == USB_FEATURE_REMOTE_WAKEUP)
000018  4836              LDR      r0,|L24.244|
00001a  301c              ADDS     r0,r0,#0x1c
00001c  8840              LDRH     r0,[r0,#2]
00001e  2801              CMP      r0,#1
000020  d118              BNE      |L24.84|
;;;181    			{
;;;182    				if(sc)
000022  2c00              CMP      r4,#0
000024  d00a              BEQ      |L24.60|
;;;183    				{
;;;184    					NDrv_USB_WakeUpCfg(TRUE);
000026  f7fffffe          BL       NDrv_USB_WakeUpCfg
;;;185    					g_USBCore_Setting.USB_DeviceStatus |=  USB_GETSTATUS_REMOTE_WAKEUP;
00002a  4832              LDR      r0,|L24.244|
00002c  3840              SUBS     r0,r0,#0x40
00002e  8800              LDRH     r0,[r0,#0]  ; g_USBCore_Setting
000030  2102              MOVS     r1,#2
000032  4308              ORRS     r0,r0,r1
000034  492f              LDR      r1,|L24.244|
000036  3940              SUBS     r1,r1,#0x40
000038  8008              STRH     r0,[r1,#0]
00003a  e00d              B        |L24.88|
                  |L24.60|
;;;186    				}
;;;187    				else
;;;188    				{
;;;189    					NDrv_USB_WakeUpCfg(FALSE);
00003c  2000              MOVS     r0,#0
00003e  f7fffffe          BL       NDrv_USB_WakeUpCfg
;;;190    					g_USBCore_Setting.USB_DeviceStatus &= ~USB_GETSTATUS_REMOTE_WAKEUP;
000042  482c              LDR      r0,|L24.244|
000044  3840              SUBS     r0,r0,#0x40
000046  8800              LDRH     r0,[r0,#0]  ; g_USBCore_Setting
000048  2102              MOVS     r1,#2
00004a  4388              BICS     r0,r0,r1
00004c  4929              LDR      r1,|L24.244|
00004e  3940              SUBS     r1,r1,#0x40
000050  8008              STRH     r0,[r1,#0]
000052  e001              B        |L24.88|
                  |L24.84|
;;;191    				}
;;;192    			}
;;;193    			else
;;;194    			{
;;;195    				return (FALSE);
000054  2000              MOVS     r0,#0
                  |L24.86|
;;;196    			}
;;;197    			break;
;;;198    
;;;199    		case REQUEST_TO_INTERFACE:
;;;200    			return (FALSE);
;;;201    
;;;202    		case REQUEST_TO_ENDPOINT:
;;;203    			n = g_USBCore_Setting.SetupPacket.wIndex.WB.L & 0x8F;
;;;204    			m = (n & 0x80) ? ((1 << 16) << (n & 0x0F)) : (1 << n);
;;;205    	
;;;206    			if((g_USBCore_Setting.USB_Configuration != 0) && ((n & 0x0F) != 0) && (g_USBCore_Setting.USB_EndPointMask & m))
;;;207    			{
;;;208    				if(g_USBCore_Setting.SetupPacket.wValue.W == USB_FEATURE_ENDPOINT_STALL)
;;;209    				{
;;;210    					if(sc)
;;;211    					{
;;;212    						nsAPI_USB_SetStallEP(n);
;;;213    						g_USBCore_Setting.USB_EndPointHalt |=  m;
;;;214    					}
;;;215    					else
;;;216    					{
;;;217    						if((g_USBCore_Setting.USB_EndPointStall & m) != 0)
;;;218    							return (TRUE);
;;;219    						
;;;220    						nsAPI_USB_ClrStallEP(n);
;;;221    						g_USBCore_Setting.USB_EndPointHalt &= ~m;
;;;222    					}
;;;223    				}
;;;224    				else
;;;225    				{
;;;226    					return (FALSE);
;;;227    				}
;;;228    			}
;;;229    			else
;;;230    		  	{
;;;231    				return (FALSE);
;;;232    			}
;;;233    			break;
;;;234    
;;;235    		default:
;;;236    			return (FALSE);
;;;237    	}
;;;238    
;;;239    	return (TRUE);
;;;240    }
000056  bd70              POP      {r4-r6,pc}
                  |L24.88|
000058  e049              B        |L24.238|
                  |L24.90|
00005a  2000              MOVS     r0,#0                 ;200
00005c  e7fb              B        |L24.86|
                  |L24.94|
00005e  4825              LDR      r0,|L24.244|
000060  301c              ADDS     r0,r0,#0x1c           ;203
000062  7905              LDRB     r5,[r0,#4]            ;203
000064  218f              MOVS     r1,#0x8f              ;203
000066  400d              ANDS     r5,r5,r1              ;203
000068  2080              MOVS     r0,#0x80              ;204
00006a  4205              TST      r5,r0                 ;204
00006c  d004              BEQ      |L24.120|
00006e  0729              LSLS     r1,r5,#28             ;204
000070  0f09              LSRS     r1,r1,#28             ;204
000072  0240              LSLS     r0,r0,#9              ;204
000074  4088              LSLS     r0,r0,r1              ;204
000076  e001              B        |L24.124|
                  |L24.120|
000078  2001              MOVS     r0,#1                 ;204
00007a  40a8              LSLS     r0,r0,r5              ;204
                  |L24.124|
00007c  4606              MOV      r6,r0                 ;204
00007e  481d              LDR      r0,|L24.244|
000080  3840              SUBS     r0,r0,#0x40           ;206
000082  7900              LDRB     r0,[r0,#4]            ;206  ; g_USBCore_Setting
000084  2800              CMP      r0,#0                 ;206
000086  d02d              BEQ      |L24.228|
000088  0728              LSLS     r0,r5,#28             ;206
00008a  0f00              LSRS     r0,r0,#28             ;206
00008c  d02a              BEQ      |L24.228|
00008e  4819              LDR      r0,|L24.244|
000090  3840              SUBS     r0,r0,#0x40           ;206
000092  6c80              LDR      r0,[r0,#0x48]         ;206  ; g_USBCore_Setting
000094  4230              TST      r0,r6                 ;206
000096  d025              BEQ      |L24.228|
000098  4816              LDR      r0,|L24.244|
00009a  301c              ADDS     r0,r0,#0x1c           ;208
00009c  8840              LDRH     r0,[r0,#2]            ;208
00009e  2800              CMP      r0,#0                 ;208
0000a0  d11e              BNE      |L24.224|
0000a2  2c00              CMP      r4,#0                 ;210
0000a4  d00a              BEQ      |L24.188|
0000a6  4628              MOV      r0,r5                 ;212
0000a8  f7fffffe          BL       nsAPI_USB_SetStallEP
0000ac  4811              LDR      r0,|L24.244|
0000ae  3840              SUBS     r0,r0,#0x40           ;213
0000b0  6cc0              LDR      r0,[r0,#0x4c]         ;213  ; g_USBCore_Setting
0000b2  4330              ORRS     r0,r0,r6              ;213
0000b4  490f              LDR      r1,|L24.244|
0000b6  3940              SUBS     r1,r1,#0x40           ;213
0000b8  64c8              STR      r0,[r1,#0x4c]         ;213  ; g_USBCore_Setting
0000ba  e015              B        |L24.232|
                  |L24.188|
0000bc  480d              LDR      r0,|L24.244|
0000be  3840              SUBS     r0,r0,#0x40           ;217
0000c0  6d00              LDR      r0,[r0,#0x50]         ;217  ; g_USBCore_Setting
0000c2  4230              TST      r0,r6                 ;217
0000c4  d001              BEQ      |L24.202|
0000c6  2001              MOVS     r0,#1                 ;218
0000c8  e7c5              B        |L24.86|
                  |L24.202|
0000ca  4628              MOV      r0,r5                 ;220
0000cc  f7fffffe          BL       nsAPI_USB_ClrStallEP
0000d0  4808              LDR      r0,|L24.244|
0000d2  3840              SUBS     r0,r0,#0x40           ;221
0000d4  6cc0              LDR      r0,[r0,#0x4c]         ;221  ; g_USBCore_Setting
0000d6  43b0              BICS     r0,r0,r6              ;221
0000d8  4906              LDR      r1,|L24.244|
0000da  3940              SUBS     r1,r1,#0x40           ;221
0000dc  64c8              STR      r0,[r1,#0x4c]         ;221  ; g_USBCore_Setting
0000de  e003              B        |L24.232|
                  |L24.224|
0000e0  2000              MOVS     r0,#0                 ;226
0000e2  e7b8              B        |L24.86|
                  |L24.228|
0000e4  2000              MOVS     r0,#0                 ;231
0000e6  e7b6              B        |L24.86|
                  |L24.232|
0000e8  e001              B        |L24.238|
                  |L24.234|
0000ea  2000              MOVS     r0,#0                 ;236
0000ec  e7b3              B        |L24.86|
                  |L24.238|
0000ee  bf00              NOP                            ;197
0000f0  2001              MOVS     r0,#1                 ;239
0000f2  e7b0              B        |L24.86|
;;;241    
                          ENDP

                  |L24.244|
                          DCD      g_USBCore_Setting+0x40

                          AREA ||i.nsAPI_USB_ReqGetDescriptor||, COMGROUP=nsAPI_USB_ReqGetDescriptor, CODE, READONLY, ALIGN=2

                  nsAPI_USB_ReqGetDescriptor PROC
;;;264    //----------------------------------------------------------------------------
;;;265    __inline Boolean nsAPI_USB_ReqGetDescriptor(void)
000000  b510              PUSH     {r4,lr}
;;;266    {
;;;267    	U8 *pD;
;;;268    	U32 len, n;
;;;269    
;;;270    	switch(g_USBCore_Setting.SetupPacket.bmRequestType.BM.Recipient)
000002  4846              LDR      r0,|L31.284|
000004  7f00              LDRB     r0,[r0,#0x1c]
000006  06c0              LSLS     r0,r0,#27
000008  0ec0              LSRS     r0,r0,#27
00000a  d002              BEQ      |L31.18|
00000c  2801              CMP      r0,#1
00000e  d177              BNE      |L31.256|
000010  e048              B        |L31.164|
                  |L31.18|
;;;271    	{
;;;272    		case REQUEST_TO_DEVICE:
;;;273    			switch(g_USBCore_Setting.SetupPacket.wValue.WB.H)
000012  4842              LDR      r0,|L31.284|
000014  301c              ADDS     r0,r0,#0x1c
000016  78c0              LDRB     r0,[r0,#3]
000018  2801              CMP      r0,#1
00001a  d004              BEQ      |L31.38|
00001c  2802              CMP      r0,#2
00001e  d008              BEQ      |L31.50|
000020  2803              CMP      r0,#3
000022  d13b              BNE      |L31.156|
000024  e022              B        |L31.108|
                  |L31.38|
;;;274    			{
;;;275    				case USB_DEVICE_DESCRIPTOR_TYPE:
;;;276    					g_USBCore_Setting.EP0Data.pData = (U8 *)USB_DeviceDescriptor;
000026  483e              LDR      r0,|L31.288|
000028  4c3c              LDR      r4,|L31.284|
00002a  3c40              SUBS     r4,r4,#0x40
00002c  6560              STR      r0,[r4,#0x54]  ; g_USBCore_Setting
;;;277    					len = USB_DEVICE_DESC_SIZE;
00002e  2212              MOVS     r2,#0x12
;;;278    					break;
000030  e036              B        |L31.160|
                  |L31.50|
;;;279    
;;;280    				case USB_CONFIGURATION_DESCRIPTOR_TYPE:
;;;281    					pD = (U8 *)USB_ConfigDescriptor;
000032  493c              LDR      r1,|L31.292|
;;;282    					for(n = 0; n != g_USBCore_Setting.SetupPacket.wValue.WB.L; n++)
000034  2300              MOVS     r3,#0
000036  e008              B        |L31.74|
                  |L31.56|
;;;283    						if(((USB_CONFIGURATION_DESCRIPTOR *)pD)->bLength != 0)
000038  7808              LDRB     r0,[r1,#0]
00003a  2800              CMP      r0,#0
00003c  d004              BEQ      |L31.72|
;;;284    							pD += ((USB_CONFIGURATION_DESCRIPTOR *)pD)->wTotalLength;
00003e  78c8              LDRB     r0,[r1,#3]
000040  788c              LDRB     r4,[r1,#2]
000042  0200              LSLS     r0,r0,#8
000044  4320              ORRS     r0,r0,r4
000046  1841              ADDS     r1,r0,r1
                  |L31.72|
000048  1c5b              ADDS     r3,r3,#1              ;282
                  |L31.74|
00004a  4834              LDR      r0,|L31.284|
00004c  301c              ADDS     r0,r0,#0x1c           ;282
00004e  7880              LDRB     r0,[r0,#2]            ;282
000050  4298              CMP      r0,r3                 ;282
000052  d1f1              BNE      |L31.56|
;;;285    
;;;286    					if(((USB_CONFIGURATION_DESCRIPTOR *)pD)->bLength == 0)
000054  7808              LDRB     r0,[r1,#0]
000056  2800              CMP      r0,#0
000058  d100              BNE      |L31.92|
                  |L31.90|
;;;287    						return (FALSE);
;;;288    
;;;289    					g_USBCore_Setting.EP0Data.pData = pD;
;;;290    					len = ((USB_CONFIGURATION_DESCRIPTOR *)pD)->wTotalLength;
;;;291    					break;
;;;292    
;;;293    #if LPM_SUPPORT
;;;294    				case USB_BOS_TYPE:
;;;295    					pD = (uint8_t *)USB_BOSDescriptor;
;;;296    					for(n = 0; n != g_USBCore_Setting.SetupPacket.wValue.WB.L; n++)
;;;297    						if(((USB_BOS_DESCRIPTOR *)pD)->bLength != 0)
;;;298    							pD += ((USB_BOS_DESCRIPTOR *)pD)->wTotalLength;
;;;299    
;;;300    					if(((USB_BOS_DESCRIPTOR *)pD)->bLength == 0)
;;;301    						return (FALSE);
;;;302    
;;;303    					g_USBCore_Setting.EP0Data.pData = pD;
;;;304    					len = ((USB_BOS_DESCRIPTOR *)pD)->wTotalLength;
;;;305    					break;
;;;306    #endif
;;;307    
;;;308    				case USB_STRING_DESCRIPTOR_TYPE:
;;;309    					pD = (uint8_t *)USB_StringDescriptor;
;;;310    					for(n = 0; n != g_USBCore_Setting.SetupPacket.wValue.WB.L; n++)
;;;311    						if(((USB_STRING_DESCRIPTOR *)pD)->bLength != 0)
;;;312    							pD += ((USB_STRING_DESCRIPTOR *)pD)->bLength;
;;;313    
;;;314    					if(((USB_STRING_DESCRIPTOR *)pD)->bLength == 0)
;;;315    						return (FALSE);
;;;316    
;;;317    					g_USBCore_Setting.EP0Data.pData = pD;
;;;318    					len = ((USB_STRING_DESCRIPTOR *)g_USBCore_Setting.EP0Data.pData)->bLength;
;;;319    					break;
;;;320    			
;;;321    				default:
;;;322    					return (FALSE);
;;;323    			}
;;;324    			break;
;;;325    
;;;326    		case REQUEST_TO_INTERFACE:
;;;327    			switch(g_USBCore_Setting.SetupPacket.wValue.WB.H)
;;;328    			{
;;;329    #if USB_HID
;;;330    				case HID_HID_DESCRIPTOR_TYPE:
;;;331    					g_USBCore_Setting.EP0Data.pData = ((U8 *)USB_ConfigDescriptor + HID_DESC_OFFSET+(g_USBCore_Setting.SetupPacket.wIndex.WB.L * 25));
;;;332    					len = HID_DESC_SIZE;
;;;333    					break;
;;;334    
;;;335    				case HID_REPORT_DESCRIPTOR_TYPE:
;;;336    					switch(g_USBCore_Setting.SetupPacket.wIndex.WB.L)
;;;337    					{
;;;338    						case 0:
;;;339    							len = HID_ReportDescMouseSize;
;;;340    							g_USBCore_Setting.EP0Data.pData = (U8 *)HID_ReportDescriptorMouse;
;;;341    							break;
;;;342    						
;;;343    						default:
;;;344    							return (FALSE);
;;;345    					}
;;;346    					break;
;;;347    	
;;;348    				case HID_PHYSICAL_DESCRIPTOR_TYPE:
;;;349    					return (FALSE);		// HID Physical Descriptor is not supported
;;;350    #endif
;;;351    				default:
;;;352    					return (FALSE);
;;;353    			}
;;;354    			break;
;;;355    		
;;;356    			default:
;;;357    				return (FALSE);
;;;358    	}
;;;359    
;;;360    	if(g_USBCore_Setting.EP0Data.Count > len)
;;;361    		g_USBCore_Setting.EP0Data.Count = len;
;;;362    
;;;363    	return (TRUE);
;;;364    }
00005a  bd10              POP      {r4,pc}
                  |L31.92|
00005c  482f              LDR      r0,|L31.284|
00005e  3840              SUBS     r0,r0,#0x40           ;289
000060  6541              STR      r1,[r0,#0x54]         ;289  ; g_USBCore_Setting
000062  78c8              LDRB     r0,[r1,#3]            ;290
000064  788c              LDRB     r4,[r1,#2]            ;290
000066  0202              LSLS     r2,r0,#8              ;290
000068  4322              ORRS     r2,r2,r4              ;290
00006a  e019              B        |L31.160|
                  |L31.108|
00006c  492e              LDR      r1,|L31.296|
00006e  2300              MOVS     r3,#0                 ;310
000070  e005              B        |L31.126|
                  |L31.114|
000072  7808              LDRB     r0,[r1,#0]            ;311
000074  2800              CMP      r0,#0                 ;311
000076  d001              BEQ      |L31.124|
000078  7808              LDRB     r0,[r1,#0]            ;312
00007a  1841              ADDS     r1,r0,r1              ;312
                  |L31.124|
00007c  1c5b              ADDS     r3,r3,#1              ;310
                  |L31.126|
00007e  4827              LDR      r0,|L31.284|
000080  301c              ADDS     r0,r0,#0x1c           ;310
000082  7880              LDRB     r0,[r0,#2]            ;310
000084  4298              CMP      r0,r3                 ;310
000086  d1f4              BNE      |L31.114|
000088  7808              LDRB     r0,[r1,#0]            ;314
00008a  2800              CMP      r0,#0                 ;314
00008c  d100              BNE      |L31.144|
00008e  e7e4              B        |L31.90|
                  |L31.144|
000090  4822              LDR      r0,|L31.284|
000092  3840              SUBS     r0,r0,#0x40           ;317
000094  6541              STR      r1,[r0,#0x54]         ;317  ; g_USBCore_Setting
000096  6d40              LDR      r0,[r0,#0x54]         ;318  ; g_USBCore_Setting
000098  7802              LDRB     r2,[r0,#0]            ;318
00009a  e001              B        |L31.160|
                  |L31.156|
00009c  2000              MOVS     r0,#0                 ;322
00009e  e7dc              B        |L31.90|
                  |L31.160|
0000a0  bf00              NOP                            ;278
0000a2  e02f              B        |L31.260|
                  |L31.164|
0000a4  481d              LDR      r0,|L31.284|
0000a6  301c              ADDS     r0,r0,#0x1c           ;327
0000a8  78c0              LDRB     r0,[r0,#3]            ;327
0000aa  2821              CMP      r0,#0x21              ;327
0000ac  d004              BEQ      |L31.184|
0000ae  2822              CMP      r0,#0x22              ;327
0000b0  d00f              BEQ      |L31.210|
0000b2  2823              CMP      r0,#0x23              ;327
0000b4  d120              BNE      |L31.248|
0000b6  e01d              B        |L31.244|
                  |L31.184|
0000b8  4818              LDR      r0,|L31.284|
0000ba  301c              ADDS     r0,r0,#0x1c           ;331
0000bc  7904              LDRB     r4,[r0,#4]            ;331
0000be  2019              MOVS     r0,#0x19              ;331
0000c0  4344              MULS     r4,r0,r4              ;331
0000c2  4818              LDR      r0,|L31.292|
0000c4  3012              ADDS     r0,r0,#0x12           ;331
0000c6  1820              ADDS     r0,r4,r0              ;331
0000c8  4c14              LDR      r4,|L31.284|
0000ca  3c40              SUBS     r4,r4,#0x40           ;331
0000cc  6560              STR      r0,[r4,#0x54]         ;331  ; g_USBCore_Setting
0000ce  2209              MOVS     r2,#9                 ;332
0000d0  e014              B        |L31.252|
                  |L31.210|
0000d2  4812              LDR      r0,|L31.284|
0000d4  301c              ADDS     r0,r0,#0x1c           ;336
0000d6  7900              LDRB     r0,[r0,#4]            ;336
0000d8  2800              CMP      r0,#0                 ;336
0000da  d106              BNE      |L31.234|
0000dc  4813              LDR      r0,|L31.300|
0000de  8802              LDRH     r2,[r0,#0]            ;339  ; HID_ReportDescMouseSize
0000e0  4813              LDR      r0,|L31.304|
0000e2  4c0e              LDR      r4,|L31.284|
0000e4  3c40              SUBS     r4,r4,#0x40           ;340
0000e6  6560              STR      r0,[r4,#0x54]         ;340  ; g_USBCore_Setting
0000e8  e001              B        |L31.238|
                  |L31.234|
0000ea  2000              MOVS     r0,#0                 ;344
0000ec  e7b5              B        |L31.90|
                  |L31.238|
0000ee  bf00              NOP                            ;341
0000f0  e004              B        |L31.252|
0000f2  e005              B        |L31.256|
                  |L31.244|
0000f4  2000              MOVS     r0,#0                 ;349
0000f6  e7b0              B        |L31.90|
                  |L31.248|
0000f8  2000              MOVS     r0,#0                 ;352
0000fa  e7ae              B        |L31.90|
                  |L31.252|
0000fc  bf00              NOP                            ;333
0000fe  e001              B        |L31.260|
                  |L31.256|
000100  2000              MOVS     r0,#0                 ;357
000102  e7aa              B        |L31.90|
                  |L31.260|
000104  bf00              NOP                            ;324
000106  4805              LDR      r0,|L31.284|
000108  3014              ADDS     r0,r0,#0x14           ;360
00010a  8880              LDRH     r0,[r0,#4]            ;360
00010c  4290              CMP      r0,r2                 ;360
00010e  d902              BLS      |L31.278|
000110  4802              LDR      r0,|L31.284|
000112  3014              ADDS     r0,r0,#0x14           ;361
000114  8082              STRH     r2,[r0,#4]            ;361
                  |L31.278|
000116  2001              MOVS     r0,#1                 ;363
000118  e79f              B        |L31.90|
;;;365    
                          ENDP

00011a  0000              DCW      0x0000
                  |L31.284|
                          DCD      g_USBCore_Setting+0x40
                  |L31.288|
                          DCD      USB_DeviceDescriptor
                  |L31.292|
                          DCD      USB_ConfigDescriptor
                  |L31.296|
                          DCD      USB_StringDescriptor
                  |L31.300|
                          DCD      HID_ReportDescMouseSize
                  |L31.304|
                          DCD      HID_ReportDescriptorMouse

                          AREA ||i.nsAPI_USB_ReqSetConfiguration||, COMGROUP=nsAPI_USB_ReqSetConfiguration, CODE, READONLY, ALIGN=2

                  nsAPI_USB_ReqSetConfiguration PROC
;;;388    //----------------------------------------------------------------------------
;;;389    __inline Boolean nsAPI_USB_ReqSetConfiguration(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;390    {
;;;391    	USB_COMMON_DESCRIPTOR *pD;
;;;392    	U32 alt = 0, n, m;
000002  2500              MOVS     r5,#0
;;;393    
;;;394    	switch(g_USBCore_Setting.SetupPacket.bmRequestType.BM.Recipient)
000004  4868              LDR      r0,|L38.424|
000006  7f00              LDRB     r0,[r0,#0x1c]
000008  06c0              LSLS     r0,r0,#27
00000a  0ec0              LSRS     r0,r0,#27
00000c  d178              BNE      |L38.256|
;;;395    	{
;;;396    		case REQUEST_TO_DEVICE:
;;;397    			if(g_USBCore_Setting.SetupPacket.wValue.WB.L)
00000e  4866              LDR      r0,|L38.424|
000010  301c              ADDS     r0,r0,#0x1c
000012  7880              LDRB     r0,[r0,#2]
000014  2800              CMP      r0,#0
000016  d074              BEQ      |L38.258|
;;;398    			{
;;;399    				pD = (USB_COMMON_DESCRIPTOR *)USB_ConfigDescriptor;
000018  4c64              LDR      r4,|L38.428|
;;;400    				while(pD->bLength)
00001a  e088              B        |L38.302|
                  |L38.28|
;;;401    				{
;;;402    					switch (pD->bDescriptorType)
00001c  7860              LDRB     r0,[r4,#1]
00001e  2802              CMP      r0,#2
000020  d004              BEQ      |L38.44|
000022  2804              CMP      r0,#4
000024  d05c              BEQ      |L38.224|
000026  2805              CMP      r0,#5
000028  d17d              BNE      |L38.294|
00002a  e05b              B        |L38.228|
                  |L38.44|
;;;403    					{
;;;404    						case USB_CONFIGURATION_DESCRIPTOR_TYPE:
;;;405    							if(((USB_CONFIGURATION_DESCRIPTOR *)pD)->bConfigurationValue == g_USBCore_Setting.SetupPacket.wValue.WB.L)
00002c  7961              LDRB     r1,[r4,#5]
00002e  485e              LDR      r0,|L38.424|
000030  301c              ADDS     r0,r0,#0x1c
000032  7880              LDRB     r0,[r0,#2]
000034  4281              CMP      r1,r0
000036  d14c              BNE      |L38.210|
;;;406    							{
;;;407    								g_USBCore_Setting.USB_Configuration = g_USBCore_Setting.SetupPacket.wValue.WB.L;
000038  485b              LDR      r0,|L38.424|
00003a  301c              ADDS     r0,r0,#0x1c
00003c  7880              LDRB     r0,[r0,#2]
00003e  495a              LDR      r1,|L38.424|
000040  3940              SUBS     r1,r1,#0x40
000042  7108              STRB     r0,[r1,#4]
;;;408    								g_USBCore_Setting.USB_NumInterfaces = ((USB_CONFIGURATION_DESCRIPTOR *)pD)->bNumInterfaces;
000044  7920              LDRB     r0,[r4,#4]
000046  7088              STRB     r0,[r1,#2]
;;;409    		
;;;410    								for(n = 0; n < USB_IF_NUM; n++)
000048  2600              MOVS     r6,#0
00004a  e004              B        |L38.86|
                  |L38.76|
;;;411    									g_USBCore_Setting.USB_AltSetting[n] = 0;
00004c  2100              MOVS     r1,#0
00004e  4856              LDR      r0,|L38.424|
000050  383b              SUBS     r0,r0,#0x3b
000052  5581              STRB     r1,[r0,r6]
000054  1c76              ADDS     r6,r6,#1              ;410
                  |L38.86|
000056  2e00              CMP      r6,#0                 ;410
000058  d0f8              BEQ      |L38.76|
;;;412    		
;;;413    								for(n = 1; n < USB_LOGIC_EP_NUM; n++)
00005a  2601              MOVS     r6,#1
00005c  e017              B        |L38.142|
                  |L38.94|
;;;414    								{
;;;415    									if(g_USBCore_Setting.USB_EndPointMask & (1 << n))
00005e  4852              LDR      r0,|L38.424|
000060  3840              SUBS     r0,r0,#0x40
000062  6c81              LDR      r1,[r0,#0x48]  ; g_USBCore_Setting
000064  2001              MOVS     r0,#1
000066  40b0              LSLS     r0,r0,r6
000068  4201              TST      r1,r0
00006a  d002              BEQ      |L38.114|
;;;416    										nsAPI_USB_DisableEP(n);
00006c  4630              MOV      r0,r6
00006e  f7fffffe          BL       nsAPI_USB_DisableEP
                  |L38.114|
;;;417    		
;;;418    									if(g_USBCore_Setting.USB_EndPointMask & ((1 << 16) << n))
000072  484d              LDR      r0,|L38.424|
000074  3840              SUBS     r0,r0,#0x40
000076  6c81              LDR      r1,[r0,#0x48]  ; g_USBCore_Setting
000078  2001              MOVS     r0,#1
00007a  0400              LSLS     r0,r0,#16
00007c  40b0              LSLS     r0,r0,r6
00007e  4201              TST      r1,r0
000080  d004              BEQ      |L38.140|
;;;419    										nsAPI_USB_DisableEP(n | 0x80);
000082  2180              MOVS     r1,#0x80
000084  4331              ORRS     r1,r1,r6
000086  4608              MOV      r0,r1
000088  f7fffffe          BL       nsAPI_USB_DisableEP
                  |L38.140|
00008c  1c76              ADDS     r6,r6,#1              ;413
                  |L38.142|
00008e  2e05              CMP      r6,#5                 ;413
000090  d3e5              BCC      |L38.94|
;;;420    								}
;;;421    		
;;;422    								g_USBCore_Setting.USB_EndPointMask = 0x00010001;
000092  4847              LDR      r0,|L38.432|
000094  4944              LDR      r1,|L38.424|
000096  3940              SUBS     r1,r1,#0x40
000098  6488              STR      r0,[r1,#0x48]  ; g_USBCore_Setting
;;;423    								g_USBCore_Setting.USB_EndPointHalt = 0x00000000;
00009a  2000              MOVS     r0,#0
00009c  64c8              STR      r0,[r1,#0x4c]  ; g_USBCore_Setting
;;;424    								g_USBCore_Setting.USB_EndPointStall = 0x00000000;
00009e  6508              STR      r0,[r1,#0x50]  ; g_USBCore_Setting
;;;425    								NDrv_USB_Configure(TRUE);
0000a0  2001              MOVS     r0,#1
0000a2  f7fffffe          BL       NDrv_USB_Configure
;;;426    		
;;;427    								if(((USB_CONFIGURATION_DESCRIPTOR *)pD)->bmAttributes & USB_CONFIG_POWERED_MASK)
0000a6  79e0              LDRB     r0,[r4,#7]
0000a8  2140              MOVS     r1,#0x40
0000aa  4208              TST      r0,r1
0000ac  d008              BEQ      |L38.192|
;;;428    									g_USBCore_Setting.USB_DeviceStatus |=  USB_GETSTATUS_SELF_POWERED;
0000ae  483e              LDR      r0,|L38.424|
0000b0  3840              SUBS     r0,r0,#0x40
0000b2  8800              LDRH     r0,[r0,#0]  ; g_USBCore_Setting
0000b4  2101              MOVS     r1,#1
0000b6  4308              ORRS     r0,r0,r1
0000b8  493b              LDR      r1,|L38.424|
0000ba  3940              SUBS     r1,r1,#0x40
0000bc  8008              STRH     r0,[r1,#0]
0000be  e00e              B        |L38.222|
                  |L38.192|
;;;429    								else
;;;430    									g_USBCore_Setting.USB_DeviceStatus &= ~USB_GETSTATUS_SELF_POWERED;
0000c0  4839              LDR      r0,|L38.424|
0000c2  3840              SUBS     r0,r0,#0x40
0000c4  8800              LDRH     r0,[r0,#0]  ; g_USBCore_Setting
0000c6  0840              LSRS     r0,r0,#1
0000c8  0040              LSLS     r0,r0,#1
0000ca  4937              LDR      r1,|L38.424|
0000cc  3940              SUBS     r1,r1,#0x40
0000ce  8008              STRH     r0,[r1,#0]
0000d0  e005              B        |L38.222|
                  |L38.210|
;;;431    							}
;;;432    							else
;;;433    							{
;;;434    								(U8 *)pD += ((USB_CONFIGURATION_DESCRIPTOR *)pD)->wTotalLength;
0000d2  78e0              LDRB     r0,[r4,#3]
0000d4  78a1              LDRB     r1,[r4,#2]
0000d6  0200              LSLS     r0,r0,#8
0000d8  4308              ORRS     r0,r0,r1
0000da  1904              ADDS     r4,r0,r4
;;;435    								continue;
0000dc  e027              B        |L38.302|
                  |L38.222|
;;;436    							}
;;;437    							break;
0000de  e022              B        |L38.294|
                  |L38.224|
;;;438    	
;;;439    						case USB_INTERFACE_DESCRIPTOR_TYPE:
;;;440    							alt = ((USB_INTERFACE_DESCRIPTOR *)pD)->bAlternateSetting;
0000e0  78e5              LDRB     r5,[r4,#3]
;;;441    							break;
0000e2  e020              B        |L38.294|
                  |L38.228|
;;;442    	
;;;443    						case USB_ENDPOINT_DESCRIPTOR_TYPE:
;;;444    							if(alt == 0)
0000e4  2d00              CMP      r5,#0
0000e6  d11d              BNE      |L38.292|
;;;445    							{
;;;446    								n = ((USB_ENDPOINT_DESCRIPTOR *)pD)->bEndpointAddress & 0x8F;
0000e8  78a0              LDRB     r0,[r4,#2]
0000ea  218f              MOVS     r1,#0x8f
0000ec  4008              ANDS     r0,r0,r1
0000ee  4606              MOV      r6,r0
;;;447    								m = (n & 0x80) ? ((1 << 16) << (n & 0x0F)) : (1 << n);
0000f0  2080              MOVS     r0,#0x80
0000f2  4206              TST      r6,r0
0000f4  d006              BEQ      |L38.260|
0000f6  0731              LSLS     r1,r6,#28
0000f8  0f09              LSRS     r1,r1,#28
0000fa  0240              LSLS     r0,r0,#9
0000fc  4088              LSLS     r0,r0,r1
0000fe  e003              B        |L38.264|
                  |L38.256|
000100  e04d              B        |L38.414|
                  |L38.258|
000102  e019              B        |L38.312|
                  |L38.260|
000104  2001              MOVS     r0,#1
000106  40b0              LSLS     r0,r0,r6
                  |L38.264|
000108  4607              MOV      r7,r0
;;;448    								g_USBCore_Setting.USB_EndPointMask |= m;
00010a  4827              LDR      r0,|L38.424|
00010c  3840              SUBS     r0,r0,#0x40
00010e  6c80              LDR      r0,[r0,#0x48]  ; g_USBCore_Setting
000110  4338              ORRS     r0,r0,r7
000112  4925              LDR      r1,|L38.424|
000114  3940              SUBS     r1,r1,#0x40
000116  6488              STR      r0,[r1,#0x48]  ; g_USBCore_Setting
;;;449    								nsAPI_USB_EnableEP(n);
000118  4630              MOV      r0,r6
00011a  f7fffffe          BL       nsAPI_USB_EnableEP
;;;450    								nsAPI_USB_ResetEP(n);
00011e  4630              MOV      r0,r6
000120  f7fffffe          BL       nsAPI_USB_ResetEP
                  |L38.292|
;;;451    							}
;;;452    							break;
000124  bf00              NOP      
                  |L38.294|
000126  bf00              NOP                            ;437
;;;453    					}
;;;454    	
;;;455    					(U8 *)pD += pD->bLength;
000128  7820              LDRB     r0,[r4,#0]
00012a  1904              ADDS     r4,r0,r4
00012c  bf00              NOP                            ;435
                  |L38.302|
00012e  7820              LDRB     r0,[r4,#0]            ;400
000130  2800              CMP      r0,#0                 ;400
000132  d000              BEQ      |L38.310|
000134  e772              B        |L38.28|
                  |L38.310|
000136  e028              B        |L38.394|
                  |L38.312|
;;;456    				}
;;;457    			}
;;;458    			else
;;;459    			{
;;;460    				g_USBCore_Setting.USB_Configuration = 0;
000138  2000              MOVS     r0,#0
00013a  491b              LDR      r1,|L38.424|
00013c  3940              SUBS     r1,r1,#0x40
00013e  7108              STRB     r0,[r1,#4]
;;;461    	
;;;462    				for(n = 1; n < USB_LOGIC_EP_NUM; n++)
000140  2601              MOVS     r6,#1
000142  e017              B        |L38.372|
                  |L38.324|
;;;463    				{
;;;464    					if(g_USBCore_Setting.USB_EndPointMask & (1 << n))
000144  4818              LDR      r0,|L38.424|
000146  3840              SUBS     r0,r0,#0x40
000148  6c81              LDR      r1,[r0,#0x48]  ; g_USBCore_Setting
00014a  2001              MOVS     r0,#1
00014c  40b0              LSLS     r0,r0,r6
00014e  4201              TST      r1,r0
000150  d002              BEQ      |L38.344|
;;;465    						nsAPI_USB_DisableEP(n);
000152  4630              MOV      r0,r6
000154  f7fffffe          BL       nsAPI_USB_DisableEP
                  |L38.344|
;;;466    	
;;;467    					if(g_USBCore_Setting.USB_EndPointMask & ((1 << 16) << n))
000158  4813              LDR      r0,|L38.424|
00015a  3840              SUBS     r0,r0,#0x40
00015c  6c81              LDR      r1,[r0,#0x48]  ; g_USBCore_Setting
00015e  2001              MOVS     r0,#1
000160  0400              LSLS     r0,r0,#16
000162  40b0              LSLS     r0,r0,r6
000164  4201              TST      r1,r0
000166  d004              BEQ      |L38.370|
;;;468    						nsAPI_USB_DisableEP(n | 0x80);
000168  2180              MOVS     r1,#0x80
00016a  4331              ORRS     r1,r1,r6
00016c  4608              MOV      r0,r1
00016e  f7fffffe          BL       nsAPI_USB_DisableEP
                  |L38.370|
000172  1c76              ADDS     r6,r6,#1              ;462
                  |L38.372|
000174  2e05              CMP      r6,#5                 ;462
000176  d3e5              BCC      |L38.324|
;;;469    				}
;;;470    	
;;;471    				g_USBCore_Setting.USB_EndPointMask = 0x00010001;
000178  480d              LDR      r0,|L38.432|
00017a  490b              LDR      r1,|L38.424|
00017c  3940              SUBS     r1,r1,#0x40
00017e  6488              STR      r0,[r1,#0x48]  ; g_USBCore_Setting
;;;472    				g_USBCore_Setting.USB_EndPointHalt = 0x00000000;
000180  2000              MOVS     r0,#0
000182  64c8              STR      r0,[r1,#0x4c]  ; g_USBCore_Setting
;;;473    				g_USBCore_Setting.USB_EndPointStall = 0x00000000;
000184  6508              STR      r0,[r1,#0x50]  ; g_USBCore_Setting
;;;474    				NDrv_USB_Configure(FALSE);
000186  f7fffffe          BL       NDrv_USB_Configure
                  |L38.394|
;;;475    			}
;;;476    	
;;;477    			if(g_USBCore_Setting.USB_Configuration != g_USBCore_Setting.SetupPacket.wValue.WB.L)
00018a  4807              LDR      r0,|L38.424|
00018c  3840              SUBS     r0,r0,#0x40
00018e  7901              LDRB     r1,[r0,#4]  ; g_USBCore_Setting
000190  305c              ADDS     r0,r0,#0x5c
000192  7880              LDRB     r0,[r0,#2]
000194  4281              CMP      r1,r0
000196  d001              BEQ      |L38.412|
;;;478    				return (FALSE);
000198  2000              MOVS     r0,#0
                  |L38.410|
;;;479    			break;
;;;480    					
;;;481    		default:
;;;482    			return (FALSE);
;;;483    	}
;;;484    
;;;485    	return (TRUE);
;;;486    }
00019a  bdf8              POP      {r3-r7,pc}
                  |L38.412|
00019c  e001              B        |L38.418|
                  |L38.414|
00019e  2000              MOVS     r0,#0                 ;482
0001a0  e7fb              B        |L38.410|
                  |L38.418|
0001a2  bf00              NOP                            ;479
0001a4  2001              MOVS     r0,#1                 ;485
0001a6  e7f8              B        |L38.410|
;;;487    
                          ENDP

                  |L38.424|
                          DCD      g_USBCore_Setting+0x40
                  |L38.428|
                          DCD      USB_ConfigDescriptor
                  |L38.432|
                          DCD      0x00010001

                          AREA ||i.nsAPI_USB_ReqSetInterface||, COMGROUP=nsAPI_USB_ReqSetInterface, CODE, READONLY, ALIGN=2

                  nsAPI_USB_ReqSetInterface PROC
;;;513    //----------------------------------------------------------------------------
;;;514    __inline Boolean nsAPI_USB_ReqSetInterface(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;515    {
000002  b085              SUB      sp,sp,#0x14
;;;516    	USB_COMMON_DESCRIPTOR *pD;
;;;517    	U32 ifn = 0, alt = 0, old = 0, msk = 0, n, m, set;
000004  2500              MOVS     r5,#0
000006  2600              MOVS     r6,#0
000008  2000              MOVS     r0,#0
00000a  9003              STR      r0,[sp,#0xc]
00000c  9002              STR      r0,[sp,#8]
;;;518    
;;;519    	switch(g_USBCore_Setting.SetupPacket.bmRequestType.BM.Recipient)
00000e  484a              LDR      r0,|L45.312|
000010  7f00              LDRB     r0,[r0,#0x1c]
000012  06c0              LSLS     r0,r0,#27
000014  0ec0              LSRS     r0,r0,#27
000016  2801              CMP      r0,#1
000018  d17e              BNE      |L45.280|
;;;520    	{
;;;521    		case REQUEST_TO_INTERFACE:
;;;522    			if(g_USBCore_Setting.USB_Configuration == 0)
00001a  4847              LDR      r0,|L45.312|
00001c  3840              SUBS     r0,r0,#0x40
00001e  7900              LDRB     r0,[r0,#4]  ; g_USBCore_Setting
000020  2800              CMP      r0,#0
000022  d101              BNE      |L45.40|
                  |L45.36|
;;;523    				return (FALSE);
;;;524    
;;;525    			set = FALSE;
;;;526    			pD = (USB_COMMON_DESCRIPTOR *)USB_ConfigDescriptor;
;;;527    
;;;528    			while(pD->bLength)
;;;529    			{
;;;530    				switch(pD->bDescriptorType)
;;;531    				{
;;;532    					case USB_CONFIGURATION_DESCRIPTOR_TYPE:
;;;533    						if(((USB_CONFIGURATION_DESCRIPTOR *)pD)->bConfigurationValue != g_USBCore_Setting.USB_Configuration)
;;;534    						{
;;;535    							(uint8_t *)pD += ((USB_CONFIGURATION_DESCRIPTOR *)pD)->wTotalLength;
;;;536    							continue;
;;;537    						}
;;;538    						break;
;;;539    
;;;540    					case USB_INTERFACE_DESCRIPTOR_TYPE:
;;;541    						ifn = ((USB_INTERFACE_DESCRIPTOR *)pD)->bInterfaceNumber;
;;;542    						alt = ((USB_INTERFACE_DESCRIPTOR *)pD)->bAlternateSetting;
;;;543    						msk = 0;
;;;544    						
;;;545    						if((ifn == g_USBCore_Setting.SetupPacket.wIndex.WB.L) && (alt == g_USBCore_Setting.SetupPacket.wValue.WB.L))
;;;546    						{
;;;547    							set = TRUE;
;;;548    							old = g_USBCore_Setting.USB_AltSetting[ifn];
;;;549    							g_USBCore_Setting.USB_AltSetting[ifn] = (U8)alt;
;;;550    						}
;;;551    						break;
;;;552    
;;;553    					case USB_ENDPOINT_DESCRIPTOR_TYPE:
;;;554    						if(ifn == g_USBCore_Setting.SetupPacket.wIndex.WB.L)
;;;555    						{
;;;556    							n = ((USB_ENDPOINT_DESCRIPTOR *)pD)->bEndpointAddress & 0x8F;
;;;557    							m = (n & 0x80) ? ((1 << 16) << (n & 0x0F)) : (1 << n);
;;;558    		
;;;559    							if(alt == g_USBCore_Setting.SetupPacket.wValue.WB.L)
;;;560    							{
;;;561    								g_USBCore_Setting.USB_EndPointMask |=  m;
;;;562    								g_USBCore_Setting.USB_EndPointHalt &= ~m;
;;;563    								nsAPI_USB_EnableEP(n);
;;;564    								nsAPI_USB_ResetEP(n);
;;;565    								msk |= m;
;;;566    							}
;;;567    							else if((alt == old) && ((msk & m) == 0))
;;;568    							{
;;;569    								g_USBCore_Setting.USB_EndPointMask &= ~m;
;;;570    								g_USBCore_Setting.USB_EndPointHalt &= ~m;
;;;571    								nsAPI_USB_DisableEP(n);
;;;572    							}
;;;573    						}
;;;574    						break;
;;;575    				}
;;;576    
;;;577    				(U8 *)pD += pD->bLength;
;;;578    			}
;;;579    			break;
;;;580    		
;;;581    		default:
;;;582    			return (FALSE);
;;;583    	}
;;;584    
;;;585    	return (set);
;;;586    }
000024  b005              ADD      sp,sp,#0x14
000026  bdf0              POP      {r4-r7,pc}
                  |L45.40|
000028  2000              MOVS     r0,#0                 ;525
00002a  9000              STR      r0,[sp,#0]            ;525
00002c  4c43              LDR      r4,|L45.316|
00002e  e079              B        |L45.292|
                  |L45.48|
000030  7860              LDRB     r0,[r4,#1]            ;530
000032  2802              CMP      r0,#2                 ;530
000034  d004              BEQ      |L45.64|
000036  2804              CMP      r0,#4                 ;530
000038  d00f              BEQ      |L45.90|
00003a  2805              CMP      r0,#5                 ;530
00003c  d16e              BNE      |L45.284|
00003e  e024              B        |L45.138|
                  |L45.64|
000040  7960              LDRB     r0,[r4,#5]            ;533
000042  493d              LDR      r1,|L45.312|
000044  3940              SUBS     r1,r1,#0x40           ;533
000046  7909              LDRB     r1,[r1,#4]            ;533  ; g_USBCore_Setting
000048  4288              CMP      r0,r1                 ;533
00004a  d005              BEQ      |L45.88|
00004c  78e0              LDRB     r0,[r4,#3]            ;535
00004e  78a1              LDRB     r1,[r4,#2]            ;535
000050  0200              LSLS     r0,r0,#8              ;535
000052  4308              ORRS     r0,r0,r1              ;535
000054  1904              ADDS     r4,r0,r4              ;535
000056  e065              B        |L45.292|
                  |L45.88|
000058  e060              B        |L45.284|
                  |L45.90|
00005a  78a5              LDRB     r5,[r4,#2]            ;541
00005c  78e6              LDRB     r6,[r4,#3]            ;542
00005e  2000              MOVS     r0,#0                 ;543
000060  9002              STR      r0,[sp,#8]            ;543
000062  4835              LDR      r0,|L45.312|
000064  301c              ADDS     r0,r0,#0x1c           ;545
000066  7900              LDRB     r0,[r0,#4]            ;545
000068  42a8              CMP      r0,r5                 ;545
00006a  d10d              BNE      |L45.136|
00006c  4832              LDR      r0,|L45.312|
00006e  301c              ADDS     r0,r0,#0x1c           ;545
000070  7880              LDRB     r0,[r0,#2]            ;545
000072  42b0              CMP      r0,r6                 ;545
000074  d108              BNE      |L45.136|
000076  2001              MOVS     r0,#1                 ;547
000078  9000              STR      r0,[sp,#0]            ;547
00007a  482f              LDR      r0,|L45.312|
00007c  383b              SUBS     r0,r0,#0x3b           ;548
00007e  5d40              LDRB     r0,[r0,r5]            ;548
000080  9003              STR      r0,[sp,#0xc]          ;548
000082  482d              LDR      r0,|L45.312|
000084  383b              SUBS     r0,r0,#0x3b           ;549
000086  5546              STRB     r6,[r0,r5]            ;549
                  |L45.136|
000088  e048              B        |L45.284|
                  |L45.138|
00008a  482b              LDR      r0,|L45.312|
00008c  301c              ADDS     r0,r0,#0x1c           ;554
00008e  7900              LDRB     r0,[r0,#4]            ;554
000090  42a8              CMP      r0,r5                 ;554
000092  d140              BNE      |L45.278|
000094  78a0              LDRB     r0,[r4,#2]            ;556
000096  218f              MOVS     r1,#0x8f              ;556
000098  4008              ANDS     r0,r0,r1              ;556
00009a  9001              STR      r0,[sp,#4]            ;556
00009c  2180              MOVS     r1,#0x80              ;557
00009e  9801              LDR      r0,[sp,#4]            ;557
0000a0  4208              TST      r0,r1                 ;557
0000a2  d006              BEQ      |L45.178|
0000a4  9801              LDR      r0,[sp,#4]            ;557
0000a6  0701              LSLS     r1,r0,#28             ;557
0000a8  0f09              LSRS     r1,r1,#28             ;557
0000aa  2001              MOVS     r0,#1                 ;557
0000ac  0400              LSLS     r0,r0,#16             ;557
0000ae  4088              LSLS     r0,r0,r1              ;557
0000b0  e002              B        |L45.184|
                  |L45.178|
0000b2  2001              MOVS     r0,#1                 ;557
0000b4  9901              LDR      r1,[sp,#4]            ;557
0000b6  4088              LSLS     r0,r0,r1              ;557
                  |L45.184|
0000b8  4607              MOV      r7,r0                 ;557
0000ba  481f              LDR      r0,|L45.312|
0000bc  301c              ADDS     r0,r0,#0x1c           ;559
0000be  7880              LDRB     r0,[r0,#2]            ;559
0000c0  42b0              CMP      r0,r6                 ;559
0000c2  d114              BNE      |L45.238|
0000c4  481c              LDR      r0,|L45.312|
0000c6  3840              SUBS     r0,r0,#0x40           ;561
0000c8  6c80              LDR      r0,[r0,#0x48]         ;561  ; g_USBCore_Setting
0000ca  4338              ORRS     r0,r0,r7              ;561
0000cc  491a              LDR      r1,|L45.312|
0000ce  3940              SUBS     r1,r1,#0x40           ;561
0000d0  6488              STR      r0,[r1,#0x48]         ;561  ; g_USBCore_Setting
0000d2  4608              MOV      r0,r1                 ;562
0000d4  6cc0              LDR      r0,[r0,#0x4c]         ;562  ; g_USBCore_Setting
0000d6  43b8              BICS     r0,r0,r7              ;562
0000d8  64c8              STR      r0,[r1,#0x4c]         ;562  ; g_USBCore_Setting
0000da  9801              LDR      r0,[sp,#4]            ;563
0000dc  f7fffffe          BL       nsAPI_USB_EnableEP
0000e0  9801              LDR      r0,[sp,#4]            ;564
0000e2  f7fffffe          BL       nsAPI_USB_ResetEP
0000e6  9802              LDR      r0,[sp,#8]            ;565
0000e8  4338              ORRS     r0,r0,r7              ;565
0000ea  9002              STR      r0,[sp,#8]            ;565
0000ec  e013              B        |L45.278|
                  |L45.238|
0000ee  9803              LDR      r0,[sp,#0xc]          ;567
0000f0  4286              CMP      r6,r0                 ;567
0000f2  d110              BNE      |L45.278|
0000f4  9802              LDR      r0,[sp,#8]            ;567
0000f6  4238              TST      r0,r7                 ;567
0000f8  d10d              BNE      |L45.278|
0000fa  480f              LDR      r0,|L45.312|
0000fc  3840              SUBS     r0,r0,#0x40           ;569
0000fe  6c80              LDR      r0,[r0,#0x48]         ;569  ; g_USBCore_Setting
000100  43b8              BICS     r0,r0,r7              ;569
000102  490d              LDR      r1,|L45.312|
000104  3940              SUBS     r1,r1,#0x40           ;569
000106  6488              STR      r0,[r1,#0x48]         ;569  ; g_USBCore_Setting
000108  4608              MOV      r0,r1                 ;570
00010a  6cc0              LDR      r0,[r0,#0x4c]         ;570  ; g_USBCore_Setting
00010c  43b8              BICS     r0,r0,r7              ;570
00010e  64c8              STR      r0,[r1,#0x4c]         ;570  ; g_USBCore_Setting
000110  9801              LDR      r0,[sp,#4]            ;571
000112  f7fffffe          BL       nsAPI_USB_DisableEP
                  |L45.278|
000116  e000              B        |L45.282|
                  |L45.280|
000118  e008              B        |L45.300|
                  |L45.282|
00011a  bf00              NOP                            ;574
                  |L45.284|
00011c  bf00              NOP                            ;538
00011e  7820              LDRB     r0,[r4,#0]            ;577
000120  1904              ADDS     r4,r0,r4              ;577
000122  bf00              NOP                            ;536
                  |L45.292|
000124  7820              LDRB     r0,[r4,#0]            ;528
000126  2800              CMP      r0,#0                 ;528
000128  d182              BNE      |L45.48|
00012a  e001              B        |L45.304|
                  |L45.300|
00012c  2000              MOVS     r0,#0                 ;582
00012e  e779              B        |L45.36|
                  |L45.304|
000130  bf00              NOP                            ;579
000132  9800              LDR      r0,[sp,#0]            ;585
000134  b2c0              UXTB     r0,r0                 ;585
000136  e775              B        |L45.36|
;;;587    
                          ENDP

                  |L45.312|
                          DCD      g_USBCore_Setting+0x40
                  |L45.316|
                          DCD      USB_ConfigDescriptor

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L52.16|
00000e  461d              MOV      r5,r3
                  |L52.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP


;*** Start embedded assembler ***

#line 1 "Src\\usbcore.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_usbcore_c_e77c2822____REV16|
#line 112 ".\\Inc\\core_cmInstr.h"
|__asm___9_usbcore_c_e77c2822____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_usbcore_c_e77c2822____REVSH|
#line 130
|__asm___9_usbcore_c_e77c2822____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
