; generated by ARM C/C++ Compiler, RVCT4.0 [Build 728]
; commandline ArmCC [--debug -c --asm --interleave -o.\Obj\pixart_sensor.o --depend=.\Obj\pixart_sensor.d --cpu=Cortex-M0 --apcs=interwork -O0 -I.\Inc -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\NXP\LPC11Uxx -D__MICROLIB -D__DEBUG_FLASH --omf_browse=.\Obj\pixart_sensor.crf Src\Pixart_Sensor.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  nsAPI_SSP_Delay1us PROC
;;;27     
;;;28     void nsAPI_SSP_Delay1us(U16 u16DelayTime)
000000  e007              B        |L1.18|
                  |L1.2|
;;;29     {
;;;30     	U8 i;
;;;31     	
;;;32     	while(u16DelayTime)
;;;33     	{
;;;34     		for (i = 3; i > 0; i--){};
000002  2103              MOVS     r1,#3
000004  e001              B        |L1.10|
                  |L1.6|
000006  1e4a              SUBS     r2,r1,#1
000008  b2d1              UXTB     r1,r2
                  |L1.10|
00000a  2900              CMP      r1,#0
00000c  dcfb              BGT      |L1.6|
;;;35     			u16DelayTime --;
00000e  1e42              SUBS     r2,r0,#1
000010  b290              UXTH     r0,r2
                  |L1.18|
000012  2800              CMP      r0,#0                 ;32
000014  d1f5              BNE      |L1.2|
;;;36     	}	
;;;37     }
000016  4770              BX       lr
;;;38     
                          ENDP

                  nsAPI_SSP_Sensor_Read PROC
;;;39     RetU8 nsAPI_SSP_Sensor_Read(U8 u8Adr)
000018  b501              PUSH     {r0,lr}
;;;40     {
;;;41       	__disable_irq();
00001a  b672              CPSID    i
;;;42     	
;;;43     	NCS_LOW();
00001c  2200              MOVS     r2,#0
00001e  2102              MOVS     r1,#2
000020  4610              MOV      r0,r2
000022  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;44     	nsAPI_SSP_Delay1us(TNCS_SCLK);
000026  2001              MOVS     r0,#1
000028  f7fffffe          BL       nsAPI_SSP_Delay1us
;;;45     	
;;;46     	nsAPI_SSP_Send(&u8Adr,1);	
00002c  2101              MOVS     r1,#1
00002e  4668              MOV      r0,sp
000030  f7fffffe          BL       nsAPI_SSP_Send
;;;47     	nsAPI_SSP_Delay1us(TSRAD);	// 170us
000034  20b4              MOVS     r0,#0xb4
000036  f7fffffe          BL       nsAPI_SSP_Delay1us
;;;48     	nsAPI_SSP_Receive(&u8Adr,1);	
00003a  2101              MOVS     r1,#1
00003c  4668              MOV      r0,sp
00003e  f7fffffe          BL       nsAPI_SSP_Receive
;;;49     	
;;;50     	nsAPI_SSP_Delay1us(TSCLK_NCS);	
000042  2001              MOVS     r0,#1
000044  f7fffffe          BL       nsAPI_SSP_Delay1us
;;;51     	NCS_HIGH();
000048  2201              MOVS     r2,#1
00004a  2102              MOVS     r1,#2
00004c  2000              MOVS     r0,#0
00004e  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;52     	nsAPI_SSP_Delay1us(TSRR);	// 20us
000052  2014              MOVS     r0,#0x14
000054  f7fffffe          BL       nsAPI_SSP_Delay1us
;;;53     
;;;54     	__enable_irq(); 
000058  b662              CPSIE    i
;;;55     
;;;56     	return u8Adr; 
00005a  466b              MOV      r3,sp
00005c  7818              LDRB     r0,[r3,#0]
;;;57     }
00005e  bd08              POP      {r3,pc}
;;;58     
                          ENDP

                  nsAPI_SSP_Sensor_Write PROC
;;;59     void nsAPI_SSP_Sensor_Write(U8 u8Adr,U8 u8Com)
000060  b513              PUSH     {r0,r1,r4,lr}
;;;60     {
;;;61         __disable_irq();
000062  b672              CPSID    i
;;;62     	
;;;63     	u8Adr = u8Adr|BIT7;
000064  466b              MOV      r3,sp
000066  7818              LDRB     r0,[r3,#0]
000068  2180              MOVS     r1,#0x80
00006a  4308              ORRS     r0,r0,r1
00006c  9000              STR      r0,[sp,#0]
;;;64     	NCS_LOW();
00006e  2200              MOVS     r2,#0
000070  2102              MOVS     r1,#2
000072  4610              MOV      r0,r2
000074  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;65     	nsAPI_SSP_Delay1us(5);  	// 5us
000078  2005              MOVS     r0,#5
00007a  f7fffffe          BL       nsAPI_SSP_Delay1us
;;;66     	nsAPI_SSP_Send(&u8Adr,1);	// Send Address
00007e  2101              MOVS     r1,#1
000080  4668              MOV      r0,sp
000082  f7fffffe          BL       nsAPI_SSP_Send
;;;67     	nsAPI_SSP_Delay1us(180);	// 180us
000086  20b4              MOVS     r0,#0xb4
000088  f7fffffe          BL       nsAPI_SSP_Delay1us
;;;68     
;;;69     	nsAPI_SSP_Send(&u8Com,1);	// Data	
00008c  2101              MOVS     r1,#1
00008e  a801              ADD      r0,sp,#4
000090  f7fffffe          BL       nsAPI_SSP_Send
;;;70     	nsAPI_SSP_Delay1us(35);				
000094  2023              MOVS     r0,#0x23
000096  f7fffffe          BL       nsAPI_SSP_Delay1us
;;;71     			
;;;72     	NCS_HIGH();
00009a  2201              MOVS     r2,#1
00009c  2102              MOVS     r1,#2
00009e  2000              MOVS     r0,#0
0000a0  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;73     
;;;74     	nsAPI_SSP_Delay1us(200);
0000a4  20c8              MOVS     r0,#0xc8
0000a6  f7fffffe          BL       nsAPI_SSP_Delay1us
;;;75     	
;;;76     	__enable_irq();
0000aa  b662              CPSIE    i
;;;77     }
0000ac  bd1c              POP      {r2-r4,pc}
;;;78     
                          ENDP

                  nsAPI_SSP_Sensor_LoadSROM PROC
;;;79     void nsAPI_SSP_Sensor_LoadSROM(void)
0000ae  b538              PUSH     {r3-r5,lr}
;;;80     {
;;;81          U8 u8SromTemp; 
;;;82          U16 sromCntr;      
;;;83     
;;;84     	nsAPI_SSP_Sensor_Write(CONFIG2_REG,0x00); 		// Disable rest mode	->Config2	
0000b0  2100              MOVS     r1,#0
0000b2  2010              MOVS     r0,#0x10
0000b4  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;85     	nsAPI_SSP_Sensor_Write(SROM_ENABLE_REG,0x1D);	// SROM Enable
0000b8  211d              MOVS     r1,#0x1d
0000ba  2013              MOVS     r0,#0x13
0000bc  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;86     		
;;;87     	for(sromCntr = 0; sromCntr < 10; sromCntr++)
0000c0  2400              MOVS     r4,#0
0000c2  e005              B        |L1.208|
                  |L1.196|
;;;88     		nsAPI_SSP_Delay1us(1000); // 1ms
0000c4  207d              MOVS     r0,#0x7d
0000c6  00c0              LSLS     r0,r0,#3
0000c8  f7fffffe          BL       nsAPI_SSP_Delay1us
0000cc  1c60              ADDS     r0,r4,#1              ;87
0000ce  b284              UXTH     r4,r0                 ;87
                  |L1.208|
0000d0  2c0a              CMP      r4,#0xa               ;87
0000d2  dbf7              BLT      |L1.196|
;;;89     
;;;90     	nsAPI_SSP_Sensor_Write(SROM_ENABLE_REG,0x18);
0000d4  2118              MOVS     r1,#0x18
0000d6  2013              MOVS     r0,#0x13
0000d8  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;91     	nsAPI_SSP_Delay1us(120);//120us	
0000dc  2078              MOVS     r0,#0x78
0000de  f7fffffe          BL       nsAPI_SSP_Delay1us
;;;92     	
;;;93     	NCS_LOW();
0000e2  2200              MOVS     r2,#0
0000e4  2102              MOVS     r1,#2
0000e6  4610              MOV      r0,r2
0000e8  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;94     
;;;95     	u8SromTemp = (SROM_LOAD_BURST_REG|0x80);
0000ec  20e2              MOVS     r0,#0xe2
0000ee  9000              STR      r0,[sp,#0]
;;;96     	nsAPI_SSP_Send(&u8SromTemp,1);
0000f0  2101              MOVS     r1,#1
0000f2  4668              MOV      r0,sp
0000f4  f7fffffe          BL       nsAPI_SSP_Send
;;;97     	nsAPI_SSP_Delay1us(140);//140us
0000f8  208c              MOVS     r0,#0x8c
0000fa  f7fffffe          BL       nsAPI_SSP_Delay1us
;;;98        	
;;;99     	for(sromCntr = 0; sromCntr < SROMSIZE; sromCntr++)
0000fe  2400              MOVS     r4,#0
000100  e00b              B        |L1.282|
                  |L1.258|
;;;100    	{	
;;;101    		u8SromTemp = SROM[sromCntr]; 
000102  48ff              LDR      r0,|L1.1280|
000104  5d00              LDRB     r0,[r0,r4]
000106  9000              STR      r0,[sp,#0]
;;;102    		nsAPI_SSP_Send(&u8SromTemp,1); 		
000108  2101              MOVS     r1,#1
00010a  4668              MOV      r0,sp
00010c  f7fffffe          BL       nsAPI_SSP_Send
;;;103    		nsAPI_SSP_Delay1us(30);//30us	
000110  201e              MOVS     r0,#0x1e
000112  f7fffffe          BL       nsAPI_SSP_Delay1us
000116  1c60              ADDS     r0,r4,#1              ;99
000118  b284              UXTH     r4,r0                 ;99
                  |L1.282|
00011a  48fa              LDR      r0,|L1.1284|
00011c  8800              LDRH     r0,[r0,#0]            ;99  ; sromTableSize
00011e  4284              CMP      r4,r0                 ;99
000120  dbef              BLT      |L1.258|
;;;104    	}	
;;;105    	NCS_HIGH();
000122  2201              MOVS     r2,#1
000124  2102              MOVS     r1,#2
000126  2000              MOVS     r0,#0
000128  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;106    	nsAPI_SSP_Delay1us(180);//180us
00012c  20b4              MOVS     r0,#0xb4
00012e  f7fffffe          BL       nsAPI_SSP_Delay1us
;;;107    }
000132  bd38              POP      {r3-r5,pc}
;;;108    
                          ENDP

                  nsAPI_Sensor_Hard_Reset PROC
;;;110    
;;;111    void nsAPI_Sensor_Hard_Reset(void)
000134  b510              PUSH     {r4,lr}
;;;112    {
;;;113    	U8 initCntr;
;;;114    
;;;115    	NDrv_GPIO_SetBitValue(PORT1,21,HIGH);	// Hard Reset
000136  2201              MOVS     r2,#1
000138  2115              MOVS     r1,#0x15
00013a  4610              MOV      r0,r2
00013c  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;116    	nsAPI_SSP_Delay1us(50);
000140  2032              MOVS     r0,#0x32
000142  f7fffffe          BL       nsAPI_SSP_Delay1us
;;;117    	NDrv_GPIO_SetBitValue(PORT1,21,LOW);
000146  2200              MOVS     r2,#0
000148  2115              MOVS     r1,#0x15
00014a  2001              MOVS     r0,#1
00014c  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;118    	nsAPI_SSP_Delay1us(50);
000150  2032              MOVS     r0,#0x32
000152  f7fffffe          BL       nsAPI_SSP_Delay1us
;;;119    	NDrv_GPIO_SetBitValue(PORT1,21,HIGH);
000156  2201              MOVS     r2,#1
000158  2115              MOVS     r1,#0x15
00015a  4610              MOV      r0,r2
00015c  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;120    
;;;121    	for(initCntr = 0; initCntr < 60; initCntr++)	// 60ms  
000160  2400              MOVS     r4,#0
000162  e005              B        |L1.368|
                  |L1.356|
;;;122    		nsAPI_SSP_Delay1us(1000);					// 1ms
000164  207d              MOVS     r0,#0x7d
000166  00c0              LSLS     r0,r0,#3
000168  f7fffffe          BL       nsAPI_SSP_Delay1us
00016c  1c60              ADDS     r0,r4,#1              ;121
00016e  b2c4              UXTB     r4,r0                 ;121
                  |L1.368|
000170  2c3c              CMP      r4,#0x3c              ;121
000172  dbf7              BLT      |L1.356|
;;;123    }
000174  bd10              POP      {r4,pc}
;;;124    
                          ENDP

                  nsAPI_Sensor_SROM_Load PROC
;;;125    void nsAPI_Sensor_SROM_Load (void)
000176  b510              PUSH     {r4,lr}
;;;126    {
;;;127    #ifndef RUN_ALL_SROM
;;;128    SROM_LOAD: 	 
;;;129    #endif
;;;130    
;;;131    	nsAPI_SSP_Sensor_LoadSROM();
000178  f7fffffe          BL       nsAPI_SSP_Sensor_LoadSROM
;;;132    
;;;133    	if(nsAPI_SSP_Sensor_Read(SROM_ID_REG) != SROM_ID_REG)
00017c  202a              MOVS     r0,#0x2a
00017e  f7fffffe          BL       nsAPI_SSP_Sensor_Read
;;;134    	{
;;;135    #ifndef RUN_ALL_SROM 
;;;136    		goto SROM_LOAD;
;;;137    #endif
;;;138    	}
;;;139    	nsAPI_SSP_Sensor_Write(0x50, 0x01);
000182  2101              MOVS     r1,#1
000184  2050              MOVS     r0,#0x50
000186  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;140    
;;;141    }
00018a  bd10              POP      {r4,pc}
;;;142    
                          ENDP

                  nsAPI_SSP_Sensor_Init PROC
;;;143    void nsAPI_SSP_Sensor_Init(void)
00018c  b570              PUSH     {r4-r6,lr}
;;;144    {	
;;;145    	U8 ctr = 0;
00018e  2400              MOVS     r4,#0
;;;146    	U8 u8InitTemp = 3;	// Default for the LED setting
000190  2503              MOVS     r5,#3
;;;147    	flagOne = ENABLE;
000192  2001              MOVS     r0,#1
000194  49dc              LDR      r1,|L1.1288|
000196  7008              STRB     r0,[r1,#0]
;;;148    	#define LED_INIT_SETUP	u8InitTemp
;;;149    	s16accuX.w = 0;		// Reset USB XY Accumulator
000198  2000              MOVS     r0,#0
00019a  49dc              LDR      r1,|L1.1292|
00019c  8008              STRH     r0,[r1,#0]
;;;150    	s16accuY.w = 0;
00019e  49dc              LDR      r1,|L1.1296|
0001a0  8008              STRH     r0,[r1,#0]
;;;151    	count_z = 0;
0001a2  49dc              LDR      r1,|L1.1300|
0001a4  7008              STRB     r0,[r1,#0]
;;;152    
;;;153    	NDrv_GPIO_SetBitValue(PORT0,11,HIGH);	// Sensor's LED2_P SW3 OPEN
0001a6  2201              MOVS     r2,#1
0001a8  210b              MOVS     r1,#0xb
0001aa  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;154    
;;;155    	TURN_ON_20R_SW1_LED(HIGH);	// 3rd highest light  default
0001ae  2201              MOVS     r2,#1
0001b0  210e              MOVS     r1,#0xe
0001b2  2000              MOVS     r0,#0
0001b4  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;156    	TURN_ON_39R_SW2_LED(LOW);
0001b8  2200              MOVS     r2,#0
0001ba  210d              MOVS     r1,#0xd
0001bc  4610              MOV      r0,r2
0001be  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;157    
;;;158    	// Default LED setting
;;;159    	NDrv_GPIO_SetBitValue(PORT0,20,(LED_INIT_SETUP & BIT2)^BIT2); // DLED 1  PORT 0 _20
0001c2  2004              MOVS     r0,#4
0001c4  4028              ANDS     r0,r0,r5
0001c6  2104              MOVS     r1,#4
0001c8  4048              EORS     r0,r0,r1
0001ca  4602              MOV      r2,r0
0001cc  2114              MOVS     r1,#0x14
0001ce  2000              MOVS     r0,#0
0001d0  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;160    	NDrv_GPIO_SetBitValue(PORT1,26,(LED_INIT_SETUP & BIT1)^BIT1); // DLED 2  Port 1 _26				
0001d4  2002              MOVS     r0,#2
0001d6  4028              ANDS     r0,r0,r5
0001d8  2102              MOVS     r1,#2
0001da  4048              EORS     r0,r0,r1
0001dc  4602              MOV      r2,r0
0001de  211a              MOVS     r1,#0x1a
0001e0  2001              MOVS     r0,#1
0001e2  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;161    	NDrv_GPIO_SetBitValue(PORT1,27,(LED_INIT_SETUP & BIT0)^BIT0); // DLED 3  Port 1 _27
0001e6  07e8              LSLS     r0,r5,#31
0001e8  0fc0              LSRS     r0,r0,#31
0001ea  2101              MOVS     r1,#1
0001ec  4048              EORS     r0,r0,r1
0001ee  4602              MOV      r2,r0
0001f0  211b              MOVS     r1,#0x1b
0001f2  2001              MOVS     r0,#1
0001f4  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;162    	
;;;163    	NDrv_GPIO_SetBitValue(PORT1,21,HIGH);	// Must default high prevent NRESET Trigger
0001f8  2201              MOVS     r2,#1
0001fa  2115              MOVS     r1,#0x15
0001fc  4610              MOV      r0,r2
0001fe  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;164    											// This effect the soft reset
;;;165    /*	for(ctr = 0; ctr< 10; ctr++)// 10ms  
;;;166    		nsAPI_SSP_Delay1us(1000);
;;;167    */	
;;;168    	NCS_HIGH();	
000202  2201              MOVS     r2,#1
000204  2102              MOVS     r1,#2
000206  2000              MOVS     r0,#0
000208  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;169    	nsAPI_SSP_Delay1us(1);
00020c  2001              MOVS     r0,#1
00020e  f7fffffe          BL       nsAPI_SSP_Delay1us
;;;170    	NCS_LOW();	
000212  2200              MOVS     r2,#0
000214  2102              MOVS     r1,#2
000216  4610              MOV      r0,r2
000218  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;171     
;;;172    #ifdef SOFT_RESET			
;;;173    	nsAPI_SSP_Sensor_Write(0x3A, 0x5A);		// Soft Reset
00021c  215a              MOVS     r1,#0x5a
00021e  203a              MOVS     r0,#0x3a
000220  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;174    	for(ctr = 0; ctr< 60; ctr++)			// 60ms  
000224  bf00              NOP      
000226  e005              B        |L1.564|
                  |L1.552|
;;;175    		nsAPI_SSP_Delay1us(1000);			// 1ms
000228  207d              MOVS     r0,#0x7d
00022a  00c0              LSLS     r0,r0,#3
00022c  f7fffffe          BL       nsAPI_SSP_Delay1us
000230  1c60              ADDS     r0,r4,#1              ;174
000232  b2c4              UXTB     r4,r0                 ;174
                  |L1.564|
000234  2c3c              CMP      r4,#0x3c              ;174
000236  dbf7              BLT      |L1.552|
;;;176    #else
;;;177    	nsAPI_Sensor_Hard_Reset();				// Hard Reset (default)
;;;178    #endif
;;;179     	
;;;180    	u8InitTemp = (nsAPI_SSP_Sensor_Read(MOTION_REG));		
000238  2002              MOVS     r0,#2
00023a  f7fffffe          BL       nsAPI_SSP_Sensor_Read
00023e  4605              MOV      r5,r0
;;;181    	u8InitTemp = (nsAPI_SSP_Sensor_Read(DELTA_X_L_REG));
000240  2003              MOVS     r0,#3
000242  f7fffffe          BL       nsAPI_SSP_Sensor_Read
000246  4605              MOV      r5,r0
;;;182    	u8InitTemp = (nsAPI_SSP_Sensor_Read(DELTA_X_H_REG));
000248  2004              MOVS     r0,#4
00024a  f7fffffe          BL       nsAPI_SSP_Sensor_Read
00024e  4605              MOV      r5,r0
;;;183    	u8InitTemp = (nsAPI_SSP_Sensor_Read(DELTA_Y_L_REG));
000250  2005              MOVS     r0,#5
000252  f7fffffe          BL       nsAPI_SSP_Sensor_Read
000256  4605              MOV      r5,r0
;;;184    	u8InitTemp = (nsAPI_SSP_Sensor_Read(DELTA_Y_H_REG));
000258  2006              MOVS     r0,#6
00025a  f7fffffe          BL       nsAPI_SSP_Sensor_Read
00025e  4605              MOV      r5,r0
;;;185    	
;;;186    	nsAPI_Sensor_SROM_Load();
000260  f7fffffe          BL       nsAPI_Sensor_SROM_Load
;;;187     
;;;188    //	nsAPI_SSP_Sensor_Write(0x3D,0x96);	   // before 20/09/2013 change as per DS.
;;;189    //	nsAPI_SSP_Sensor_Write(0x3D,0x16);
;;;190    //	nsAPI_SSP_Sensor_Write(0x3D,0x95);	   // 20/09/2013 change as per DS.
;;;191    //	nsAPI_SSP_Sensor_Write(0x3D,0x15);	   // 12/6/2014 build in SROM
;;;192    //	nsAPI_SSP_Sensor_Write(0x2C,0x18);	   // Surface tuning 3/9/2013 pkc requested
;;;193    //	nsAPI_SSP_Sensor_Write(0x10,0x00);	   // Force run turn off 12/6/2014 by request of joon chok for testing purpose
;;;194     	
;;;195    	g_Main_Setting.EPInOutReq &= ~EP1_IN;				// Reset EP1 flag
000264  48ac              LDR      r0,|L1.1304|
000266  7900              LDRB     r0,[r0,#4]
000268  0841              LSRS     r1,r0,#1
00026a  0049              LSLS     r1,r1,#1
00026c  48aa              LDR      r0,|L1.1304|
00026e  7101              STRB     r1,[r0,#4]
;;;196    	nsAPI_USB_WriteEP(	HID_EP1_IN,
000270  7942              LDRB     r2,[r0,#5]
000272  4601              MOV      r1,r0
000274  3920              SUBS     r1,r1,#0x20
000276  2081              MOVS     r0,#0x81
000278  f7fffffe          BL       nsAPI_USB_WriteEP
;;;197    						&g_Main_Setting.InReport[0],	// Dennis:
;;;198    						g_Main_Setting.InReportSize);	// This one is a must, else usb won't work
;;;199    
;;;200    }
00027c  bd70              POP      {r4-r6,pc}
;;;201    
                          ENDP

                  esd_Check PROC
;;;202    RetU8 esd_Check(void)
00027e  b510              PUSH     {r4,lr}
;;;203    {
;;;204    	U8 esdTemp = 0;
000280  2400              MOVS     r4,#0
;;;205    
;;;206    	esdTemp = nsAPI_SSP_Sensor_Read(0x24);
000282  2024              MOVS     r0,#0x24
000284  f7fffffe          BL       nsAPI_SSP_Sensor_Read
000288  4604              MOV      r4,r0
;;;207    	nsAPI_SSP_Delay1us(20);
00028a  2014              MOVS     r0,#0x14
00028c  f7fffffe          BL       nsAPI_SSP_Delay1us
;;;208    	nsAPI_SSP_Sensor_Write(0x50, 0x01);
000290  2101              MOVS     r1,#1
000292  2050              MOVS     r0,#0x50
000294  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;209    	nsAPI_SSP_Delay1us(180);
000298  20b4              MOVS     r0,#0xb4
00029a  f7fffffe          BL       nsAPI_SSP_Delay1us
;;;210    
;;;211    	if(!IS_BIT_SET( esdTemp,BIT6))
00029e  2040              MOVS     r0,#0x40
0002a0  4020              ANDS     r0,r0,r4
0002a2  2840              CMP      r0,#0x40
0002a4  d003              BEQ      |L1.686|
;;;212    	{
;;;213    		nsAPI_SSP_Sensor_Init();			// Re init Sensor
0002a6  f7fffffe          BL       nsAPI_SSP_Sensor_Init
;;;214    		return 1;
0002aa  2001              MOVS     r0,#1
                  |L1.684|
;;;215    	}
;;;216    	else
;;;217    		return 0;
;;;218    }
0002ac  bd10              POP      {r4,pc}
                  |L1.686|
0002ae  2000              MOVS     r0,#0                 ;217
0002b0  e7fc              B        |L1.684|
;;;219    
                          ENDP

                  nsAPI_SSP_Sensor_Monitor PROC
;;;220    void nsAPI_SSP_Sensor_Monitor(void)
0002b2  b500              PUSH     {lr}
;;;221    { 	
0002b4  b087              SUB      sp,sp,#0x1c
;;;222    	U8 u8temp[ARR_SIZE] = {0}; //burst
0002b6  a803              ADD      r0,sp,#0xc
0002b8  2100              MOVS     r1,#0
0002ba  460a              MOV      r2,r1
0002bc  460b              MOV      r3,r1
0002be  c00e              STM      r0!,{r1-r3}
0002c0  6001              STR      r1,[r0,#0]
;;;223    	U8 tempBurst = 0;
0002c2  2000              MOVS     r0,#0
0002c4  9002              STR      r0,[sp,#8]
;;;224    	s16 u16temp_x;
;;;225    	s16 u16temp_y;		
;;;226    	u16temp_x.w  = 0;
0002c6  9001              STR      r0,[sp,#4]
;;;227    	u16temp_y.w  = 0;
0002c8  9000              STR      r0,[sp,#0]
;;;228    			  			
;;;229    	if( IS_BIT_SET(mouse_event_ctrl,ENABLE_NON_BURST_MODE_BIT) )
0002ca  4894              LDR      r0,|L1.1308|
0002cc  7800              LDRB     r0,[r0,#0]  ; mouse_event_ctrl
0002ce  2108              MOVS     r1,#8
0002d0  4008              ANDS     r0,r0,r1
0002d2  2808              CMP      r0,#8
0002d4  d12b              BNE      |L1.814|
;;;230    	{
;;;231    		// Note: reading observation bit incorrectly will cause the motion erased.
;;;232    		// u8temp[1] =	((nsAPI_SSP_Sensor_Read(OBSERVATION_REG))&SROM_RUN_BIT);
;;;233    		
;;;234    		u8temp[0] = ((nsAPI_SSP_Sensor_Read(MOTION_REG))&MOTION_BIT);		
0002d6  2002              MOVS     r0,#2
0002d8  f7fffffe          BL       nsAPI_SSP_Sensor_Read
0002dc  2180              MOVS     r1,#0x80
0002de  4008              ANDS     r0,r0,r1
0002e0  466b              MOV      r3,sp
0002e2  7318              STRB     r0,[r3,#0xc]
;;;235    		
;;;236    		if(IS_BIT_SET(u8temp[0],MOTION_BIT))
0002e4  7b18              LDRB     r0,[r3,#0xc]
0002e6  4008              ANDS     r0,r0,r1
0002e8  2880              CMP      r0,#0x80
0002ea  d159              BNE      |L1.928|
;;;237    		{
;;;238    			u8temp[2]	= (nsAPI_SSP_Sensor_Read(DELTA_X_L_REG));
0002ec  2003              MOVS     r0,#3
0002ee  f7fffffe          BL       nsAPI_SSP_Sensor_Read
0002f2  466b              MOV      r3,sp
0002f4  7398              STRB     r0,[r3,#0xe]
;;;239    			nsAPI_SSP_Delay1us(10);
0002f6  200a              MOVS     r0,#0xa
0002f8  f7fffffe          BL       nsAPI_SSP_Delay1us
;;;240    			u8temp[3]   = (nsAPI_SSP_Sensor_Read(DELTA_X_H_REG));
0002fc  2004              MOVS     r0,#4
0002fe  f7fffffe          BL       nsAPI_SSP_Sensor_Read
000302  466b              MOV      r3,sp
000304  73d8              STRB     r0,[r3,#0xf]
;;;241    			nsAPI_SSP_Delay1us(10);
000306  200a              MOVS     r0,#0xa
000308  f7fffffe          BL       nsAPI_SSP_Delay1us
;;;242    			u8temp[4]	= (nsAPI_SSP_Sensor_Read(DELTA_Y_L_REG));
00030c  2005              MOVS     r0,#5
00030e  f7fffffe          BL       nsAPI_SSP_Sensor_Read
000312  466b              MOV      r3,sp
000314  7418              STRB     r0,[r3,#0x10]
;;;243    			nsAPI_SSP_Delay1us(10);
000316  200a              MOVS     r0,#0xa
000318  f7fffffe          BL       nsAPI_SSP_Delay1us
;;;244    			u8temp[5]	= (nsAPI_SSP_Sensor_Read(DELTA_Y_H_REG));
00031c  2006              MOVS     r0,#6
00031e  f7fffffe          BL       nsAPI_SSP_Sensor_Read
000322  466b              MOV      r3,sp
000324  7458              STRB     r0,[r3,#0x11]
;;;245    			nsAPI_SSP_Delay1us(10);
000326  200a              MOVS     r0,#0xa
000328  f7fffffe          BL       nsAPI_SSP_Delay1us
00032c  e038              B        |L1.928|
                  |L1.814|
;;;246    		}
;;;247    	}
;;;248    	else // burst mode
;;;249    	{
;;;250    		__disable_irq();
00032e  b672              CPSID    i
;;;251    		if(flagOne == 1)
000330  4875              LDR      r0,|L1.1288|
000332  7800              LDRB     r0,[r0,#0]  ; flagOne
000334  2801              CMP      r0,#1
000336  d106              BNE      |L1.838|
;;;252    		{
;;;253    			nsAPI_SSP_Sensor_Write(0x50, 0x01);
000338  2101              MOVS     r1,#1
00033a  2050              MOVS     r0,#0x50
00033c  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;254    			flagOne = 0;
000340  2000              MOVS     r0,#0
000342  4971              LDR      r1,|L1.1288|
000344  7008              STRB     r0,[r1,#0]
                  |L1.838|
;;;255    		}
;;;256    
;;;257    		NCS_LOW();
000346  2200              MOVS     r2,#0
000348  2102              MOVS     r1,#2
00034a  4610              MOV      r0,r2
00034c  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;258    		nsAPI_SSP_Delay1us(TNCS_SCLK);				
000350  2001              MOVS     r0,#1
000352  f7fffffe          BL       nsAPI_SSP_Delay1us
;;;259    		tempBurst = 0x50;
000356  2050              MOVS     r0,#0x50
000358  9002              STR      r0,[sp,#8]
;;;260    		nsAPI_SSP_Send(&tempBurst,1);
00035a  2101              MOVS     r1,#1
00035c  a802              ADD      r0,sp,#8
00035e  f7fffffe          BL       nsAPI_SSP_Send
;;;261    		nsAPI_SSP_Delay1us(TSRAD_MOTBR);
000362  2023              MOVS     r0,#0x23
000364  f7fffffe          BL       nsAPI_SSP_Delay1us
;;;262    
;;;263    		for(tempBurst = 0; tempBurst < ARR_SIZE; tempBurst++)
000368  2000              MOVS     r0,#0
00036a  9002              STR      r0,[sp,#8]
00036c  e00b              B        |L1.902|
                  |L1.878|
;;;264    			nsAPI_SSP_Receive( &u8temp[tempBurst],1);
00036e  a903              ADD      r1,sp,#0xc
000370  466b              MOV      r3,sp
000372  7a1a              LDRB     r2,[r3,#8]
000374  1888              ADDS     r0,r1,r2
000376  2101              MOVS     r1,#1
000378  f7fffffe          BL       nsAPI_SSP_Receive
00037c  466b              MOV      r3,sp                 ;263
00037e  7a18              LDRB     r0,[r3,#8]            ;263
000380  1c40              ADDS     r0,r0,#1              ;263
000382  b2c0              UXTB     r0,r0                 ;263
000384  9002              STR      r0,[sp,#8]            ;263
                  |L1.902|
000386  466b              MOV      r3,sp                 ;263
000388  7a18              LDRB     r0,[r3,#8]            ;263
00038a  2810              CMP      r0,#0x10              ;263
00038c  dbef              BLT      |L1.878|
;;;265    		
;;;266    		nsAPI_SSP_Delay1us(TSCLK_NCS);
00038e  2001              MOVS     r0,#1
000390  f7fffffe          BL       nsAPI_SSP_Delay1us
;;;267    		NCS_HIGH();
000394  2201              MOVS     r2,#1
000396  2102              MOVS     r1,#2
000398  2000              MOVS     r0,#0
00039a  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;268    		__enable_irq();
00039e  b662              CPSIE    i
                  |L1.928|
;;;269    	}
;;;270    	
;;;271    	if( IS_BIT_SET(u8temp[0],MOTION_BIT) ||
0003a0  466b              MOV      r3,sp
0003a2  7b18              LDRB     r0,[r3,#0xc]
0003a4  2180              MOVS     r1,#0x80
0003a6  4008              ANDS     r0,r0,r1
0003a8  2880              CMP      r0,#0x80
0003aa  d005              BEQ      |L1.952|
;;;272    		IS_BIT_SET(mouse_event_ctrl,ENABLE_ALWAYS_POLL_BIT))
0003ac  485b              LDR      r0,|L1.1308|
0003ae  7800              LDRB     r0,[r0,#0]  ; mouse_event_ctrl
0003b0  2104              MOVS     r1,#4
0003b2  4008              ANDS     r0,r0,r1
0003b4  2804              CMP      r0,#4
0003b6  d143              BNE      |L1.1088|
                  |L1.952|
;;;273    	{
;;;274    		__disable_irq();
0003b8  b672              CPSID    i
;;;275    		
;;;276    		if( !IS_BIT_SET(u8temp[0],LIFT_BIT) ||
0003ba  466b              MOV      r3,sp
0003bc  7b18              LDRB     r0,[r3,#0xc]
0003be  2108              MOVS     r1,#8
0003c0  4008              ANDS     r0,r0,r1
0003c2  2808              CMP      r0,#8
0003c4  d105              BNE      |L1.978|
;;;277    			IS_BIT_SET(mouse_event_ctrl,ENABLE_ALWAYS_POLL_BIT)) 
0003c6  4855              LDR      r0,|L1.1308|
0003c8  7800              LDRB     r0,[r0,#0]  ; mouse_event_ctrl
0003ca  2104              MOVS     r1,#4
0003cc  4008              ANDS     r0,r0,r1
0003ce  2804              CMP      r0,#4
0003d0  d135              BNE      |L1.1086|
                  |L1.978|
;;;278    		{
;;;279    		//	flag_no_cpi = 1;
;;;280    			u16temp_x.b[0] = u8temp[2];
0003d2  466b              MOV      r3,sp
0003d4  7b98              LDRB     r0,[r3,#0xe]
0003d6  b240              SXTB     r0,r0
0003d8  7118              STRB     r0,[r3,#4]
;;;281    			u16temp_x.b[1] = u8temp[3];
0003da  7bd8              LDRB     r0,[r3,#0xf]
0003dc  b240              SXTB     r0,r0
0003de  7158              STRB     r0,[r3,#5]
;;;282    			u16temp_y.b[0] = u8temp[4];
0003e0  7c18              LDRB     r0,[r3,#0x10]
0003e2  b240              SXTB     r0,r0
0003e4  7018              STRB     r0,[r3,#0]
;;;283    			u16temp_y.b[1] = u8temp[5];
0003e6  7c58              LDRB     r0,[r3,#0x11]
0003e8  b240              SXTB     r0,r0
0003ea  7058              STRB     r0,[r3,#1]
;;;284    #ifdef ENABLE_BURST_DAT_REPORT
;;;285    			u8motion		= u8temp[0];
0003ec  7b18              LDRB     r0,[r3,#0xc]
0003ee  494c              LDR      r1,|L1.1312|
0003f0  7008              STRB     r0,[r1,#0]
;;;286    			u8Squal			= u8temp[6];
0003f2  7c98              LDRB     r0,[r3,#0x12]
0003f4  494b              LDR      r1,|L1.1316|
0003f6  7008              STRB     r0,[r1,#0]
;;;287    			u8PixelSum		= u8temp[7];
0003f8  7cd8              LDRB     r0,[r3,#0x13]
0003fa  494b              LDR      r1,|L1.1320|
0003fc  7008              STRB     r0,[r1,#0]
;;;288    			u16Pixel.b[1]	= u8temp[8]; // Min_Pixel
0003fe  7d18              LDRB     r0,[r3,#0x14]
000400  494a              LDR      r1,|L1.1324|
000402  7048              STRB     r0,[r1,#1]
;;;289    			u16Pixel.b[0]	= u8temp[9]; // Max_Pixel
000404  7d58              LDRB     r0,[r3,#0x15]
000406  7008              STRB     r0,[r1,#0]
;;;290    			u16Shutter.b[1]	= u8temp[10];// shutter upper
000408  7d98              LDRB     r0,[r3,#0x16]
00040a  4949              LDR      r1,|L1.1328|
00040c  7048              STRB     r0,[r1,#1]
;;;291    			u16Shutter.b[0]	= u8temp[11];// shutter lower
00040e  7dd8              LDRB     r0,[r3,#0x17]
000410  7008              STRB     r0,[r1,#0]
;;;292    #endif
;;;293    			s16accuX.w += u16temp_x.w;
000412  483e              LDR      r0,|L1.1292|
000414  8800              LDRH     r0,[r0,#0]  ; s16accuX
000416  8899              LDRH     r1,[r3,#4]
000418  1840              ADDS     r0,r0,r1
00041a  b200              SXTH     r0,r0
00041c  493b              LDR      r1,|L1.1292|
00041e  8008              STRH     r0,[r1,#0]
;;;294    			s16accuY.w += u16temp_y.w;
000420  483b              LDR      r0,|L1.1296|
000422  8800              LDRH     r0,[r0,#0]  ; s16accuY
000424  8819              LDRH     r1,[r3,#0]
000426  1840              ADDS     r0,r0,r1
000428  b200              SXTH     r0,r0
00042a  4939              LDR      r1,|L1.1296|
00042c  8008              STRH     r0,[r1,#0]
;;;295    			g_Main_Setting.MouseEvent	   |= (MAIN_FLAG_MOUSE_EVENT|MAIN_FLAG_MOUSE_REPORT_READY);
00042e  483a              LDR      r0,|L1.1304|
000430  3820              SUBS     r0,r0,#0x20
000432  8cc0              LDRH     r0,[r0,#0x26]  ; g_Main_Setting
000434  2109              MOVS     r1,#9
000436  4308              ORRS     r0,r0,r1
000438  4937              LDR      r1,|L1.1304|
00043a  3920              SUBS     r1,r1,#0x20
00043c  84c8              STRH     r0,[r1,#0x26]
                  |L1.1086|
;;;296    		}
;;;297    		__enable_irq();
00043e  b662              CPSIE    i
                  |L1.1088|
;;;298    	}		
;;;299    }
000440  b007              ADD      sp,sp,#0x1c
000442  bd00              POP      {pc}
;;;300    
                          ENDP

                  nsAPI_MouseScanButton PROC
;;;301    RetU8 nsAPI_MouseScanButton(void)
000444  b57c              PUSH     {r2-r6,lr}
;;;302    {
;;;303    	static U8 cpiTemp	 = 3;
;;;304    //	static U8 cpi_p_Cntr = 0;
;;;305    //	static U8 cpi_m_Cntr = 0;
;;;306    	static U8 trigger_send_cpi_click = 0;
;;;307    
;;;308    	U8 Ret = FALSE;
000446  2400              MOVS     r4,#0
;;;309    	U32 buttonTemp0 = 0;
000448  2500              MOVS     r5,#0
;;;310    	U32 buttonTemp1 = 0;
00044a  2600              MOVS     r6,#0
;;;311    		
;;;312    	U8 cpi_data[8] = {	CPI_0, CPI_1, CPI_2, CPI_3,
00044c  a139              ADR      r1,|L1.1332|
00044e  c903              LDM      r1,{r0,r1}
000450  9101              STR      r1,[sp,#4]
000452  9000              STR      r0,[sp,#0]
;;;313    						CPI_4, CPI_5, CPI_6, CPI_7};
;;;314    
;;;315    
;;;316    	buttonTemp0 = nsAPI_GPIO_GetPinValue(PORT0,0xFF);
000454  21ff              MOVS     r1,#0xff
000456  2000              MOVS     r0,#0
000458  f7fffffe          BL       nsAPI_GPIO_GetPinValue
00045c  4605              MOV      r5,r0
;;;317    	buttonTemp1 = nsAPI_GPIO_GetPinValue(PORT1,0xFF);
00045e  21ff              MOVS     r1,#0xff
000460  2001              MOVS     r0,#1
000462  f7fffffe          BL       nsAPI_GPIO_GetPinValue
000466  4606              MOV      r6,r0
;;;318    
;;;319    	if( ( (buttonTemp0 & BUTTON_MASK_0) != BUTTON_MASK_0) || 
000468  2007              MOVS     r0,#7
00046a  0440              LSLS     r0,r0,#17
00046c  4028              ANDS     r0,r0,r5
00046e  2107              MOVS     r1,#7
000470  0449              LSLS     r1,r1,#17
000472  4288              CMP      r0,r1
000474  d106              BNE      |L1.1156|
;;;320    		( (buttonTemp1 & BUTTON_MASK_1) != BUTTON_MASK_1) )
000476  2003              MOVS     r0,#3
000478  03c0              LSLS     r0,r0,#15
00047a  4030              ANDS     r0,r0,r6
00047c  2103              MOVS     r1,#3
00047e  03c9              LSLS     r1,r1,#15
000480  4288              CMP      r0,r1
000482  d05d              BEQ      |L1.1344|
                  |L1.1156|
;;;321    	{
;;;322    		if(g_GpioButtonEvent.ButtonStatus != GPIO_SCANKEY_PR)
000484  482d              LDR      r0,|L1.1340|
000486  8800              LDRH     r0,[r0,#0]  ; g_GpioButtonEvent
000488  2801              CMP      r0,#1
00048a  d060              BEQ      |L1.1358|
;;;323    		{
;;;324    			if(!(buttonTemp1 & BUTTON_RIGHT))
00048c  2001              MOVS     r0,#1
00048e  03c0              LSLS     r0,r0,#15
000490  4206              TST      r6,r0
000492  d103              BNE      |L1.1180|
;;;325    			{
;;;326    				g_GpioButtonEvent.ButtonEvent = RIGHT_CLICKED;
000494  2002              MOVS     r0,#2
000496  4929              LDR      r1,|L1.1340|
000498  8048              STRH     r0,[r1,#2]
00049a  e02a              B        |L1.1266|
                  |L1.1180|
;;;327    			}
;;;328    			else if(!(buttonTemp0 & BUTTON_MID))
00049c  2001              MOVS     r0,#1
00049e  0440              LSLS     r0,r0,#17
0004a0  4205              TST      r5,r0
0004a2  d103              BNE      |L1.1196|
;;;329    			{
;;;330    				g_GpioButtonEvent.ButtonEvent = MID_CLICKED;
0004a4  2004              MOVS     r0,#4
0004a6  4925              LDR      r1,|L1.1340|
0004a8  8048              STRH     r0,[r1,#2]
0004aa  e022              B        |L1.1266|
                  |L1.1196|
;;;331    			}
;;;332    			else if(!(buttonTemp0 & BUTTON_LEFT))
0004ac  2001              MOVS     r0,#1
0004ae  0480              LSLS     r0,r0,#18
0004b0  4205              TST      r5,r0
0004b2  d103              BNE      |L1.1212|
;;;333    			{
;;;334    				g_GpioButtonEvent.ButtonEvent = LEFT_CLICKED;
0004b4  2001              MOVS     r0,#1
0004b6  4921              LDR      r1,|L1.1340|
0004b8  8048              STRH     r0,[r1,#2]
0004ba  e01a              B        |L1.1266|
                  |L1.1212|
;;;335    			}
;;;336    			else if(!(buttonTemp0 & BUTTON_CPI_P))
0004bc  2001              MOVS     r0,#1
0004be  04c0              LSLS     r0,r0,#19
0004c0  4205              TST      r5,r0
0004c2  d103              BNE      |L1.1228|
;;;337    			{
;;;338    				g_GpioButtonEvent.ButtonEvent = CPI_P_CLICKED;
0004c4  2008              MOVS     r0,#8
0004c6  491d              LDR      r1,|L1.1340|
0004c8  8048              STRH     r0,[r1,#2]
0004ca  e012              B        |L1.1266|
                  |L1.1228|
;;;339    			}
;;;340    			else if(!(buttonTemp1 & BUTTON_CPI_M))
0004cc  2001              MOVS     r0,#1
0004ce  0400              LSLS     r0,r0,#16
0004d0  4206              TST      r6,r0
0004d2  d103              BNE      |L1.1244|
;;;341    			{
;;;342    				g_GpioButtonEvent.ButtonEvent = CPI_M_CLICKED;
0004d4  2010              MOVS     r0,#0x10
0004d6  4919              LDR      r1,|L1.1340|
0004d8  8048              STRH     r0,[r1,#2]
0004da  e00a              B        |L1.1266|
                  |L1.1244|
;;;343    			}
;;;344    			else
;;;345    			{
;;;346    				g_GpioButtonEvent.ButtonEvent = 0;
0004dc  2000              MOVS     r0,#0
0004de  4917              LDR      r1,|L1.1340|
0004e0  8048              STRH     r0,[r1,#2]
;;;347    				g_Main_Setting.MouseEvent &= ~MAIN_FLAG_MOUSE_BUTTON_EVENT;
0004e2  480d              LDR      r0,|L1.1304|
0004e4  3820              SUBS     r0,r0,#0x20
0004e6  8cc0              LDRH     r0,[r0,#0x26]  ; g_Main_Setting
0004e8  2102              MOVS     r1,#2
0004ea  4388              BICS     r0,r0,r1
0004ec  490a              LDR      r1,|L1.1304|
0004ee  3920              SUBS     r1,r1,#0x20
0004f0  84c8              STRH     r0,[r1,#0x26]
                  |L1.1266|
;;;348    			}
;;;349    	
;;;350    			if(g_GpioButtonEvent.ButtonEvent > 0)
0004f2  4812              LDR      r0,|L1.1340|
0004f4  8840              LDRH     r0,[r0,#2]  ; g_GpioButtonEvent
0004f6  2800              CMP      r0,#0
0004f8  dd29              BLE      |L1.1358|
;;;351    			Ret = TRUE;
0004fa  2401              MOVS     r4,#1
0004fc  e027              B        |L1.1358|
0004fe  0000              DCW      0x0000
                  |L1.1280|
                          DCD      SROM
                  |L1.1284|
                          DCD      sromTableSize
                  |L1.1288|
                          DCD      flagOne
                  |L1.1292|
                          DCD      s16accuX
                  |L1.1296|
                          DCD      s16accuY
                  |L1.1300|
                          DCD      count_z
                  |L1.1304|
                          DCD      g_Main_Setting+0x20
                  |L1.1308|
                          DCD      mouse_event_ctrl
                  |L1.1312|
                          DCD      u8motion
                  |L1.1316|
                          DCD      u8Squal
                  |L1.1320|
                          DCD      u8PixelSum
                  |L1.1324|
                          DCD      u16Pixel
                  |L1.1328|
                          DCD      u16Shutter
                  |L1.1332|
000534  01131d31          DCB      1,19,29,"1;Ecw"
000538  3b456377
                  |L1.1340|
                          DCD      g_GpioButtonEvent
                  |L1.1344|
;;;352    		}
;;;353    	}
;;;354    	else
;;;355    	{
;;;356    		if(g_GpioButtonEvent.ButtonStatus == GPIO_SCANKEY_PR)
000540  488c              LDR      r0,|L1.1908|
000542  8800              LDRH     r0,[r0,#0]  ; g_GpioButtonEvent
000544  2801              CMP      r0,#1
000546  d102              BNE      |L1.1358|
;;;357    		{	
;;;358    			g_GpioButtonEvent.ButtonEvent = 0;
000548  2000              MOVS     r0,#0
00054a  498a              LDR      r1,|L1.1908|
00054c  8048              STRH     r0,[r1,#2]
                  |L1.1358|
;;;359    		}
;;;360    	}
;;;361    
;;;362    	//if((CHECK_MOTION_PIN() == HIGH) && (glitch_prevention == 0))  
;;;363    	if((glitch_prevention == 0))  
00054e  488a              LDR      r0,|L1.1912|
000550  8800              LDRH     r0,[r0,#0]  ; glitch_prevention
000552  2800              CMP      r0,#0
000554  d173              BNE      |L1.1598|
;;;364    	{
;;;365    	
;;;366    		if( ( g_GpioButtonEvent.ButtonEvent == CPI_P_CLICKED) || 
000556  4887              LDR      r0,|L1.1908|
000558  8840              LDRH     r0,[r0,#2]  ; g_GpioButtonEvent
00055a  2808              CMP      r0,#8
00055c  d003              BEQ      |L1.1382|
;;;367    			( g_GpioButtonEvent.ButtonEvent == CPI_M_CLICKED) )
00055e  4885              LDR      r0,|L1.1908|
000560  8840              LDRH     r0,[r0,#2]  ; g_GpioButtonEvent
000562  2810              CMP      r0,#0x10
000564  d162              BNE      |L1.1580|
                  |L1.1382|
;;;368    		{
;;;369    			if(trigger_send_cpi_click == 0) 
000566  4885              LDR      r0,|L1.1916|
000568  7800              LDRB     r0,[r0,#0]  ; trigger_send_cpi_click
00056a  2800              CMP      r0,#0
00056c  d167              BNE      |L1.1598|
;;;370    			{
;;;371    				cpi_clicked_flag = 1;
00056e  2001              MOVS     r0,#1
000570  4983              LDR      r1,|L1.1920|
000572  8008              STRH     r0,[r1,#0]
;;;372    
;;;373    				/*
;;;374    				if(g_GpioButtonEvent.ButtonEvent == CPI_P_CLICKED)
;;;375    					cpi_p_Cntr++;
;;;376    				else
;;;377    					cpi_m_Cntr++;
;;;378    				*/
;;;379    
;;;380    				if( (cpi_p_Cntr > CPI_CLICK_DURATION) || 
000574  4883              LDR      r0,|L1.1924|
000576  7800              LDRB     r0,[r0,#0]  ; cpi_p_Cntr
000578  28c8              CMP      r0,#0xc8
00057a  dc03              BGT      |L1.1412|
;;;381    					(cpi_m_Cntr > CPI_CLICK_DURATION) )
00057c  4882              LDR      r0,|L1.1928|
00057e  7800              LDRB     r0,[r0,#0]  ; cpi_m_Cntr
000580  28c8              CMP      r0,#0xc8
000582  dd5c              BLE      |L1.1598|
                  |L1.1412|
;;;382    				{
;;;383    					trigger_send_cpi_click = 1;
000584  2001              MOVS     r0,#1
000586  497d              LDR      r1,|L1.1916|
000588  7008              STRB     r0,[r1,#0]
;;;384    	
;;;385    					if(cpi_p_Cntr > CPI_CLICK_DURATION)
00058a  487e              LDR      r0,|L1.1924|
00058c  7800              LDRB     r0,[r0,#0]  ; cpi_p_Cntr
00058e  28c8              CMP      r0,#0xc8
000590  dd0e              BLE      |L1.1456|
;;;386    					{
;;;387    						cpi_p_Cntr = 0;	// send P to sensor
000592  2000              MOVS     r0,#0
000594  497b              LDR      r1,|L1.1924|
000596  7008              STRB     r0,[r1,#0]
;;;388    		
;;;389    						if(cpiTemp < 7)
000598  4878              LDR      r0,|L1.1916|
00059a  1e40              SUBS     r0,r0,#1
00059c  7800              LDRB     r0,[r0,#0]  ; cpiTemp
00059e  2807              CMP      r0,#7
0005a0  da06              BGE      |L1.1456|
;;;390    							cpiTemp = cpiTemp + 1;
0005a2  4876              LDR      r0,|L1.1916|
0005a4  1e40              SUBS     r0,r0,#1
0005a6  7800              LDRB     r0,[r0,#0]  ; cpiTemp
0005a8  1c40              ADDS     r0,r0,#1
0005aa  4974              LDR      r1,|L1.1916|
0005ac  1e49              SUBS     r1,r1,#1
0005ae  7008              STRB     r0,[r1,#0]
                  |L1.1456|
;;;391    					}
;;;392    					if(cpi_m_Cntr > CPI_CLICK_DURATION)
0005b0  4875              LDR      r0,|L1.1928|
0005b2  7800              LDRB     r0,[r0,#0]  ; cpi_m_Cntr
0005b4  28c8              CMP      r0,#0xc8
0005b6  dd0e              BLE      |L1.1494|
;;;393    					{
;;;394    						cpi_m_Cntr = 0;	// send M to sensor
0005b8  2000              MOVS     r0,#0
0005ba  4973              LDR      r1,|L1.1928|
0005bc  7008              STRB     r0,[r1,#0]
;;;395    		
;;;396    						if(cpiTemp > 0)
0005be  486f              LDR      r0,|L1.1916|
0005c0  1e40              SUBS     r0,r0,#1
0005c2  7800              LDRB     r0,[r0,#0]  ; cpiTemp
0005c4  2800              CMP      r0,#0
0005c6  dd06              BLE      |L1.1494|
;;;397    							cpiTemp = cpiTemp - 1;
0005c8  486c              LDR      r0,|L1.1916|
0005ca  1e40              SUBS     r0,r0,#1
0005cc  7800              LDRB     r0,[r0,#0]  ; cpiTemp
0005ce  1e40              SUBS     r0,r0,#1
0005d0  496a              LDR      r1,|L1.1916|
0005d2  1e49              SUBS     r1,r1,#1
0005d4  7008              STRB     r0,[r1,#0]
                  |L1.1494|
;;;398    					}
;;;399    					nsAPI_SSP_Sensor_Write(0x0F, cpi_data[cpiTemp] );
0005d6  4668              MOV      r0,sp
0005d8  4a68              LDR      r2,|L1.1916|
0005da  1e52              SUBS     r2,r2,#1
0005dc  7812              LDRB     r2,[r2,#0]  ; cpiTemp
0005de  5c81              LDRB     r1,[r0,r2]
0005e0  200f              MOVS     r0,#0xf
0005e2  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;400    					
;;;401    					// LED Setting				
;;;402    					NDrv_GPIO_SetBitValue(PORT0,20,(cpiTemp & BIT2)^BIT2); // DLED 1  PORT 0 _20
0005e6  4865              LDR      r0,|L1.1916|
0005e8  1e40              SUBS     r0,r0,#1
0005ea  7800              LDRB     r0,[r0,#0]  ; cpiTemp
0005ec  2104              MOVS     r1,#4
0005ee  4008              ANDS     r0,r0,r1
0005f0  4048              EORS     r0,r0,r1
0005f2  4602              MOV      r2,r0
0005f4  2114              MOVS     r1,#0x14
0005f6  2000              MOVS     r0,#0
0005f8  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;403    					NDrv_GPIO_SetBitValue(PORT1,26,(cpiTemp & BIT1)^BIT1); // DLED 2  Port 1 _26				
0005fc  485f              LDR      r0,|L1.1916|
0005fe  1e40              SUBS     r0,r0,#1
000600  7800              LDRB     r0,[r0,#0]  ; cpiTemp
000602  2102              MOVS     r1,#2
000604  4008              ANDS     r0,r0,r1
000606  4048              EORS     r0,r0,r1
000608  4602              MOV      r2,r0
00060a  211a              MOVS     r1,#0x1a
00060c  2001              MOVS     r0,#1
00060e  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;404    					NDrv_GPIO_SetBitValue(PORT1,27,(cpiTemp & BIT0)^BIT0); // DLED 3  Port 1 _27	
000612  485a              LDR      r0,|L1.1916|
000614  1e40              SUBS     r0,r0,#1
000616  7800              LDRB     r0,[r0,#0]  ; cpiTemp
000618  07c0              LSLS     r0,r0,#31
00061a  0fc0              LSRS     r0,r0,#31
00061c  2101              MOVS     r1,#1
00061e  4048              EORS     r0,r0,r1
000620  4602              MOV      r2,r0
000622  211b              MOVS     r1,#0x1b
000624  2001              MOVS     r0,#1
000626  f7fffffe          BL       NDrv_GPIO_SetBitValue
00062a  e008              B        |L1.1598|
                  |L1.1580|
;;;405    				}
;;;406    			}
;;;407    		}
;;;408    		else
;;;409    		{
;;;410    				trigger_send_cpi_click = 0;
00062c  2000              MOVS     r0,#0
00062e  4953              LDR      r1,|L1.1916|
000630  7008              STRB     r0,[r1,#0]
;;;411    				cpi_m_Cntr = 0;
000632  4955              LDR      r1,|L1.1928|
000634  7008              STRB     r0,[r1,#0]
;;;412    				cpi_p_Cntr = 0;
000636  4953              LDR      r1,|L1.1924|
000638  7008              STRB     r0,[r1,#0]
;;;413    				cpi_clicked_flag = 0;
00063a  4951              LDR      r1,|L1.1920|
00063c  8008              STRH     r0,[r1,#0]
                  |L1.1598|
;;;414    		}
;;;415    	}
;;;416    	return Ret;
00063e  4620              MOV      r0,r4
;;;417    }
000640  bd7c              POP      {r2-r6,pc}
;;;418    
                          ENDP

                  Z_Wheel PROC
;;;419    
;;;420    void Z_Wheel()
000642  b5f8              PUSH     {r3-r7,lr}
;;;421    {
;;;422    	#define SCROLL_TREND	3
;;;423    	#define SCROLL_SUBSIDY	1
;;;424    	#define Z_COUNT			1
;;;425    	static U8 ZA_PRE = 0;
;;;426    	static U8 ZB_PRE = 0;
;;;427    	//static S8 temp_z_ctr = 0;
;;;428    	static U8 temp_z_up_trend = 0;
;;;429    	static S8 temp_z_down_trend = 0;
;;;430    
;;;431    	U32 temp0 = 0;
000644  2400              MOVS     r4,#0
;;;432    	U32 temp1 = 0;
000646  2500              MOVS     r5,#0
;;;433    	U8 ZA_CUR = 0;
000648  2600              MOVS     r6,#0
;;;434    	U8 ZB_CUR = 0;
00064a  2700              MOVS     r7,#0
;;;435    
;;;436    	temp0 = nsAPI_GPIO_GetPinValue(PORT0,0xFF);
00064c  21ff              MOVS     r1,#0xff
00064e  2000              MOVS     r0,#0
000650  f7fffffe          BL       nsAPI_GPIO_GetPinValue
000654  4604              MOV      r4,r0
;;;437    	temp1 = nsAPI_GPIO_GetPinValue(PORT1,0xFF);
000656  21ff              MOVS     r1,#0xff
000658  2001              MOVS     r0,#1
00065a  f7fffffe          BL       nsAPI_GPIO_GetPinValue
00065e  4605              MOV      r5,r0
;;;438    
;;;439    	if(IS_BIT_SET(temp0,ZB_WHEEL))
000660  2080              MOVS     r0,#0x80
000662  4020              ANDS     r0,r0,r4
000664  2880              CMP      r0,#0x80
000666  d100              BNE      |L1.1642|
;;;440    		ZB_CUR = 1;
000668  2701              MOVS     r7,#1
                  |L1.1642|
;;;441    	
;;;442    	if(IS_BIT_SET(temp1,ZA_WHEEL))
00066a  2001              MOVS     r0,#1
00066c  0700              LSLS     r0,r0,#28
00066e  4028              ANDS     r0,r0,r5
000670  2101              MOVS     r1,#1
000672  0709              LSLS     r1,r1,#28
000674  4288              CMP      r0,r1
000676  d100              BNE      |L1.1658|
;;;443    		ZA_CUR = 1;
000678  2601              MOVS     r6,#1
                  |L1.1658|
;;;444    	
;;;445    
;;;446    	 if( (ZA_PRE == 1 && ZA_CUR == 1 && ZB_PRE == 1 && ZB_CUR == 0) ||
00067a  4840              LDR      r0,|L1.1916|
00067c  1c40              ADDS     r0,r0,#1
00067e  7800              LDRB     r0,[r0,#0]  ; ZA_PRE
000680  2801              CMP      r0,#1
000682  d108              BNE      |L1.1686|
000684  2e01              CMP      r6,#1
000686  d106              BNE      |L1.1686|
000688  483c              LDR      r0,|L1.1916|
00068a  1c80              ADDS     r0,r0,#2
00068c  7800              LDRB     r0,[r0,#0]  ; ZB_PRE
00068e  2801              CMP      r0,#1
000690  d101              BNE      |L1.1686|
000692  2f00              CMP      r7,#0
000694  d00d              BEQ      |L1.1714|
                  |L1.1686|
;;;447    	 	 (ZA_PRE == 0 && ZA_CUR == 1 && ZB_PRE == 1 && ZB_CUR == 1))
000696  4839              LDR      r0,|L1.1916|
000698  1c40              ADDS     r0,r0,#1
00069a  7800              LDRB     r0,[r0,#0]  ; ZA_PRE
00069c  2800              CMP      r0,#0
00069e  d110              BNE      |L1.1730|
0006a0  2e01              CMP      r6,#1
0006a2  d10e              BNE      |L1.1730|
0006a4  4835              LDR      r0,|L1.1916|
0006a6  1c80              ADDS     r0,r0,#2
0006a8  7800              LDRB     r0,[r0,#0]  ; ZB_PRE
0006aa  2801              CMP      r0,#1
0006ac  d109              BNE      |L1.1730|
0006ae  2f01              CMP      r7,#1
0006b0  d107              BNE      |L1.1730|
                  |L1.1714|
;;;448    	//if( (ZA_PRE == 1 && ZA_CUR == 1 && ZB_PRE == 0 && ZB_CUR == 1) || 
;;;449    	//	(ZA_PRE == 1 && ZA_CUR == 0 && ZB_PRE == 1 && ZB_CUR == 1)  )
;;;450    	{
;;;451    	//	temp_z_ctr++;
;;;452    		temp_z_up_trend++;
0006b2  4832              LDR      r0,|L1.1916|
0006b4  1cc0              ADDS     r0,r0,#3
0006b6  7800              LDRB     r0,[r0,#0]  ; temp_z_up_trend
0006b8  1c40              ADDS     r0,r0,#1
0006ba  4930              LDR      r1,|L1.1916|
0006bc  1cc9              ADDS     r1,r1,#3
0006be  7008              STRB     r0,[r1,#0]
0006c0  e023              B        |L1.1802|
                  |L1.1730|
;;;453    
;;;454    	//	if(abs(temp_z_down_trend))
;;;455    	//	temp_z_down_trend++;
;;;456    	}
;;;457    
;;;458    	else if((ZA_PRE == 1 && ZA_CUR == 1 && ZB_PRE == 0 && ZB_CUR == 1) ||
0006c2  482e              LDR      r0,|L1.1916|
0006c4  1c40              ADDS     r0,r0,#1
0006c6  7800              LDRB     r0,[r0,#0]  ; ZA_PRE
0006c8  2801              CMP      r0,#1
0006ca  d108              BNE      |L1.1758|
0006cc  2e01              CMP      r6,#1
0006ce  d106              BNE      |L1.1758|
0006d0  482a              LDR      r0,|L1.1916|
0006d2  1c80              ADDS     r0,r0,#2
0006d4  7800              LDRB     r0,[r0,#0]  ; ZB_PRE
0006d6  2800              CMP      r0,#0
0006d8  d101              BNE      |L1.1758|
0006da  2f01              CMP      r7,#1
0006dc  d00d              BEQ      |L1.1786|
                  |L1.1758|
;;;459    			(ZA_PRE == 1 && ZA_CUR == 0 && ZB_PRE == 1 && ZB_CUR == 1)) 
0006de  4827              LDR      r0,|L1.1916|
0006e0  1c40              ADDS     r0,r0,#1
0006e2  7800              LDRB     r0,[r0,#0]  ; ZA_PRE
0006e4  2801              CMP      r0,#1
0006e6  d110              BNE      |L1.1802|
0006e8  2e00              CMP      r6,#0
0006ea  d10e              BNE      |L1.1802|
0006ec  4823              LDR      r0,|L1.1916|
0006ee  1c80              ADDS     r0,r0,#2
0006f0  7800              LDRB     r0,[r0,#0]  ; ZB_PRE
0006f2  2801              CMP      r0,#1
0006f4  d109              BNE      |L1.1802|
0006f6  2f01              CMP      r7,#1
0006f8  d107              BNE      |L1.1802|
                  |L1.1786|
;;;460    //	else if( (ZA_PRE == 1 && ZA_CUR == 1 && ZB_PRE == 1 && ZB_CUR == 0)  || 
;;;461    //			 (ZA_PRE == 0 && ZA_CUR == 1 && ZB_PRE == 1 && ZB_CUR == 1) )
;;;462    	{
;;;463    	//	temp_z_ctr--;
;;;464    		temp_z_down_trend--;
0006fa  4820              LDR      r0,|L1.1916|
0006fc  1d00              ADDS     r0,r0,#4
0006fe  7800              LDRB     r0,[r0,#0]  ; temp_z_down_trend
000700  1e40              SUBS     r0,r0,#1
000702  b240              SXTB     r0,r0
000704  491d              LDR      r1,|L1.1916|
000706  1d09              ADDS     r1,r1,#4
000708  7008              STRB     r0,[r1,#0]
                  |L1.1802|
;;;465    
;;;466    	//	if(temp_z_up_trend)
;;;467    	//	temp_z_up_trend--;
;;;468    	}
;;;469     
;;;470    	ZA_PRE = ZA_CUR;
00070a  481c              LDR      r0,|L1.1916|
00070c  1c40              ADDS     r0,r0,#1
00070e  7006              STRB     r6,[r0,#0]
;;;471    	ZB_PRE = ZB_CUR;
000710  1c40              ADDS     r0,r0,#1
000712  7007              STRB     r7,[r0,#0]
;;;472    	
;;;473    	if( temp_z_up_trend >= SCROLL_TREND)
000714  1c40              ADDS     r0,r0,#1
000716  7800              LDRB     r0,[r0,#0]  ; temp_z_up_trend
000718  2803              CMP      r0,#3
00071a  db0f              BLT      |L1.1852|
;;;474    	{
;;;475    	   	count_z = Z_COUNT;
00071c  2001              MOVS     r0,#1
00071e  491b              LDR      r1,|L1.1932|
000720  7008              STRB     r0,[r1,#0]
;;;476    		temp_z_up_trend = SCROLL_SUBSIDY;
000722  4916              LDR      r1,|L1.1916|
000724  1cc9              ADDS     r1,r1,#3
000726  7008              STRB     r0,[r1,#0]
;;;477    		temp_z_down_trend = 0;
000728  2000              MOVS     r0,#0
00072a  1c49              ADDS     r1,r1,#1
00072c  7008              STRB     r0,[r1,#0]
;;;478    		g_Main_Setting.MouseEvent |= (MAIN_FLAG_MOUSE_EVENT|MAIN_FLAG_MOUSE_REPORT_READY);
00072e  4818              LDR      r0,|L1.1936|
000730  8cc0              LDRH     r0,[r0,#0x26]  ; g_Main_Setting
000732  2109              MOVS     r1,#9
000734  4308              ORRS     r0,r0,r1
000736  4916              LDR      r1,|L1.1936|
000738  84c8              STRH     r0,[r1,#0x26]
00073a  e01a              B        |L1.1906|
                  |L1.1852|
;;;479    	} 
;;;480    	else if (abs(temp_z_down_trend) >= SCROLL_TREND)
00073c  490f              LDR      r1,|L1.1916|
00073e  1d09              ADDS     r1,r1,#4
000740  2000              MOVS     r0,#0
000742  5608              LDRSB    r0,[r1,r0]  ; temp_z_down_trend
000744  2800              CMP      r0,#0
000746  db01              BLT      |L1.1868|
000748  4601              MOV      r1,r0
00074a  e000              B        |L1.1870|
                  |L1.1868|
00074c  4241              RSBS     r1,r0,#0
                  |L1.1870|
00074e  2903              CMP      r1,#3
000750  db0f              BLT      |L1.1906|
;;;481    	{
;;;482    		count_z = -Z_COUNT;
000752  20ff              MOVS     r0,#0xff
000754  490d              LDR      r1,|L1.1932|
000756  7008              STRB     r0,[r1,#0]
;;;483    		temp_z_up_trend = 0;
000758  2000              MOVS     r0,#0
00075a  4908              LDR      r1,|L1.1916|
00075c  1cc9              ADDS     r1,r1,#3
00075e  7008              STRB     r0,[r1,#0]
;;;484    		temp_z_down_trend = -SCROLL_SUBSIDY;
000760  20ff              MOVS     r0,#0xff
000762  1c49              ADDS     r1,r1,#1
000764  7008              STRB     r0,[r1,#0]
;;;485    		g_Main_Setting.MouseEvent |= (MAIN_FLAG_MOUSE_EVENT|MAIN_FLAG_MOUSE_REPORT_READY);
000766  480a              LDR      r0,|L1.1936|
000768  8cc0              LDRH     r0,[r0,#0x26]  ; g_Main_Setting
00076a  2109              MOVS     r1,#9
00076c  4308              ORRS     r0,r0,r1
00076e  4908              LDR      r1,|L1.1936|
000770  84c8              STRH     r0,[r1,#0x26]
                  |L1.1906|
;;;486    	}
;;;487    
;;;488    /* 		
;;;489    	if (abs(temp_z_ctr)>=3)
;;;490    	{
;;;491    		count_z = temp_z_ctr;
;;;492    		temp_z_ctr = 0;
;;;493    		g_Main_Setting.MouseEvent |= (MAIN_FLAG_MOUSE_EVENT|MAIN_FLAG_MOUSE_REPORT_READY);
;;;494    	}
;;;495     */  
;;;496    
;;;497    }
000772  bdf8              POP      {r3-r7,pc}
;;;498    
                          ENDP

                  |L1.1908|
                          DCD      g_GpioButtonEvent
                  |L1.1912|
                          DCD      glitch_prevention
                  |L1.1916|
                          DCD      ||.data||+0x1
                  |L1.1920|
                          DCD      cpi_clicked_flag
                  |L1.1924|
                          DCD      cpi_p_Cntr
                  |L1.1928|
                          DCD      cpi_m_Cntr
                  |L1.1932|
                          DCD      count_z
                  |L1.1936|
                          DCD      g_Main_Setting

                          AREA ||.data||, DATA, ALIGN=1

                  cpiTemp
000000  03                DCB      0x03
                  trigger_send_cpi_click
000001  00                DCB      0x00
                  ZA_PRE
000002  00                DCB      0x00
                  ZB_PRE
000003  00                DCB      0x00
                  temp_z_up_trend
000004  00                DCB      0x00
                  temp_z_down_trend
000005  00                DCB      0x00
                  flagOne
000006  00                DCB      0x00
                  u8motion
000007  00                DCB      0x00
                  u8Squal
000008  00                DCB      0x00
                  u8PixelSum
000009  00                DCB      0x00
                  s16accuX
00000a  0000              DCB      0x00,0x00
                  s16accuY
00000c  0000              DCB      0x00,0x00
                  u16Pixel
00000e  0000              DCB      0x00,0x00
                  u16Shutter
000010  0000              DCB      0x00,0x00
                  count_z
000012  00                DCB      0x00
                  cpi_p_Cntr
000013  00                DCB      0x00
                  cpi_m_Cntr
000014  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "Src\\Pixart_Sensor.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_Pixart_Sensor_c_d8e821f4____REV16|
#line 112 ".\\Inc\\core_cmInstr.h"
|__asm___15_Pixart_Sensor_c_d8e821f4____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_Pixart_Sensor_c_d8e821f4____REVSH|
#line 130
|__asm___15_Pixart_Sensor_c_d8e821f4____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
