; generated by ARM C/C++ Compiler, RVCT4.0 [Build 728]
; commandline ArmCC [--debug -c --asm --interleave -o.\Obj\main.o --depend=.\Obj\main.d --cpu=Cortex-M0 --apcs=interwork -O0 -I.\Inc -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\NXP\LPC11Uxx -D__MICROLIB -D__DEBUG_FLASH --omf_browse=.\Obj\main.crf Src\main.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  nsAPI_Main_GetInReport PROC
;;;32      */
;;;33     void nsAPI_Main_GetInReport(void)
000000  2000              MOVS     r0,#0
;;;34     {
;;;35       g_Main_Setting.InReport[0] = 0x00;
000002  4987              LDR      r1,|L1.544|
000004  7008              STRB     r0,[r1,#0]
;;;36     
;;;37     }
000006  4770              BX       lr
;;;38     
                          ENDP

                  nsAPI_Main_GetInMouseButtonReport PROC
;;;39     void nsAPI_Main_GetInMouseButtonReport(U16 *PreButtonEvent,U16 *u16ButtonStatus,U16 *KeycodeTblIdx)
000008  b510              PUSH     {r4,lr}
;;;40     {
;;;41     	switch(*u16ButtonStatus)
00000a  880b              LDRH     r3,[r1,#0]
00000c  2b01              CMP      r3,#1
00000e  d002              BEQ      |L1.22|
000010  2b04              CMP      r3,#4
000012  d00d              BEQ      |L1.48|
000014  e00b              B        |L1.46|
                  |L1.22|
;;;42     	{
;;;43     		case GPIO_SCANKEY_PR:
;;;44     		g_Main_Setting.InReport[GIdx0] = u8MouseKeyTable[*KeycodeTblIdx];
000016  8813              LDRH     r3,[r2,#0]
000018  4c82              LDR      r4,|L1.548|
00001a  5ce3              LDRB     r3,[r4,r3]
00001c  4c80              LDR      r4,|L1.544|
00001e  7023              STRB     r3,[r4,#0]
;;;45     		g_Main_Setting.MouseEvent|= MAIN_FLAG_MOUSE_REPORT_READY;
000020  4623              MOV      r3,r4
000022  8cdb              LDRH     r3,[r3,#0x26]  ; g_Main_Setting
000024  2401              MOVS     r4,#1
000026  4323              ORRS     r3,r3,r4
000028  4c7d              LDR      r4,|L1.544|
00002a  84e3              STRH     r3,[r4,#0x26]
;;;46     		break;
00002c  e00e              B        |L1.76|
                  |L1.46|
;;;47     
;;;48     		case GPIO_SCANKEY_RELEASE:
00002e  bf00              NOP      
                  |L1.48|
;;;49     		default:
;;;50     		*KeycodeTblIdx = 0;
000030  2300              MOVS     r3,#0
000032  8013              STRH     r3,[r2,#0]
;;;51     		g_Main_Setting.InReport[GIdx0] = u8MouseKeyTable[*KeycodeTblIdx];
000034  8813              LDRH     r3,[r2,#0]
000036  4c7b              LDR      r4,|L1.548|
000038  5ce3              LDRB     r3,[r4,r3]
00003a  4c79              LDR      r4,|L1.544|
00003c  7023              STRB     r3,[r4,#0]
;;;52     		g_Main_Setting.MouseEvent |= MAIN_FLAG_MOUSE_REPORT_READY;
00003e  4623              MOV      r3,r4
000040  8cdb              LDRH     r3,[r3,#0x26]  ; g_Main_Setting
000042  2401              MOVS     r4,#1
000044  4323              ORRS     r3,r3,r4
000046  4c76              LDR      r4,|L1.544|
000048  84e3              STRH     r3,[r4,#0x26]
;;;53     		break;
00004a  bf00              NOP      
                  |L1.76|
00004c  bf00              NOP                            ;46
;;;54     	}
;;;55     }
00004e  bd10              POP      {r4,pc}
;;;56     
                          ENDP

                  nsAPI_Main_GetInMouseQIEReport PROC
;;;57     
;;;58     void nsAPI_Main_GetInMouseQIEReport(S8 s8Temp)
000050  4a73              LDR      r2,|L1.544|
;;;59     {
;;;60     	g_Main_Setting.InReport[GIdx5] = s8Temp;
000052  7150              STRB     r0,[r2,#5]
;;;61     	g_Main_Setting.MouseEvent |= (MAIN_FLAG_MOUSE_QIE_EVENT|MAIN_FLAG_MOUSE_REPORT_READY);
000054  4611              MOV      r1,r2
000056  8cc9              LDRH     r1,[r1,#0x26]  ; g_Main_Setting
000058  2205              MOVS     r2,#5
00005a  4311              ORRS     r1,r1,r2
00005c  4a70              LDR      r2,|L1.544|
00005e  84d1              STRH     r1,[r2,#0x26]
;;;62     }
000060  4770              BX       lr
;;;63     
                          ENDP

                  SetOutReport PROC
;;;67      */
;;;68     void SetOutReport (void)
000062  4770              BX       lr
;;;69     {
;;;70     
;;;71     }
;;;72     
                          ENDP

                  Mapp_Main_Init PROC
;;;74     /* Main Program */
;;;75     void Mapp_Main_Init(void)
000064  b510              PUSH     {r4,lr}
;;;76     {
;;;77     	g_Main_Setting.MouseEvent = 0;
000066  2000              MOVS     r0,#0
000068  496d              LDR      r1,|L1.544|
00006a  84c8              STRH     r0,[r1,#0x26]
;;;78     	nsAPI_USB_EndPointClr();
00006c  f7fffffe          BL       nsAPI_USB_EndPointClr
;;;79     }
000070  bd10              POP      {r4,pc}
;;;80     
                          ENDP

                  nsAPI_Main_Clr_MouseEvent PROC
;;;179    
;;;180    void nsAPI_Main_Clr_MouseEvent(void)
000072  486b              LDR      r0,|L1.544|
;;;181    {
;;;182    	
;;;183    	if((g_Main_Setting.MouseEvent & MAIN_FLAG_MOUSE_QIE_EVENT) == MAIN_FLAG_MOUSE_QIE_EVENT)
000074  8cc0              LDRH     r0,[r0,#0x26]  ; g_Main_Setting
000076  2104              MOVS     r1,#4
000078  4008              ANDS     r0,r0,r1
00007a  2804              CMP      r0,#4
00007c  d104              BNE      |L1.136|
;;;184    	{
;;;185    		g_Main_Setting.MouseEvent &= ~MAIN_FLAG_MOUSE_QIE_EVENT;
00007e  4868              LDR      r0,|L1.544|
000080  8cc0              LDRH     r0,[r0,#0x26]  ; g_Main_Setting
000082  4388              BICS     r0,r0,r1
000084  4966              LDR      r1,|L1.544|
000086  84c8              STRH     r0,[r1,#0x26]
                  |L1.136|
;;;186    	}
;;;187    
;;;188    	if((g_Main_Setting.MouseEvent & MAIN_FLAG_MOUSE_EVENT) == MAIN_FLAG_MOUSE_EVENT)
000088  4865              LDR      r0,|L1.544|
00008a  8cc0              LDRH     r0,[r0,#0x26]  ; g_Main_Setting
00008c  2108              MOVS     r1,#8
00008e  4008              ANDS     r0,r0,r1
000090  2808              CMP      r0,#8
000092  d104              BNE      |L1.158|
;;;189    	{
;;;190    		g_Main_Setting.MouseEvent &= ~MAIN_FLAG_MOUSE_EVENT;
000094  4862              LDR      r0,|L1.544|
000096  8cc0              LDRH     r0,[r0,#0x26]  ; g_Main_Setting
000098  4388              BICS     r0,r0,r1
00009a  4961              LDR      r1,|L1.544|
00009c  84c8              STRH     r0,[r1,#0x26]
                  |L1.158|
;;;191    	}
;;;192    
;;;193    	g_Main_Setting.InReport[X_LOW]			= 0; 
00009e  2000              MOVS     r0,#0
0000a0  495f              LDR      r1,|L1.544|
0000a2  7048              STRB     r0,[r1,#1]
;;;194    	g_Main_Setting.InReport[X_HIGH] 		= 0; 
0000a4  7088              STRB     r0,[r1,#2]
;;;195    	g_Main_Setting.InReport[Y_LOW]			= 0;
0000a6  70c8              STRB     r0,[r1,#3]
;;;196    	g_Main_Setting.InReport[Y_HIGH]			= 0;
0000a8  7108              STRB     r0,[r1,#4]
;;;197    	g_Main_Setting.InReport[WHEEL]			= 0;
0000aa  7148              STRB     r0,[r1,#5]
;;;198    #ifdef	ENABLE_BURST_DAT_REPORT
;;;199    	g_Main_Setting.InReport[MOTION]			= 0;
0000ac  7188              STRB     r0,[r1,#6]
;;;200    	g_Main_Setting.InReport[SQUAL]			= 0;
0000ae  71c8              STRB     r0,[r1,#7]
;;;201    	g_Main_Setting.InReport[PIXEL_SUM]		= 0;
0000b0  7208              STRB     r0,[r1,#8]
;;;202    	g_Main_Setting.InReport[MAX_PIXEL]		= 0; 
0000b2  7248              STRB     r0,[r1,#9]
;;;203    	g_Main_Setting.InReport[MIN_PIXEL]		= 0; 
0000b4  7288              STRB     r0,[r1,#0xa]
;;;204    	g_Main_Setting.InReport[SHUTTER_UPPER]	= 0; 
0000b6  72c8              STRB     r0,[r1,#0xb]
;;;205    	g_Main_Setting.InReport[SHUTTER_LOWER]	= 0;
0000b8  7308              STRB     r0,[r1,#0xc]
;;;206    #endif
;;;207    
;;;208    }
0000ba  4770              BX       lr
                          ENDP

                  nsAPI_Main_MouseEventHandle PROC
;;;139    ****************************************************************/
;;;140    void nsAPI_Main_MouseEventHandle(void)
0000bc  b510              PUSH     {r4,lr}
;;;141    {
;;;142    	__disable_irq();
0000be  b672              CPSID    i
;;;143    
;;;144    	if(	((g_Main_Setting.MouseEvent & MAIN_FLAG_MOUSE_REPORT_READY) == MAIN_FLAG_MOUSE_REPORT_READY) &&
0000c0  4857              LDR      r0,|L1.544|
0000c2  8cc0              LDRH     r0,[r0,#0x26]  ; g_Main_Setting
0000c4  07c0              LSLS     r0,r0,#31
0000c6  0fc0              LSRS     r0,r0,#31
0000c8  2801              CMP      r0,#1
0000ca  d15b              BNE      |L1.388|
;;;145    		((g_Main_Setting.EPInOutReq & EP1_IN) == EP1_IN))
0000cc  4854              LDR      r0,|L1.544|
0000ce  3020              ADDS     r0,r0,#0x20
0000d0  7900              LDRB     r0,[r0,#4]
0000d2  07c0              LSLS     r0,r0,#31
0000d4  0fc0              LSRS     r0,r0,#31
0000d6  2801              CMP      r0,#1
0000d8  d154              BNE      |L1.388|
;;;146    	{								   
;;;147    		g_Main_Setting.InReportSize 			= (U8)EP1_MAX_SIZE;
0000da  2112              MOVS     r1,#0x12
0000dc  4850              LDR      r0,|L1.544|
0000de  3020              ADDS     r0,r0,#0x20
0000e0  7141              STRB     r1,[r0,#5]
;;;148    		g_Main_Setting.MouseEvent  	   		   &= ~MAIN_FLAG_MOUSE_REPORT_READY;
0000e2  3820              SUBS     r0,r0,#0x20
0000e4  8cc0              LDRH     r0,[r0,#0x26]  ; g_Main_Setting
0000e6  0840              LSRS     r0,r0,#1
0000e8  0040              LSLS     r0,r0,#1
0000ea  494d              LDR      r1,|L1.544|
0000ec  84c8              STRH     r0,[r1,#0x26]
;;;149    		g_Main_Setting.InReport[X_LOW]			= s16accuX.b[0];
0000ee  484e              LDR      r0,|L1.552|
0000f0  7800              LDRB     r0,[r0,#0]  ; s16accuX
0000f2  7048              STRB     r0,[r1,#1]
;;;150    		g_Main_Setting.InReport[X_HIGH] 		= s16accuX.b[1];
0000f4  484c              LDR      r0,|L1.552|
0000f6  7840              LDRB     r0,[r0,#1]  ; s16accuX
0000f8  7088              STRB     r0,[r1,#2]
;;;151    		g_Main_Setting.InReport[Y_LOW]			= s16accuY.b[0];
0000fa  484c              LDR      r0,|L1.556|
0000fc  7800              LDRB     r0,[r0,#0]  ; s16accuY
0000fe  70c8              STRB     r0,[r1,#3]
;;;152    		g_Main_Setting.InReport[Y_HIGH]			= s16accuY.b[1];
000100  484a              LDR      r0,|L1.556|
000102  7840              LDRB     r0,[r0,#1]  ; s16accuY
000104  7108              STRB     r0,[r1,#4]
;;;153    		g_Main_Setting.InReport[WHEEL]			= count_z;
000106  484a              LDR      r0,|L1.560|
000108  7800              LDRB     r0,[r0,#0]  ; count_z
00010a  7148              STRB     r0,[r1,#5]
;;;154    #ifdef	ENABLE_BURST_DAT_REPORT
;;;155    		g_Main_Setting.InReport[MOTION]			= u8motion;
00010c  4849              LDR      r0,|L1.564|
00010e  7800              LDRB     r0,[r0,#0]  ; u8motion
000110  7188              STRB     r0,[r1,#6]
;;;156    		g_Main_Setting.InReport[SQUAL]			= u8Squal;
000112  4849              LDR      r0,|L1.568|
000114  7800              LDRB     r0,[r0,#0]  ; u8Squal
000116  71c8              STRB     r0,[r1,#7]
;;;157    		g_Main_Setting.InReport[PIXEL_SUM]		= u8PixelSum;
000118  4848              LDR      r0,|L1.572|
00011a  7800              LDRB     r0,[r0,#0]  ; u8PixelSum
00011c  7208              STRB     r0,[r1,#8]
;;;158    		g_Main_Setting.InReport[MAX_PIXEL]		= u16Pixel.b[1]; 
00011e  4848              LDR      r0,|L1.576|
000120  7840              LDRB     r0,[r0,#1]  ; u16Pixel
000122  7248              STRB     r0,[r1,#9]
;;;159    		g_Main_Setting.InReport[MIN_PIXEL]		= u16Pixel.b[0]; 
000124  4846              LDR      r0,|L1.576|
000126  7800              LDRB     r0,[r0,#0]  ; u16Pixel
000128  7288              STRB     r0,[r1,#0xa]
;;;160    		g_Main_Setting.InReport[SHUTTER_UPPER]	= u16Shutter.b[1];
00012a  4846              LDR      r0,|L1.580|
00012c  7840              LDRB     r0,[r0,#1]  ; u16Shutter
00012e  72c8              STRB     r0,[r1,#0xb]
;;;161    		g_Main_Setting.InReport[SHUTTER_LOWER]	= u16Shutter.b[0];
000130  4844              LDR      r0,|L1.580|
000132  7800              LDRB     r0,[r0,#0]  ; u16Shutter
000134  7308              STRB     r0,[r1,#0xc]
;;;162    #endif
;;;163    		nsAPI_USB_WriteEP(HID_EP1_IN,&g_Main_Setting.InReport[0],g_Main_Setting.InReportSize);
000136  4608              MOV      r0,r1
000138  3020              ADDS     r0,r0,#0x20
00013a  7942              LDRB     r2,[r0,#5]
00013c  2081              MOVS     r0,#0x81
00013e  f7fffffe          BL       nsAPI_USB_WriteEP
;;;164    		nsAPI_Main_Clr_MouseEvent();
000142  f7fffffe          BL       nsAPI_Main_Clr_MouseEvent
;;;165    		s16accuX.w = 0;
000146  2000              MOVS     r0,#0
000148  4937              LDR      r1,|L1.552|
00014a  8008              STRH     r0,[r1,#0]
;;;166    		s16accuY.w = 0;
00014c  4937              LDR      r1,|L1.556|
00014e  8008              STRH     r0,[r1,#0]
;;;167    		count_z = 0;
000150  4937              LDR      r1,|L1.560|
000152  7008              STRB     r0,[r1,#0]
;;;168    		u8motion = 0;
000154  4937              LDR      r1,|L1.564|
000156  7008              STRB     r0,[r1,#0]
;;;169    		u8Squal = 0;
000158  4937              LDR      r1,|L1.568|
00015a  7008              STRB     r0,[r1,#0]
;;;170    		u8PixelSum = 0;
00015c  4937              LDR      r1,|L1.572|
00015e  7008              STRB     r0,[r1,#0]
;;;171    		u16Pixel.w = 0;	
000160  4937              LDR      r1,|L1.576|
000162  8008              STRH     r0,[r1,#0]
;;;172    		u16Shutter.w = 0;
000164  4937              LDR      r1,|L1.580|
000166  8008              STRH     r0,[r1,#0]
;;;173    		g_Main_Setting.MouseEvent &= ~MAIN_FLAG_MOUSE_EVENT;
000168  482d              LDR      r0,|L1.544|
00016a  8cc0              LDRH     r0,[r0,#0x26]  ; g_Main_Setting
00016c  2108              MOVS     r1,#8
00016e  4388              BICS     r0,r0,r1
000170  492b              LDR      r1,|L1.544|
000172  84c8              STRH     r0,[r1,#0x26]
;;;174    		g_Main_Setting.EPInOutReq &= ~EP1_IN;
000174  4608              MOV      r0,r1
000176  3020              ADDS     r0,r0,#0x20
000178  7900              LDRB     r0,[r0,#4]
00017a  0841              LSRS     r1,r0,#1
00017c  0049              LSLS     r1,r1,#1
00017e  4828              LDR      r0,|L1.544|
000180  3020              ADDS     r0,r0,#0x20
000182  7101              STRB     r1,[r0,#4]
                  |L1.388|
;;;175    	}
;;;176    	__enable_irq();
000184  b662              CPSIE    i
;;;177    }
000186  bd10              POP      {r4,pc}
;;;178    
                          ENDP

                  main PROC
;;;80     
;;;81     int main (void)
000188  b510              PUSH     {r4,lr}
;;;82     {
;;;83     	//It's very important that POWERDOWN_MODE_USB_WAKEUP and REMOTE_WAKEUP_ENABLE
;;;84     	//flags should not be turned on at the same time!!!!!! 
;;;85     
;;;86     	cpi_clicked_flag = 0; // added 15/10/2014
00018a  2000              MOVS     r0,#0
00018c  492e              LDR      r1,|L1.584|
00018e  8008              STRH     r0,[r1,#0]
;;;87     	cpi_p_Cntr = 0;		  // added 15/10/2014
000190  492e              LDR      r1,|L1.588|
000192  7008              STRB     r0,[r1,#0]
;;;88     	cpi_m_Cntr = 0;		  // added 15/10/2014
000194  492e              LDR      r1,|L1.592|
000196  7008              STRB     r0,[r1,#0]
;;;89     
;;;90     	mouse_event_ctrl = (ENABLE_MOTION_BIT|ENABLE_BUTTON_SCROLL_BIT);
000198  2003              MOVS     r0,#3
00019a  492e              LDR      r1,|L1.596|
00019c  7008              STRB     r0,[r1,#0]
;;;91     	//mouse_event_ctrl = ENABLE_MOTION_BIT; // for joon chok test purpose
;;;92     	nsAPI_System_Init();
00019e  f7fffffe          BL       nsAPI_System_Init
;;;93     	nsAPI_SSP_Sensor_Init();
0001a2  f7fffffe          BL       nsAPI_SSP_Sensor_Init
;;;94     	Mapp_Main_Init();
0001a6  f7fffffe          BL       Mapp_Main_Init
;;;95     
;;;96         while(1)
0001aa  e037              B        |L1.540|
                  |L1.428|
;;;97         {
;;;98     		if( IS_BIT_SET(mouse_event_ctrl,ENABLE_BUTTON_SCROLL_BIT) ) 
0001ac  4829              LDR      r0,|L1.596|
0001ae  7800              LDRB     r0,[r0,#0]  ; mouse_event_ctrl
0001b0  2102              MOVS     r1,#2
0001b2  4008              ANDS     r0,r0,r1
0001b4  2802              CMP      r0,#2
0001b6  d111              BNE      |L1.476|
;;;99     		{
;;;100    			if(poll_tick_btn >= POLL_RATE_BTN)
0001b8  4827              LDR      r0,|L1.600|
0001ba  8800              LDRH     r0,[r0,#0]  ; poll_tick_btn
0001bc  280a              CMP      r0,#0xa
0001be  db04              BLT      |L1.458|
;;;101    			{
;;;102    				poll_tick_btn = 0;
0001c0  2000              MOVS     r0,#0
0001c2  4925              LDR      r1,|L1.600|
0001c4  8008              STRH     r0,[r1,#0]
;;;103    				nsAPI_GPIO_MouseButtonMonitor();
0001c6  f7fffffe          BL       nsAPI_GPIO_MouseButtonMonitor
                  |L1.458|
;;;104    			}
;;;105    
;;;106    			if(poll_z_wheel >= POLL_Z_WHEEL) 
0001ca  4824              LDR      r0,|L1.604|
0001cc  8800              LDRH     r0,[r0,#0]  ; poll_z_wheel
0001ce  2805              CMP      r0,#5
0001d0  db04              BLT      |L1.476|
;;;107    			{
;;;108    				poll_z_wheel = 0;
0001d2  2000              MOVS     r0,#0
0001d4  4921              LDR      r1,|L1.604|
0001d6  8008              STRH     r0,[r1,#0]
;;;109    				Z_Wheel();
0001d8  f7fffffe          BL       Z_Wheel
                  |L1.476|
;;;110    			}
;;;111    		}
;;;112    
;;;113    		if( IS_BIT_SET(mouse_event_ctrl,ENABLE_MOTION_BIT) )
0001dc  481d              LDR      r0,|L1.596|
0001de  7800              LDRB     r0,[r0,#0]  ; mouse_event_ctrl
0001e0  07c0              LSLS     r0,r0,#31
0001e2  0fc0              LSRS     r0,r0,#31
0001e4  2801              CMP      r0,#1
0001e6  d110              BNE      |L1.522|
;;;114    		{
;;;115    			if ( ( IS_BIT_SET(mouse_event_ctrl,ENABLE_ALWAYS_POLL_BIT) ) ||
0001e8  481a              LDR      r0,|L1.596|
0001ea  7800              LDRB     r0,[r0,#0]  ; mouse_event_ctrl
0001ec  2104              MOVS     r1,#4
0001ee  4008              ANDS     r0,r0,r1
0001f0  2804              CMP      r0,#4
0001f2  d005              BEQ      |L1.512|
;;;116    				 ( CHECK_MOTION_PIN() == LOW) )
0001f4  0749              LSLS     r1,r1,#29
0001f6  2001              MOVS     r0,#1
0001f8  f7fffffe          BL       nsAPI_GPIO_GetPinValue
0001fc  2800              CMP      r0,#0
0001fe  d104              BNE      |L1.522|
                  |L1.512|
;;;117    			{
;;;118    				glitch_prevention = 10;
000200  200a              MOVS     r0,#0xa
000202  4917              LDR      r1,|L1.608|
000204  8008              STRH     r0,[r1,#0]
;;;119    				nsAPI_SSP_Sensor_Monitor();
000206  f7fffffe          BL       nsAPI_SSP_Sensor_Monitor
                  |L1.522|
;;;120    			}
;;;121    		}
;;;122    		
;;;123    		if(poll_usb)
00020a  4816              LDR      r0,|L1.612|
00020c  8800              LDRH     r0,[r0,#0]  ; poll_usb
00020e  2800              CMP      r0,#0
000210  d004              BEQ      |L1.540|
;;;124    		{
;;;125    			poll_usb = 0;
000212  2000              MOVS     r0,#0
000214  4913              LDR      r1,|L1.612|
000216  8008              STRH     r0,[r1,#0]
;;;126    			nsAPI_Main_MouseEventHandle();
000218  f7fffffe          BL       nsAPI_Main_MouseEventHandle
                  |L1.540|
00021c  e7c6              B        |L1.428|
;;;127    		}	
;;;128        }
;;;129    }
;;;130    
                          ENDP

00021e  0000              DCW      0x0000
                  |L1.544|
                          DCD      g_Main_Setting
                  |L1.548|
                          DCD      u8MouseKeyTable
                  |L1.552|
                          DCD      s16accuX
                  |L1.556|
                          DCD      s16accuY
                  |L1.560|
                          DCD      count_z
                  |L1.564|
                          DCD      u8motion
                  |L1.568|
                          DCD      u8Squal
                  |L1.572|
                          DCD      u8PixelSum
                  |L1.576|
                          DCD      u16Pixel
                  |L1.580|
                          DCD      u16Shutter
                  |L1.584|
                          DCD      cpi_clicked_flag
                  |L1.588|
                          DCD      cpi_p_Cntr
                  |L1.592|
                          DCD      cpi_m_Cntr
                  |L1.596|
                          DCD      mouse_event_ctrl
                  |L1.600|
                          DCD      poll_tick_btn
                  |L1.604|
                          DCD      poll_z_wheel
                  |L1.608|
                          DCD      glitch_prevention
                  |L1.612|
                          DCD      poll_usb

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  g_Main_Setting
                          %        40

                          AREA ||.data||, DATA, ALIGN=0

                  mouse_event_ctrl
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "Src\\main.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_main_c_0c3f4a5d____REV16|
#line 112 ".\\Inc\\core_cmInstr.h"
|__asm___6_main_c_0c3f4a5d____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_main_c_0c3f4a5d____REVSH|
#line 130
|__asm___6_main_c_0c3f4a5d____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
