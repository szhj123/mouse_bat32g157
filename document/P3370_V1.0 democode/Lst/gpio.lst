L 1 "Src\gpio.c"
N/****************************************************************************
N *   $Id:: gpio.c 6874 2011-03-22 01:58:31Z usb00423                        $
N *   Project: NXP LPC11xx GPIO example
N *
N *   Description:
N *     This file contains GPIO code example which include GPIO
N *     initialization, GPIO interrupt handler, and related APIs for
N *     GPIO access.
N *
N ****************************************************************************
N * Software that is described herein is for illustrative purposes only
N * which provides customers with programming information regarding the
N * products. This software is supplied "AS IS" without any warranties.
N * NXP Semiconductors assumes no responsibility or liability for the
N * use of the software, conveys no license or title under any patent,
N * copyright, or mask work right to the product. NXP Semiconductors
N * reserves the right to make changes in the software without
N * notification. NXP Semiconductors also make no representation or
N * warranty that such application will be suitable for the specified
N * use without further testing or modification.
N****************************************************************************/
N#define __GPIO_C__
N
N#include "Pixart_Sensor.h"
L 1 ".\Inc\Pixart_Sensor.h" 1
N#include "LPC11Uxx.h"
L 1 ".\Inc\LPC11Uxx.h" 1
N
N/****************************************************************************************************//**
N * @file     LPC11Uxx.h
N *
N *
N * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File for
N *           default LPC11Uxx Device Series
N *
N * @version  V0.1
N * @date     21. March 2011
N *
N * @note     Generated with SFDGen V2.6 Build 3j (beta) on Thursday, 17.03.2011 13:19:45
N *
N *           from CMSIS SVD File 'LPC11U1x_svd.xml' Version 0.1,
N *           created on Wednesday, 16.03.2011 20:30:42, last modified on Thursday, 17.03.2011 20:19:40
N *
N *******************************************************************************************************/
N
N
N
N/** @addtogroup NXP
N  * @{
N  */
N
N/** @addtogroup LPC11Uxx
N  * @{
N  */
N
N#ifndef __LPC11UXX_H__
N#define __LPC11UXX_H__
N
N#ifdef __cplusplus
Sextern "C" {
N#endif 
N
N
N#if defined ( __CC_ARM   )
X#if 1L
N  #pragma anon_unions
N#endif
N
N /* Interrupt Number Definition */
N
Ntypedef enum {
N// -------------------------  Cortex-M0 Processor Exceptions Numbers  -----------------------------
N  Reset_IRQn                        = -15,  /*!<   1  Reset Vector, invoked on Power up and warm reset */
N  NonMaskableInt_IRQn               = -14,  /*!<   2  Non maskable Interrupt, cannot be stopped or preempted */
N  HardFault_IRQn                    = -13,  /*!<   3  Hard Fault, all classes of Fault */
N  SVCall_IRQn                       = -5,   /*!<  11  System Service Call via SVC instruction */
N  DebugMonitor_IRQn                 = -4,   /*!<  12  Debug Monitor                    */
N  PendSV_IRQn                       = -2,   /*!<  14  Pendable request for system service */
N  SysTick_IRQn                      = -1,   /*!<  15  System Tick Timer                */
N// ---------------------------  LPC11Uxx Specific Interrupt Numbers  ------------------------------
NFLEX_INT0_IRQn                = 0,        /*!< All I/O pins can be routed to below 8 interrupts. */
N  FLEX_INT1_IRQn                = 1,
N  FLEX_INT2_IRQn                = 2,
N  FLEX_INT3_IRQn                = 3,
N  FLEX_INT4_IRQn                = 4,   
N  FLEX_INT5_IRQn                = 5,        
N  FLEX_INT6_IRQn                = 6,        
N  FLEX_INT7_IRQn                = 7,        
N  GINT0_IRQn                    = 8,        /*!< Grouped Interrupt 0                              */
N  GINT1_IRQn                    = 9,        /*!< Grouped Interrupt 1                              */
N  Reserved0_IRQn                = 10,       /*!< Reserved Interrupt                               */
N  Reserved1_IRQn                = 11,       
N  Reserved2_IRQn                = 12,       
N  Reserved3_IRQn                = 13,       
N  SSP1_IRQn                     = 14,       /*!< SSP1 Interrupt                                   */
N  I2C_IRQn                      = 15,       /*!< I2C Interrupt                                    */
N  TIMER_16_0_IRQn               = 16,       /*!< 16-bit Timer0 Interrupt                          */
N  TIMER_16_1_IRQn               = 17,       /*!< 16-bit Timer1 Interrupt                          */
N  TIMER_32_0_IRQn               = 18,       /*!< 32-bit Timer0 Interrupt                          */
N  TIMER_32_1_IRQn               = 19,       /*!< 32-bit Timer1 Interrupt                          */
N  SSP0_IRQn                     = 20,       /*!< SSP0 Interrupt                                   */
N  UART_IRQn                     = 21,       /*!< UART Interrupt                                   */
N  USB_IRQn                      = 22,       /*!< USB IRQ Interrupt                                */
N  USB_FIQn                      = 23,       /*!< USB FIQ Interrupt                                */
N  ADC_IRQn                      = 24,       /*!< A/D Converter Interrupt                          */
N  WDT_IRQn                      = 25,       /*!< Watchdog timer Interrupt                         */  
N  BOD_IRQn                      = 26,       /*!< Brown Out Detect(BOD) Interrupt                  */
N  FMC_IRQn                      = 27,       /*!< Flash Memory Controller Interrupt                */
N  Reserved4_IRQn                = 28,       /*!< Reserved Interrupt                               */
N  Reserved5_IRQn                = 29,       /*!< Reserved Interrupt                               */
N  USBWakeup_IRQn                = 30,       /*!< USB wakeup Interrupt                             */
N  Reserved6_IRQn                = 31,       /*!< Reserved Interrupt                               */
N} IRQn_Type;
N
N
N/** @addtogroup Configuration_of_CMSIS
N  * @{
N  */
N
N/* Processor and Core Peripheral Section */ /* Configuration of the Cortex-M0 Processor and Core Peripherals */
N
N#define __MPU_PRESENT             0         /*!< MPU present or not                    */
N#define __NVIC_PRIO_BITS          3         /*!< Number of Bits used for Priority Levels */
N#define __Vendor_SysTickConfig    0         /*!< Set to 1 if different SysTick Config is used */
N/** @} */ /* End of group Configuration_of_CMSIS */
N
N#include "core_cm0.h"                       /*!< Cortex-M0 processor and core peripherals */
L 1 ".\Inc\core_cm0.h" 1
N/**************************************************************************//**
N * @file     core_cm0.h
N * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
N * @version  V2.01
N * @date     06. December 2010
N *
N * @note
N * Copyright (C) 2009-2010 ARM Limited. All rights reserved.
N *
N * @par
N * ARM Limited (ARM) is supplying this software for use with Cortex-M 
N * processor based microcontrollers.  This file can be freely distributed 
N * within development tools that are supporting such ARM based processors. 
N *
N * @par
N * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
N * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
N * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
N * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
N *
N ******************************************************************************/
N#if defined ( __ICCARM__ )                   
X#if 0L                   
S #pragma system_include  /* treat file as system include file for MISRA check */
N#endif
N
N#ifdef __cplusplus
S extern "C" {
N#endif 
N
N#ifndef __CORE_CM0_H_GENERIC
N#define __CORE_CM0_H_GENERIC
N
N
N/** \mainpage CMSIS Cortex-M0
N   
N  This documentation describes the CMSIS Cortex-M Core Peripheral Access Layer.
N  It consists of:
N 
N     - Cortex-M Core Register Definitions
N     - Cortex-M functions
N     - Cortex-M instructions
N 
N  The CMSIS Cortex-M0 Core Peripheral Access Layer contains C and assembly functions that ease 
N  access to the Cortex-M Core
N */ 
N
N/** \defgroup CMSIS_LintCinfiguration CMSIS Lint Configuration
N  List of Lint messages which will be suppressed and not shown:
N    - not yet checked
N  .
N  Note:  To re-enable a Message, insert a space before 'lint' *
N 
N */
N
N
N/*******************************************************************************
N *                 CMSIS definitions
N ******************************************************************************/
N/** \defgroup CMSIS_core_definitions CMSIS Core Definitions
N  This file defines all structures and symbols for CMSIS core:
N   - CMSIS version number
N   - Cortex-M core 
N   - Cortex-M core Revision Number
N  @{
N */
N
N/*  CMSIS CM0 definitions */
N#define __CM0_CMSIS_VERSION_MAIN  (0x02)                                                       /*!< [31:16] CMSIS HAL main version */
N#define __CM0_CMSIS_VERSION_SUB   (0x00)                                                       /*!< [15:0]  CMSIS HAL sub version  */
N#define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16) | __CM0_CMSIS_VERSION_SUB) /*!< CMSIS HAL version number       */
N
N#define __CORTEX_M                (0x00)                                                       /*!< Cortex core                    */
N
N
N#if defined ( __CC_ARM   )
X#if 1L
N  #define __ASM            __asm                                      /*!< asm keyword for ARM Compiler          */
N  #define __INLINE         __inline                                   /*!< inline keyword for ARM Compiler       */
N
N#elif defined ( __ICCARM__ )
S  #define __ASM           __asm                                       /*!< asm keyword for IAR Compiler          */
S  #define __INLINE        inline                                      /*!< inline keyword for IAR Compiler. Only avaiable in High optimization mode! */
S
S#elif defined   (  __GNUC__  )
S  #define __ASM            __asm                                      /*!< asm keyword for GNU Compiler          */
S  #define __INLINE         inline                                     /*!< inline keyword for GNU Compiler       */
S
S#elif defined   (  __TASKING__  )
S  #define __ASM            __asm                                      /*!< asm keyword for TASKING Compiler      */
S  #define __INLINE         inline                                     /*!< inline keyword for TASKING Compiler   */
S
N#endif
N
N#include <stdint.h>                      /*!< standard types definitions                      */
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999,2014 */
N/* All rights reserved */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5060044
N
N  #ifdef __INT64_TYPE__
S    /* armclang predefines '__INT64_TYPE__' and '__INT64_C_SUFFIX__' */
S    #define __INT64 __INT64_TYPE__
N  #else
N    /* armcc has builtin '__int64' which can be used in --strict mode */
N    #define __INT64 __int64
N    #define __INT64_C_SUFFIX__ ll
N  #endif
N  #define __PASTE2(x, y) x ## y
N  #define __PASTE(x, y) __PASTE2(x, y)
N  #define __INT64_C(x)  __ESCAPE__(__PASTE(x, __INT64_C_SUFFIX__))
N  #define __UINT64_C(x)  __ESCAPE__(__PASTE(x ## u, __INT64_C_SUFFIX__))
N  #if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X  #if 0L || (1L && !0L)
N    /* armclang and non-strict armcc allow 'long long' in system headers */
N    #define __LONGLONG long long
N  #else
S    /* strict armcc has '__int64' */
S    #define __LONGLONG __int64
N  #endif
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __INT64 int64_t;
Xtypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __INT64 uint64_t;
Xtypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __INT64 int_least64_t;
Xtypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __INT64 uint_least64_t;
Xtypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __INT64 int_fast64_t;
Xtypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __INT64 uint_fast64_t;
Xtypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
N#if __sizeof_ptr == 8
X#if 4 == 8
Stypedef   signed       __INT64 intptr_t;
Stypedef unsigned       __INT64 uintptr_t;
N#else
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N#endif
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed     __LONGLONG intmax_t;
Xtypedef   signed     long long intmax_t;
Ntypedef unsigned     __LONGLONG uintmax_t;
Xtypedef unsigned     long long uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __INT64_C(~0x7fffffffffffffff) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MIN INT64_MIN
N#else
N#define INTPTR_MIN INT32_MIN
N#endif
N
N    /* maximum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MAX INT64_MAX
N#else
N#define INTPTR_MAX INT32_MAX
N#endif
N
N    /* maximum value of pointer-holding unsigned integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define UINTPTR_MAX UINT64_MAX
N#else
N#define UINTPTR_MAX UINT32_MAX
N#endif
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define PTRDIFF_MIN INT64_MIN
S#define PTRDIFF_MAX INT64_MAX
N#else
N#define PTRDIFF_MIN INT32_MIN
N#define PTRDIFF_MAX INT32_MAX
N#endif
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define SIZE_MAX UINT64_MAX
N#else
N#define SIZE_MAX UINT32_MAX
N#endif
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X#if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __INT64_C(x)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __UINT64_C(x)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif
N  #endif /* __cplusplus */
N
N#undef __INT64
N#undef __LONGLONG
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
L 95 ".\Inc\core_cm0.h" 2
N#include "core_cmInstr.h"                /*!< Core Instruction Access                         */
L 1 ".\Inc\core_cmInstr.h" 1
N/**************************************************************************//**
N * @file     core_cmInstr.h
N * @brief    CMSIS Cortex-M Core Instruction Access Header File
N * @version  V2.01
N * @date     06. December 2010
N *
N * @note
N * Copyright (C) 2009-2010 ARM Limited. All rights reserved.
N *
N * @par
N * ARM Limited (ARM) is supplying this software for use with Cortex-M 
N * processor based microcontrollers.  This file can be freely distributed 
N * within development tools that are supporting such ARM based processors. 
N *
N * @par
N * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
N * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
N * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
N * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
N *
N ******************************************************************************/
N
N#ifndef __CORE_CMINSTR_H__
N#define __CORE_CMINSTR_H__
N
N
N/* ##########################  Core Instruction Access  ######################### */
N/** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
N  Access to dedicated instructions
N  @{
N*/
N
N#if defined ( __CC_ARM   ) /*------------------ RealView Compiler ----------------*/
X#if 1L  
N/* ARM armcc specific functions */
N
N/** \brief  No Operation
N
N    No Operation does nothing. This instruction can be used for code alignment purposes.
N */
N#define __NOP                             __nop
N
N
N/** \brief  Wait For Interrupt
N
N    Wait For Interrupt is a hint instruction that suspends execution
N    until one of a number of events occurs.
N */
N#define __WFI                             __wfi
N
N
N/** \brief  Wait For Event
N
N    Wait For Event is a hint instruction that permits the processor to enter
N    a low-power state until one of a number of events occurs.
N */
N#define __WFE                             __wfe
N
N
N/** \brief  Send Event
N
N    Send Event is a hint instruction. It causes an event to be signaled to the CPU.
N */
N#define __SEV                             __sev
N
N
N/** \brief  Instruction Synchronization Barrier
N
N    Instruction Synchronization Barrier flushes the pipeline in the processor, 
N    so that all instructions following the ISB are fetched from cache or 
N    memory, after the instruction has been completed.
N */
N#define __ISB()                           __isb(0xF)
N
N
N/** \brief  Data Synchronization Barrier
N
N    This function acts as a special kind of Data Memory Barrier. 
N    It completes when all explicit memory accesses before this instruction complete.
N */
N#define __DSB()                           __dsb(0xF)
N
N
N/** \brief  Data Memory Barrier
N
N    This function ensures the apparent order of the explicit memory operations before 
N    and after the instruction, without ensuring their completion.
N */
N#define __DMB()                           __dmb(0xF)
N
N
N/** \brief  Reverse byte order (32 bit)
N
N    This function reverses the byte order in integer value.
N
N    \param [in]    value  Value to reverse
N    \return               Reversed value
N */
N#define __REV                             __rev
N
N
N/** \brief  Reverse byte order (16 bit)
N
N    This function reverses the byte order in two unsigned short values.
N
N    \param [in]    value  Value to reverse
N    \return               Reversed value
N */
N#if (__ARMCC_VERSION < 400677)
X#if (5060960 < 400677)
Sextern uint32_t __REV16(uint32_t value);
N#else  /* (__ARMCC_VERSION >= 400677)  */
Nstatic __INLINE __ASM uint32_t __REV16(uint32_t value)
Xstatic __inline __asm uint32_t __REV16(uint32_t value)
N{
N  rev16 r0, r0
N  bx lr
N}
N#endif /* __ARMCC_VERSION  */ 
N
N
N/** \brief  Reverse byte order in signed short value
N
N    This function reverses the byte order in a signed short value with sign extension to integer.
N
N    \param [in]    value  Value to reverse
N    \return               Reversed value
N */
N#if (__ARMCC_VERSION < 400677)
X#if (5060960 < 400677)
Sextern int32_t __REVSH(int32_t value);
N#else  /* (__ARMCC_VERSION >= 400677)  */
Nstatic __INLINE __ASM int32_t __REVSH(int32_t value)
Xstatic __inline __asm int32_t __REVSH(int32_t value)
N{
N  revsh r0, r0
N  bx lr
N}
N#endif /* __ARMCC_VERSION  */ 
N
N
N#if       (__CORTEX_M >= 0x03)
X#if       ((0x00) >= 0x03)
S
S/** \brief  Reverse bit order of value
S
S    This function reverses the bit order of the given value.
S
S    \param [in]    value  Value to reverse
S    \return               Reversed value
S */
S#define __RBIT                            __rbit
S
S
S/** \brief  LDR Exclusive (8 bit)
S
S    This function performs a exclusive LDR command for 8 bit value.
S
S    \param [in]    ptr  Pointer to data
S    \return             value of type uint8_t at (*ptr)
S */
S#define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
S
S
S/** \brief  LDR Exclusive (16 bit)
S
S    This function performs a exclusive LDR command for 16 bit values.
S
S    \param [in]    ptr  Pointer to data
S    \return        value of type uint16_t at (*ptr)
S */
S#define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
S
S
S/** \brief  LDR Exclusive (32 bit)
S
S    This function performs a exclusive LDR command for 32 bit values.
S
S    \param [in]    ptr  Pointer to data
S    \return        value of type uint32_t at (*ptr)
S */
S#define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
S
S
S/** \brief  STR Exclusive (8 bit)
S
S    This function performs a exclusive STR command for 8 bit values.
S
S    \param [in]  value  Value to store
S    \param [in]    ptr  Pointer to location
S    \return          0  Function succeeded
S    \return          1  Function failed
S */
S#define __STREXB(value, ptr)              __strex(value, ptr)
S
S
S/** \brief  STR Exclusive (16 bit)
S
S    This function performs a exclusive STR command for 16 bit values.
S
S    \param [in]  value  Value to store
S    \param [in]    ptr  Pointer to location
S    \return          0  Function succeeded
S    \return          1  Function failed
S */
S#define __STREXH(value, ptr)              __strex(value, ptr)
S
S
S/** \brief  STR Exclusive (32 bit)
S
S    This function performs a exclusive STR command for 32 bit values.
S
S    \param [in]  value  Value to store
S    \param [in]    ptr  Pointer to location
S    \return          0  Function succeeded
S    \return          1  Function failed
S */
S#define __STREXW(value, ptr)              __strex(value, ptr)
S
S
S/** \brief  Remove the exclusive lock
S
S    This function removes the exclusive lock which is created by LDREX.
S
S */
S#if (__ARMCC_VERSION < 400000)
Sextern void __CLREX(void);
S#else  /* (__ARMCC_VERSION >= 400000)  */
S#define __CLREX                           __clrex
S#endif /* __ARMCC_VERSION  */ 
S
S
S/** \brief  Signed Saturate
S
S    This function saturates a signed value.
S
S    \param [in]  value  Value to be saturated
S    \param [in]    sat  Bit position to saturate to (1..32)
S    \return             Saturated value
S */
S#define __SSAT                            __ssat
S
S
S/** \brief  Unsigned Saturate
S
S    This function saturates an unsigned value.
S
S    \param [in]  value  Value to be saturated
S    \param [in]    sat  Bit position to saturate to (0..31)
S    \return             Saturated value
S */
S#define __USAT                            __usat
S
S
S/** \brief  Count leading zeros
S
S    This function counts the number of leading zeros of a data value.
S
S    \param [in]  value  Value to count the leading zeros
S    \return             number of leading zeros in value
S */
S#define __CLZ                             __clz 
S
N#endif /* (__CORTEX_M >= 0x03) */
N
N
N
N#elif (defined (__ICCARM__)) /*---------------- ICC Compiler ---------------------*/
S/* IAR iccarm specific functions */
S
S#include <intrinsics.h>                     /* IAR Intrinsics   */
S
S#pragma diag_suppress=Pe940
S
S/** \brief  No Operation
S
S    No Operation does nothing. This instruction can be used for code alignment purposes.
S */
S#define __NOP                           __no_operation
S
S
S/** \brief  Wait For Interrupt
S
S    Wait For Interrupt is a hint instruction that suspends execution
S    until one of a number of events occurs.
S */
Sstatic __INLINE  void __WFI(void)
S{
S  __ASM ("wfi");
S}
S
S
S/** \brief  Wait For Event
S
S    Wait For Event is a hint instruction that permits the processor to enter
S    a low-power state until one of a number of events occurs.
S */
Sstatic __INLINE  void __WFE(void)
S{
S  __ASM ("wfe");
S}
S
S
S/** \brief  Send Event
S
S    Send Event is a hint instruction. It causes an event to be signaled to the CPU.
S */
Sstatic __INLINE  void __SEV(void)
S{
S  __ASM ("sev");
S}
S
S
S/* intrinsic     void __ISB(void)            (see intrinsics.h) */
S/* intrinsic     void __DSB(void)            (see intrinsics.h) */
S/* intrinsic     void __DMB(void)            (see intrinsics.h) */
S/* intrinsic uint32_t __REV(uint32_t value)  (see intrinsics.h) */
S/* intrinsic          __SSAT                 (see intrinsics.h) */
S/* intrinsic          __USAT                 (see intrinsics.h) */
S
S
S/** \brief  Reverse byte order (16 bit)
S
S    This function reverses the byte order in two unsigned short values.
S
S    \param [in]    value  Value to reverse
S    \return               Reversed value
S */
Sstatic uint32_t __REV16(uint32_t value)
S{
S  __ASM("rev16 r0, r0");
S}
S
S
S/* intrinsic uint32_t __REVSH(uint32_t value)  (see intrinsics.h */
S
S
S#if       (__CORTEX_M >= 0x03)
S
S/** \brief  Reverse bit order of value
S
S    This function reverses the bit order of the given value.
S
S    \param [in]    value  Value to reverse
S    \return               Reversed value
S */
Sstatic uint32_t __RBIT(uint32_t value)
S{
S  __ASM("rbit r0, r0");
S}
S
S
S/** \brief  LDR Exclusive (8 bit)
S
S    This function performs a exclusive LDR command for 8 bit value.
S
S    \param [in]    ptr  Pointer to data
S    \return             value of type uint8_t at (*ptr)
S */
Sstatic uint8_t __LDREXB(volatile uint8_t *addr)
S{
S  __ASM("ldrexb r0, [r0]");
S}
S
S
S/** \brief  LDR Exclusive (16 bit)
S
S    This function performs a exclusive LDR command for 16 bit values.
S
S    \param [in]    ptr  Pointer to data
S    \return        value of type uint16_t at (*ptr)
S */
Sstatic uint16_t __LDREXH(volatile uint16_t *addr)
S{
S  __ASM("ldrexh r0, [r0]");
S}
S
S
S/** \brief  LDR Exclusive (32 bit)
S
S    This function performs a exclusive LDR command for 32 bit values.
S
S    \param [in]    ptr  Pointer to data
S    \return        value of type uint32_t at (*ptr)
S */
S/* intrinsic unsigned long __LDREX(unsigned long *)  (see intrinsics.h) */
Sstatic uint32_t __LDREXW(volatile uint32_t *addr)
S{
S  __ASM("ldrex r0, [r0]");
S}
S
S
S/** \brief  STR Exclusive (8 bit)
S
S    This function performs a exclusive STR command for 8 bit values.
S
S    \param [in]  value  Value to store
S    \param [in]    ptr  Pointer to location
S    \return          0  Function succeeded
S    \return          1  Function failed
S */
Sstatic uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
S{
S  __ASM("strexb r0, r0, [r1]");
S}
S
S
S/** \brief  STR Exclusive (16 bit)
S
S    This function performs a exclusive STR command for 16 bit values.
S
S    \param [in]  value  Value to store
S    \param [in]    ptr  Pointer to location
S    \return          0  Function succeeded
S    \return          1  Function failed
S */
Sstatic uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
S{
S  __ASM("strexh r0, r0, [r1]");
S}
S
S
S/** \brief  STR Exclusive (32 bit)
S
S    This function performs a exclusive STR command for 32 bit values.
S
S    \param [in]  value  Value to store
S    \param [in]    ptr  Pointer to location
S    \return          0  Function succeeded
S    \return          1  Function failed
S */
S/* intrinsic unsigned long __STREX(unsigned long, unsigned long)  (see intrinsics.h )*/
Sstatic uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
S{
S  __ASM("strex r0, r0, [r1]");
S}
S
S
S/** \brief  Remove the exclusive lock
S
S    This function removes the exclusive lock which is created by LDREX.
S
S */
Sstatic __INLINE void __CLREX(void)
S{
S  __ASM ("clrex");
S}
S
S/* intrinsic   unsigned char __CLZ( unsigned long )      (see intrinsics.h) */
S
S#endif /* (__CORTEX_M >= 0x03) */
S
S#pragma diag_default=Pe940
S
S
S
S#elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
S/* GNU gcc specific functions */
S
S/** \brief  No Operation
S
S    No Operation does nothing. This instruction can be used for code alignment purposes.
S */
S__attribute__( ( always_inline ) ) static __INLINE void __NOP(void)
S{
S  __ASM volatile ("nop");
S}
S
S
S/** \brief  Wait For Interrupt
S
S    Wait For Interrupt is a hint instruction that suspends execution
S    until one of a number of events occurs.
S */
S__attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
S{
S  __ASM volatile ("wfi");
S}
S
S
S/** \brief  Wait For Event
S
S    Wait For Event is a hint instruction that permits the processor to enter
S    a low-power state until one of a number of events occurs.
S */
S__attribute__( ( always_inline ) ) static __INLINE void __WFE(void)
S{
S  __ASM volatile ("wfe");
S}
S
S
S/** \brief  Send Event
S
S    Send Event is a hint instruction. It causes an event to be signaled to the CPU.
S */
S__attribute__( ( always_inline ) ) static __INLINE void __SEV(void)
S{
S  __ASM volatile ("sev");
S}
S
S
S/** \brief  Instruction Synchronization Barrier
S
S    Instruction Synchronization Barrier flushes the pipeline in the processor, 
S    so that all instructions following the ISB are fetched from cache or 
S    memory, after the instruction has been completed.
S */
S__attribute__( ( always_inline ) ) static __INLINE void __ISB(void)
S{
S  __ASM volatile ("isb");
S}
S
S
S/** \brief  Data Synchronization Barrier
S
S    This function acts as a special kind of Data Memory Barrier. 
S    It completes when all explicit memory accesses before this instruction complete.
S */
S__attribute__( ( always_inline ) ) static __INLINE void __DSB(void)
S{
S  __ASM volatile ("dsb");
S}
S
S
S/** \brief  Data Memory Barrier
S
S    This function ensures the apparent order of the explicit memory operations before 
S    and after the instruction, without ensuring their completion.
S */
S__attribute__( ( always_inline ) ) static __INLINE void __DMB(void)
S{
S  __ASM volatile ("dmb");
S}
S
S
S/** \brief  Reverse byte order (32 bit)
S
S    This function reverses the byte order in integer value.
S
S    \param [in]    value  Value to reverse
S    \return               Reversed value
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
S{
S  uint32_t result;
S  
S  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
S  return(result);
S}
S
S
S/** \brief  Reverse byte order (16 bit)
S
S    This function reverses the byte order in two unsigned short values.
S
S    \param [in]    value  Value to reverse
S    \return               Reversed value
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV16(uint32_t value)
S{
S  uint32_t result;
S  
S  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
S  return(result);
S}
S
S
S/** \brief  Reverse byte order in signed short value
S
S    This function reverses the byte order in a signed short value with sign extension to integer.
S
S    \param [in]    value  Value to reverse
S    \return               Reversed value
S */
S__attribute__( ( always_inline ) ) static __INLINE int32_t __REVSH(int32_t value)
S{
S  uint32_t result;
S  
S  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
S  return(result);
S}
S
S
S#if       (__CORTEX_M >= 0x03)
S
S/** \brief  Reverse bit order of value
S
S    This function reverses the bit order of the given value.
S
S    \param [in]    value  Value to reverse
S    \return               Reversed value
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __RBIT(uint32_t value)
S{
S  uint32_t result;
S  
S   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
S   return(result);
S}
S
S
S/** \brief  LDR Exclusive (8 bit)
S
S    This function performs a exclusive LDR command for 8 bit value.
S
S    \param [in]    ptr  Pointer to data
S    \return             value of type uint8_t at (*ptr)
S */
S__attribute__( ( always_inline ) ) static __INLINE uint8_t __LDREXB(volatile uint8_t *addr)
S{
S    uint8_t result;
S  
S   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
S   return(result);
S}
S
S
S/** \brief  LDR Exclusive (16 bit)
S
S    This function performs a exclusive LDR command for 16 bit values.
S
S    \param [in]    ptr  Pointer to data
S    \return        value of type uint16_t at (*ptr)
S */
S__attribute__( ( always_inline ) ) static __INLINE uint16_t __LDREXH(volatile uint16_t *addr)
S{
S    uint16_t result;
S  
S   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
S   return(result);
S}
S
S
S/** \brief  LDR Exclusive (32 bit)
S
S    This function performs a exclusive LDR command for 32 bit values.
S
S    \param [in]    ptr  Pointer to data
S    \return        value of type uint32_t at (*ptr)
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __LDREXW(volatile uint32_t *addr)
S{
S    uint32_t result;
S  
S   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
S   return(result);
S}
S
S
S/** \brief  STR Exclusive (8 bit)
S
S    This function performs a exclusive STR command for 8 bit values.
S
S    \param [in]  value  Value to store
S    \param [in]    ptr  Pointer to location
S    \return          0  Function succeeded
S    \return          1  Function failed
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
S{
S   uint32_t result;
S  
S   __ASM volatile ("strexb %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
S   return(result);
S}
S
S
S/** \brief  STR Exclusive (16 bit)
S
S    This function performs a exclusive STR command for 16 bit values.
S
S    \param [in]  value  Value to store
S    \param [in]    ptr  Pointer to location
S    \return          0  Function succeeded
S    \return          1  Function failed
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
S{
S   uint32_t result;
S  
S   __ASM volatile ("strexh %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
S   return(result);
S}
S
S
S/** \brief  STR Exclusive (32 bit)
S
S    This function performs a exclusive STR command for 32 bit values.
S
S    \param [in]  value  Value to store
S    \param [in]    ptr  Pointer to location
S    \return          0  Function succeeded
S    \return          1  Function failed
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
S{
S   uint32_t result;
S  
S   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
S   return(result);
S}
S
S
S/** \brief  Remove the exclusive lock
S
S    This function removes the exclusive lock which is created by LDREX.
S
S */
S__attribute__( ( always_inline ) ) static __INLINE void __CLREX(void)
S{
S  __ASM volatile ("clrex");
S}
S
S
S/** \brief  Signed Saturate
S
S    This function saturates a signed value.
S
S    \param [in]  value  Value to be saturated
S    \param [in]    sat  Bit position to saturate to (1..32)
S    \return             Saturated value
S */
S#define __SSAT(ARG1,ARG2) \
S({                          \
S  uint32_t __RES, __ARG1 = (ARG1); \
S  __ASM ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) ); \
S  __RES; \
S })
X#define __SSAT(ARG1,ARG2) ({                            uint32_t __RES, __ARG1 = (ARG1);   __ASM ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) );   __RES;  })
S
S
S/** \brief  Unsigned Saturate
S
S    This function saturates an unsigned value.
S
S    \param [in]  value  Value to be saturated
S    \param [in]    sat  Bit position to saturate to (0..31)
S    \return             Saturated value
S */
S#define __USAT(ARG1,ARG2) \
S({                          \
S  uint32_t __RES, __ARG1 = (ARG1); \
S  __ASM ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) ); \
S  __RES; \
S })
X#define __USAT(ARG1,ARG2) ({                            uint32_t __RES, __ARG1 = (ARG1);   __ASM ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) );   __RES;  })
S
S
S/** \brief  Count leading zeros
S
S    This function counts the number of leading zeros of a data value.
S
S    \param [in]  value  Value to count the leading zeros
S    \return             number of leading zeros in value
S */
S__attribute__( ( always_inline ) ) static __INLINE uint8_t __CLZ(uint32_t value)
S{
S  uint8_t result;
S  
S  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
S  return(result);
S}
S
S#endif /* (__CORTEX_M >= 0x03) */
S
S
S
S
S#elif (defined (__TASKING__)) /*--------------- TASKING Compiler -----------------*/
S/* TASKING carm specific functions */
S
S/*
S * The CMSIS functions have been implemented as intrinsics in the compiler.
S * Please use "carm -?i" to get an up to date list of all instrinsics,
S * Including the CMSIS ones.
S */
S
N#endif
N
N/*@}*/ /* end of group CMSIS_Core_InstructionInterface */
N
N#endif /* __CORE_CMINSTR_H__ */
L 96 ".\Inc\core_cm0.h" 2
N#include "core_cmFunc.h"                 /*!< Core Function Access                            */
L 1 ".\Inc\core_cmFunc.h" 1
N/**************************************************************************//**
N * @file     core_cmFunc.h
N * @brief    CMSIS Cortex-M Core Function Access Header File
N * @version  V2.01
N * @date     06. December 2010
N *
N * @note
N * Copyright (C) 2009-2010 ARM Limited. All rights reserved.
N *
N * @par
N * ARM Limited (ARM) is supplying this software for use with Cortex-M 
N * processor based microcontrollers.  This file can be freely distributed 
N * within development tools that are supporting such ARM based processors. 
N *
N * @par
N * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
N * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
N * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
N * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
N *
N ******************************************************************************/
N
N#ifndef __CORE_CMFUNC_H__
N#define __CORE_CMFUNC_H__
N
N/* ###########################  Core Function Access  ########################### */
N/** \ingroup  CMSIS_Core_FunctionInterface   
N    \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
N  @{
N */
N
N#if defined ( __CC_ARM   ) /*------------------ RealView Compiler ----------------*/
X#if 1L  
N/* ARM armcc specific functions */
N
N/* intrinsic void __enable_irq();     */
N/* intrinsic void __disable_irq();    */
N
N/** \brief  Get Control Register
N
N    This function returns the content of the Control Register.
N
N    \return               Control Register value
N */
N#if       (__ARMCC_VERSION <  400000)
X#if       (5060960 <  400000)
Sextern          uint32_t __get_CONTROL(void);
N#else  /* (__ARMCC_VERSION >= 400000) */
Nstatic __INLINE uint32_t __get_CONTROL(void)
Xstatic __inline uint32_t __get_CONTROL(void)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  return(__regControl);
N}
N#endif /*  __ARMCC_VERSION  */ 
N
N
N/** \brief  Set Control Register
N
N    This function writes the given value to the Control Register.
N
N    \param [in]    control  Control Register value to set
N */
N#if       (__ARMCC_VERSION <  400000)
X#if       (5060960 <  400000)
Sextern          void __set_CONTROL(uint32_t control);
N#else  /* (__ARMCC_VERSION >= 400000) */
Nstatic __INLINE void __set_CONTROL(uint32_t control)
Xstatic __inline void __set_CONTROL(uint32_t control)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  __regControl = control;
N}
N#endif /*  __ARMCC_VERSION  */ 
N
N
N/** \brief  Get ISPR Register
N
N    This function returns the content of the ISPR Register.
N
N    \return               ISPR Register value
N */
N#if       (__ARMCC_VERSION <  400000)
X#if       (5060960 <  400000)
Sextern          uint32_t __get_IPSR(void);
N#else  /* (__ARMCC_VERSION >= 400000) */
Nstatic __INLINE uint32_t __get_IPSR(void)
Xstatic __inline uint32_t __get_IPSR(void)
N{
N  register uint32_t __regIPSR          __ASM("ipsr");
X  register uint32_t __regIPSR          __asm("ipsr");
N  return(__regIPSR);
N}
N#endif /*  __ARMCC_VERSION  */ 
N
N
N/** \brief  Get APSR Register
N
N    This function returns the content of the APSR Register.
N
N    \return               APSR Register value
N */
N#if       (__ARMCC_VERSION <  400000)
X#if       (5060960 <  400000)
Sextern          uint32_t __get_APSR(void);
N#else  /* (__ARMCC_VERSION >= 400000) */
Nstatic __INLINE uint32_t __get_APSR(void)
Xstatic __inline uint32_t __get_APSR(void)
N{
N  register uint32_t __regAPSR          __ASM("apsr");
X  register uint32_t __regAPSR          __asm("apsr");
N  return(__regAPSR);
N}
N#endif /*  __ARMCC_VERSION  */ 
N
N
N/** \brief  Get xPSR Register
N
N    This function returns the content of the xPSR Register.
N
N    \return               xPSR Register value
N */
N#if       (__ARMCC_VERSION <  400000)
X#if       (5060960 <  400000)
Sextern          uint32_t __get_xPSR(void);
N#else  /* (__ARMCC_VERSION >= 400000) */
Nstatic __INLINE uint32_t __get_xPSR(void)
Xstatic __inline uint32_t __get_xPSR(void)
N{
N  register uint32_t __regXPSR          __ASM("xpsr");
X  register uint32_t __regXPSR          __asm("xpsr");
N  return(__regXPSR);
N}
N#endif /*  __ARMCC_VERSION  */ 
N
N
N/** \brief  Get Process Stack Pointer
N
N    This function returns the current value of the Process Stack Pointer (PSP).
N
N    \return               PSP Register value
N */
N#if       (__ARMCC_VERSION <  400000)
X#if       (5060960 <  400000)
Sextern          uint32_t __get_PSP(void);
N#else  /* (__ARMCC_VERSION >= 400000) */
Nstatic __INLINE uint32_t __get_PSP(void)
Xstatic __inline uint32_t __get_PSP(void)
N{
N  register uint32_t __regProcessStackPointer  __ASM("psp");
X  register uint32_t __regProcessStackPointer  __asm("psp");
N  return(__regProcessStackPointer);
N}
N#endif /*  __ARMCC_VERSION  */ 
N
N
N/** \brief  Set Process Stack Pointer
N
N    This function assigns the given value to the Process Stack Pointer (PSP).
N
N    \param [in]    topOfProcStack  Process Stack Pointer value to set
N */
N#if       (__ARMCC_VERSION <  400000)
X#if       (5060960 <  400000)
Sextern          void __set_PSP(uint32_t topOfProcStack);
N#else  /* (__ARMCC_VERSION >= 400000) */
Nstatic __INLINE void __set_PSP(uint32_t topOfProcStack)
Xstatic __inline void __set_PSP(uint32_t topOfProcStack)
N{
N  register uint32_t __regProcessStackPointer  __ASM("psp");
X  register uint32_t __regProcessStackPointer  __asm("psp");
N  __regProcessStackPointer = topOfProcStack;
N}
N#endif /*  __ARMCC_VERSION  */ 
N
N
N/** \brief  Get Main Stack Pointer
N
N    This function returns the current value of the Main Stack Pointer (MSP).
N
N    \return               MSP Register value
N */
N#if       (__ARMCC_VERSION <  400000)
X#if       (5060960 <  400000)
Sextern          uint32_t __get_MSP(void);
N#else  /* (__ARMCC_VERSION >= 400000) */
Nstatic __INLINE uint32_t __get_MSP(void)
Xstatic __inline uint32_t __get_MSP(void)
N{
N  register uint32_t __regMainStackPointer     __ASM("msp");
X  register uint32_t __regMainStackPointer     __asm("msp");
N  return(__regMainStackPointer);
N}
N#endif /*  __ARMCC_VERSION  */ 
N
N
N/** \brief  Set Main Stack Pointer
N
N    This function assigns the given value to the Main Stack Pointer (MSP).
N
N    \param [in]    topOfMainStack  Main Stack Pointer value to set
N */
N#if       (__ARMCC_VERSION <  400000)
X#if       (5060960 <  400000)
Sextern          void __set_MSP(uint32_t topOfMainStack);
N#else  /* (__ARMCC_VERSION >= 400000) */
Nstatic __INLINE void __set_MSP(uint32_t topOfMainStack)
Xstatic __inline void __set_MSP(uint32_t topOfMainStack)
N{
N  register uint32_t __regMainStackPointer     __ASM("msp");
X  register uint32_t __regMainStackPointer     __asm("msp");
N  __regMainStackPointer = topOfMainStack;
N}
N#endif /*  __ARMCC_VERSION  */ 
N
N
N/** \brief  Get Priority Mask
N
N    This function returns the current state of the priority mask bit from the Priority Mask Register.
N
N    \return               Priority Mask value
N */
N#if       (__ARMCC_VERSION <  400000)
X#if       (5060960 <  400000)
Sextern          uint32_t __get_PRIMASK(void);
N#else  /* (__ARMCC_VERSION >= 400000) */
Nstatic __INLINE uint32_t __get_PRIMASK(void)
Xstatic __inline uint32_t __get_PRIMASK(void)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  return(__regPriMask);
N}
N#endif /*  __ARMCC_VERSION  */ 
N
N
N/** \brief  Set Priority Mask
N
N    This function assigns the given value to the Priority Mask Register.
N
N    \param [in]    priMask  Priority Mask
N */
N#if       (__ARMCC_VERSION <  400000)
X#if       (5060960 <  400000)
Sextern          void __set_PRIMASK(uint32_t priMask);
N#else  /* (__ARMCC_VERSION >= 400000) */
Nstatic __INLINE void __set_PRIMASK(uint32_t priMask)
Xstatic __inline void __set_PRIMASK(uint32_t priMask)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  __regPriMask = (priMask);
N}
N#endif /*  __ARMCC_VERSION  */ 
N 
N
N#if       (__CORTEX_M >= 0x03)
X#if       ((0x00) >= 0x03)
S
S/** \brief  Enable FIQ
S
S    This function enables FIQ interrupts by clearing the F-bit in the CPSR.
S    Can only be executed in Privileged modes.
S */
S#define __enable_fault_irq                __enable_fiq
S
S
S/** \brief  Disable FIQ
S
S    This function disables FIQ interrupts by setting the F-bit in the CPSR.
S    Can only be executed in Privileged modes.
S */
S#define __disable_fault_irq               __disable_fiq
S
S
S/** \brief  Get Base Priority
S
S    This function returns the current value of the Base Priority register.
S
S    \return               Base Priority register value
S */
S#if       (__ARMCC_VERSION <  400000)
Sextern          uint32_t __get_BASEPRI(void);
S#else  /* (__ARMCC_VERSION >= 400000) */
Sstatic __INLINE uint32_t  __get_BASEPRI(void)
S{
S  register uint32_t __regBasePri         __ASM("basepri");
S  return(__regBasePri);
S}
S#endif /*  __ARMCC_VERSION  */ 
S
S
S/** \brief  Set Base Priority
S
S    This function assigns the given value to the Base Priority register.
S
S    \param [in]    basePri  Base Priority value to set
S */
S#if       (__ARMCC_VERSION <  400000)
Sextern          void __set_BASEPRI(uint32_t basePri);
S#else  /* (__ARMCC_VERSION >= 400000) */
Sstatic __INLINE void __set_BASEPRI(uint32_t basePri)
S{
S  register uint32_t __regBasePri         __ASM("basepri");
S  __regBasePri = (basePri & 0xff);
S}
S#endif /*  __ARMCC_VERSION  */ 
S 
S
S/** \brief  Get Fault Mask
S
S    This function returns the current value of the Fault Mask register.
S
S    \return               Fault Mask register value
S */
S#if       (__ARMCC_VERSION <  400000)
Sextern          uint32_t __get_FAULTMASK(void);
S#else  /* (__ARMCC_VERSION >= 400000) */
Sstatic __INLINE uint32_t __get_FAULTMASK(void)
S{
S  register uint32_t __regFaultMask       __ASM("faultmask");
S  return(__regFaultMask);
S}
S#endif /*  __ARMCC_VERSION  */ 
S
S
S/** \brief  Set Fault Mask
S
S    This function assigns the given value to the Fault Mask register.
S
S    \param [in]    faultMask  Fault Mask value to set
S */
S#if       (__ARMCC_VERSION <  400000)
Sextern          void __set_FAULTMASK(uint32_t faultMask);
S#else  /* (__ARMCC_VERSION >= 400000) */
Sstatic __INLINE void __set_FAULTMASK(uint32_t faultMask)
S{
S  register uint32_t __regFaultMask       __ASM("faultmask");
S  __regFaultMask = (faultMask & 1);
S}
S#endif /*  __ARMCC_VERSION  */ 
S
N#endif /* (__CORTEX_M >= 0x03) */
N
N
N#if       (__CORTEX_M == 0x04)
X#if       ((0x00) == 0x04)
S
S/** \brief  Get FPSCR
S
S    This function returns the current value of the Floating Point Status/Control register.
S
S    \return               Floating Point Status/Control register value
S */
Sstatic __INLINE uint32_t __get_FPSCR(void)
S{
S#if (__FPU_PRESENT == 1)
S  register uint32_t __regfpscr         __ASM("fpscr");
S  return(__regfpscr);
S#else
S   return(0);
S#endif
S}
S
S
S/** \brief  Set FPSCR
S
S    This function assigns the given value to the Floating Point Status/Control register.
S
S    \param [in]    fpscr  Floating Point Status/Control value to set
S */
Sstatic __INLINE void __set_FPSCR(uint32_t fpscr)
S{
S#if (__FPU_PRESENT == 1)
S  register uint32_t __regfpscr         __ASM("fpscr");
S  __regfpscr = (fpscr);
S#endif
S}
S
N#endif /* (__CORTEX_M == 0x04) */
N
N
N #elif (defined (__ICCARM__)) /*---------------- ICC Compiler ---------------------*/
S/* IAR iccarm specific functions */
S
S#if defined (__ICCARM__)
S  #include <intrinsics.h>                     /* IAR Intrinsics   */
S#endif
S
S#pragma diag_suppress=Pe940
S
S/** \brief  Enable IRQ Interrupts
S
S  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
S  Can only be executed in Privileged modes.
S */
S#define __enable_irq                              __enable_interrupt
S
S
S/** \brief  Disable IRQ Interrupts
S
S  This function disables IRQ interrupts by setting the I-bit in the CPSR.
S  Can only be executed in Privileged modes.
S */
S#define __disable_irq                             __disable_interrupt
S
S
S/* intrinsic unsigned long __get_CONTROL( void ); (see intrinsic.h) */
S/* intrinsic void __set_CONTROL( unsigned long ); (see intrinsic.h) */
S
S
S/** \brief  Get ISPR Register
S
S    This function returns the content of the ISPR Register.
S
S    \return               ISPR Register value
S */
Sstatic uint32_t __get_IPSR(void)
S{
S  __ASM("mrs r0, ipsr");
S}
S
S
S/** \brief  Get APSR Register
S
S    This function returns the content of the APSR Register.
S
S    \return               APSR Register value
S */
Sstatic uint32_t __get_APSR(void)
S{
S  __ASM("mrs r0, apsr");
S}
S
S
S/** \brief  Get xPSR Register
S
S    This function returns the content of the xPSR Register.
S
S    \return               xPSR Register value
S */
Sstatic uint32_t __get_xPSR(void)
S{
S  __ASM("mrs r0, psr");           // assembler does not know "xpsr"
S}
S
S
S/** \brief  Get Process Stack Pointer
S
S    This function returns the current value of the Process Stack Pointer (PSP).
S
S    \return               PSP Register value
S */
Sstatic uint32_t __get_PSP(void)
S{
S  __ASM("mrs r0, psp");
S}
S 
S
S/** \brief  Set Process Stack Pointer
S
S    This function assigns the given value to the Process Stack Pointer (PSP).
S
S    \param [in]    topOfProcStack  Process Stack Pointer value to set
S */
Sstatic void __set_PSP(uint32_t topOfProcStack)
S{
S  __ASM("msr psp, r0");
S}
S
S
S/** \brief  Get Main Stack Pointer
S
S    This function returns the current value of the Main Stack Pointer (MSP).
S
S    \return               MSP Register value
S */
Sstatic uint32_t __get_MSP(void)
S{
S  __ASM("mrs r0, msp");
S}
S 
S
S/** \brief  Set Main Stack Pointer
S
S    This function assigns the given value to the Main Stack Pointer (MSP).
S
S    \param [in]    topOfMainStack  Main Stack Pointer value to set
S */
Sstatic void __set_MSP(uint32_t topOfMainStack)
S{
S  __ASM("msr msp, r0");
S}
S 
S
S/* intrinsic unsigned long __get_PRIMASK( void ); (see intrinsic.h) */
S/* intrinsic void __set_PRIMASK( unsigned long ); (see intrinsic.h) */
S 
S
S#if       (__CORTEX_M >= 0x03)
S
S/** \brief  Enable FIQ
S
S    This function enables FIQ interrupts by clearing the F-bit in the CPSR.
S    Can only be executed in Privileged modes.
S */
Sstatic __INLINE void __enable_fault_irq(void)
S{
S  __ASM ("cpsie f");
S}
S
S
S/** \brief  Disable FIQ
S
S    This function disables FIQ interrupts by setting the F-bit in the CPSR.
S    Can only be executed in Privileged modes.
S */
Sstatic __INLINE void __disable_fault_irq(void)
S{
S  __ASM ("cpsid f");
S}
S
S
S/* intrinsic unsigned long __get_BASEPRI( void );   (see intrinsic.h) */
S/* intrinsic void __set_BASEPRI( unsigned long );   (see intrinsic.h) */
S/* intrinsic unsigned long __get_FAULTMASK( void ); (see intrinsic.h) */
S/* intrinsic void __set_FAULTMASK(unsigned long);   (see intrinsic.h) */
S
S#endif /* (__CORTEX_M >= 0x03) */
S
S
S#if       (__CORTEX_M == 0x04)
S
S/** \brief  Get FPSCR
S
S    This function returns the current value of the Floating Point Status/Control register.
S
S    \return               Floating Point Status/Control register value
S */
Sstatic uint32_t __get_FPSCR(void)
S{
S#if (__FPU_PRESENT == 1)
S  __ASM("vmrs r0, fpscr"); 
S#else
S  return(0);
S#endif
S}
S
S
S/** \brief  Set FPSCR
S
S    This function assigns the given value to the Floating Point Status/Control register.
S
S    \param [in]    fpscr  Floating Point Status/Control value to set
S */
Sstatic void __set_FPSCR(uint32_t fpscr)
S{
S#if (__FPU_PRESENT == 1)
S  __ASM("vmsr fpscr, r0");
S#endif
S}
S
S#endif /* (__CORTEX_M == 0x04) */
S
S#pragma diag_default=Pe940
S
S
S#elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
S/* GNU gcc specific functions */
S
S/** \brief  Enable IRQ Interrupts
S
S  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
S  Can only be executed in Privileged modes.
S */
S__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
S{
S  __ASM volatile ("cpsie i");
S}
S
S
S/** \brief  Disable IRQ Interrupts
S
S  This function disables IRQ interrupts by setting the I-bit in the CPSR.
S  Can only be executed in Privileged modes.
S */
S__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
S{
S  __ASM volatile ("cpsid i");
S}
S
S
S/** \brief  Get Control Register
S
S    This function returns the content of the Control Register.
S
S    \return               Control Register value
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_CONTROL(void)
S{
S  uint32_t result;
S
S  __ASM volatile ("MRS %0, control" : "=r" (result) );
S  return(result);
S}
S
S
S/** \brief  Set Control Register
S
S    This function writes the given value to the Control Register.
S
S    \param [in]    control  Control Register value to set
S */
S__attribute__( ( always_inline ) ) static __INLINE void __set_CONTROL(uint32_t control)
S{
S  __ASM volatile ("MSR control, %0" : : "r" (control) );
S}
S
S
S/** \brief  Get ISPR Register
S
S    This function returns the content of the ISPR Register.
S
S    \return               ISPR Register value
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_IPSR(void)
S{
S  uint32_t result;
S
S  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
S  return(result);
S}
S
S
S/** \brief  Get APSR Register
S
S    This function returns the content of the APSR Register.
S
S    \return               APSR Register value
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_APSR(void)
S{
S  uint32_t result;
S
S  __ASM volatile ("MRS %0, apsr" : "=r" (result) );
S  return(result);
S}
S
S
S/** \brief  Get xPSR Register
S
S    This function returns the content of the xPSR Register.
S
S    \return               xPSR Register value
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_xPSR(void)
S{
S  uint32_t result;
S
S  __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
S  return(result);
S}
S
S
S/** \brief  Get Process Stack Pointer
S
S    This function returns the current value of the Process Stack Pointer (PSP).
S
S    \return               PSP Register value
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_PSP(void)
S{
S  register uint32_t result;
S
S  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
S  return(result);
S}
S 
S
S/** \brief  Set Process Stack Pointer
S
S    This function assigns the given value to the Process Stack Pointer (PSP).
S
S    \param [in]    topOfProcStack  Process Stack Pointer value to set
S */
S__attribute__( ( always_inline ) ) static __INLINE void __set_PSP(uint32_t topOfProcStack)
S{
S  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) );
S}
S
S
S/** \brief  Get Main Stack Pointer
S
S    This function returns the current value of the Main Stack Pointer (MSP).
S
S    \return               MSP Register value
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_MSP(void)
S{
S  register uint32_t result;
S
S  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
S  return(result);
S}
S 
S
S/** \brief  Set Main Stack Pointer
S
S    This function assigns the given value to the Main Stack Pointer (MSP).
S
S    \param [in]    topOfMainStack  Main Stack Pointer value to set
S */
S__attribute__( ( always_inline ) ) static __INLINE void __set_MSP(uint32_t topOfMainStack)
S{
S  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) );
S}
S
S
S/** \brief  Get Priority Mask
S
S    This function returns the current state of the priority mask bit from the Priority Mask Register.
S
S    \return               Priority Mask value
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_PRIMASK(void)
S{
S  uint32_t result;
S
S  __ASM volatile ("MRS %0, primask" : "=r" (result) );
S  return(result);
S}
S
S
S/** \brief  Set Priority Mask
S
S    This function assigns the given value to the Priority Mask Register.
S
S    \param [in]    priMask  Priority Mask
S */
S__attribute__( ( always_inline ) ) static __INLINE void __set_PRIMASK(uint32_t priMask)
S{
S  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
S}
S 
S
S#if       (__CORTEX_M >= 0x03)
S
S/** \brief  Enable FIQ
S
S    This function enables FIQ interrupts by clearing the F-bit in the CPSR.
S    Can only be executed in Privileged modes.
S */
S__attribute__( ( always_inline ) ) static __INLINE void __enable_fault_irq(void)
S{
S  __ASM volatile ("cpsie f");
S}
S
S
S/** \brief  Disable FIQ
S
S    This function disables FIQ interrupts by setting the F-bit in the CPSR.
S    Can only be executed in Privileged modes.
S */
S__attribute__( ( always_inline ) ) static __INLINE void __disable_fault_irq(void)
S{
S  __ASM volatile ("cpsid f");
S}
S
S
S/** \brief  Get Base Priority
S
S    This function returns the current value of the Base Priority register.
S
S    \return               Base Priority register value
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_BASEPRI(void)
S{
S  uint32_t result;
S  
S  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
S  return(result);
S}
S
S
S/** \brief  Set Base Priority
S
S    This function assigns the given value to the Base Priority register.
S
S    \param [in]    basePri  Base Priority value to set
S */
S__attribute__( ( always_inline ) ) static __INLINE void __set_BASEPRI(uint32_t value)
S{
S  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
S}
S
S
S/** \brief  Get Fault Mask
S
S    This function returns the current value of the Fault Mask register.
S
S    \return               Fault Mask register value
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_FAULTMASK(void)
S{
S  uint32_t result;
S  
S  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
S  return(result);
S}
S
S
S/** \brief  Set Fault Mask
S
S    This function assigns the given value to the Fault Mask register.
S
S    \param [in]    faultMask  Fault Mask value to set
S */
S__attribute__( ( always_inline ) ) static __INLINE void __set_FAULTMASK(uint32_t faultMask)
S{
S  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
S}
S
S#endif /* (__CORTEX_M >= 0x03) */
S
S
S#if       (__CORTEX_M == 0x04)
S
S/** \brief  Get FPSCR
S
S    This function returns the current value of the Floating Point Status/Control register.
S
S    \return               Floating Point Status/Control register value
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_FPSCR(void)
S{
S#if (__FPU_PRESENT == 1)
S  uint32_t result;
S
S  __ASM volatile ("MRS %0, fpscr" : "=r" (result) );
S  return(result);
S#else
S   return(0);
S#endif
S}
S
S
S/** \brief  Set FPSCR
S
S    This function assigns the given value to the Floating Point Status/Control register.
S
S    \param [in]    fpscr  Floating Point Status/Control value to set
S */
S__attribute__( ( always_inline ) ) static __INLINE void __set_FPSCR(uint32_t fpscr)
S{
S#if (__FPU_PRESENT == 1)
S  __ASM volatile ("MSR fpscr, %0" : : "r" (fpscr) );
S#endif
S}
S
S#endif /* (__CORTEX_M == 0x04) */
S
S
S#elif (defined (__TASKING__)) /*--------------- TASKING Compiler -----------------*/
S/* TASKING carm specific functions */
S
S/*
S * The CMSIS functions have been implemented as intrinsics in the compiler.
S * Please use "carm -?i" to get an up to date list of all instrinsics,
S * Including the CMSIS ones.
S */
S
N#endif
N
N/*@} end of CMSIS_Core_RegAccFunctions */
N
N
N#endif /* __CORE_CMFUNC_H__ */
L 97 ".\Inc\core_cm0.h" 2
N
N#endif /* __CORE_CM0_H_GENERIC */
N
N
N#ifndef __CMSIS_GENERIC
N
N#ifndef __CORE_CM0_H_DEPENDANT
N#define __CORE_CM0_H_DEPENDANT
N
N/* IO definitions (access restrictions to peripheral registers) */
N#ifdef __cplusplus
S  #define     __I     volatile           /*!< defines 'read only' permissions                 */
N#else
N  #define     __I     volatile const     /*!< defines 'read only' permissions                 */
N#endif
N#define     __O     volatile             /*!< defines 'write only' permissions                */
N#define     __IO    volatile             /*!< defines 'read / write' permissions              */
N
N/*@} end of group CMSIS_core_definitions */
N
N
N
N/*******************************************************************************
N *                 Register Abstraction
N ******************************************************************************/
N/** \defgroup CMSIS_core_register CMSIS Core Register
N  Core Register contain:
N  - Core Register
N  - Core NVIC Register
N  - Core SCB Register
N  - Core SysTick Register
N  - Core Debug Register
N*/
N
N/** \ingroup  CMSIS_core_register   
N    \defgroup CMSIS_CORE CMSIS Core
N  Type definitions for the Cortex-M Core Registers
N  @{
N */
N
N/** \brief  Union type to access the Application Program Status Register (APSR).
N */
Ntypedef union
N{
N  struct
N  {
N#if (__CORTEX_M != 0x04)
X#if ((0x00) != 0x04)
N    uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
N#else
S    uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
S    uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
S    uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
N#endif
N    uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
N    uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
N    uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
N    uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
N    uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
N  } b;                                   /*!< Structure used for bit  access                  */
N  uint32_t w;                            /*!< Type      used for word access                  */ 
N} APSR_Type;
N
N
N/** \brief  Union type to access the Interrupt Program Status Register (IPSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
N    uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
N  } b;                                   /*!< Structure used for bit  access                  */
N  uint32_t w;                            /*!< Type      used for word access                  */
N} IPSR_Type;
N
N
N/** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
N#if (__CORTEX_M != 0x04)
X#if ((0x00) != 0x04)
N    uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
N#else
S    uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
S    uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
S    uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
N#endif
N    uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
N    uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
N    uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
N    uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
N    uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
N    uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
N    uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
N  } b;                                   /*!< Structure used for bit  access                  */
N  uint32_t w;                            /*!< Type      used for word access                  */
N} xPSR_Type;
N
N
N/** \brief  Union type to access the Control Registers (CONTROL).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
N    uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
N    uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
N    uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
N  } b;                                   /*!< Structure used for bit  access                  */
N  uint32_t w;                            /*!< Type      used for word access                  */
N} CONTROL_Type;
N
N/*@} end of group CMSIS_CORE */
N
N
N/** \ingroup  CMSIS_core_register   
N    \defgroup CMSIS_NVIC CMSIS NVIC
N  Type definitions for the Cortex-M NVIC Registers
N  @{
N */
N
N/** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
N */
Ntypedef struct
N{
N  __IO uint32_t ISER[1];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register           */
X  volatile uint32_t ISER[1];                  
N       uint32_t RESERVED0[31];
N  __IO uint32_t ICER[1];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register          */
X  volatile uint32_t ICER[1];                  
N       uint32_t RSERVED1[31];
N  __IO uint32_t ISPR[1];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register           */
X  volatile uint32_t ISPR[1];                  
N       uint32_t RESERVED2[31];
N  __IO uint32_t ICPR[1];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register         */
X  volatile uint32_t ICPR[1];                  
N       uint32_t RESERVED3[31];
N       uint32_t RESERVED4[64];
N  __IO uint32_t IPR[8];                  /*!< Offset: 0x3EC (R/W)  Interrupt Priority Register              */
X  volatile uint32_t IPR[8];                   
N}  NVIC_Type;
N
N/*@} end of group CMSIS_NVIC */
N
N
N/** \ingroup  CMSIS_core_register   
N    \defgroup CMSIS_SCB CMSIS SCB
N  Type definitions for the Cortex-M System Control Block Registers
N  @{
N */
N
N/** \brief  Structure type to access the System Control Block (SCB).
N */
Ntypedef struct
N{
N  __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPU ID Base Register                                  */
X  volatile const  uint32_t CPUID;                    
N  __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control State Register                      */
X  volatile uint32_t ICSR;                     
N       uint32_t RESERVED0;                                      
N  __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt / Reset Control Register        */
X  volatile uint32_t AIRCR;                    
N  __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register                               */
X  volatile uint32_t SCR;                      
N  __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register                        */
X  volatile uint32_t CCR;                      
N       uint32_t RESERVED1;                                      
N  __IO uint32_t SHP[2];                  /*!< Offset: 0x01C (R/W)  System Handlers Priority Registers. [0] is RESERVED   */
X  volatile uint32_t SHP[2];                   
N  __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State Register             */
X  volatile uint32_t SHCSR;                    
N       uint32_t RESERVED2[2];                                   
N  __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register                           */
X  volatile uint32_t DFSR;                     
N} SCB_Type;                                                
N
N/* SCB CPUID Register Definitions */
N#define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB CPUID: IMPLEMENTER Position */
N#define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB CPUID: IMPLEMENTER Mask */
N
N#define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB CPUID: VARIANT Position */
N#define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB CPUID: VARIANT Mask */
N
N#define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB CPUID: ARCHITECTURE Position */
N#define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB CPUID: ARCHITECTURE Mask */
N
N#define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB CPUID: PARTNO Position */
N#define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB CPUID: PARTNO Mask */
N
N#define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB CPUID: REVISION Position */
N#define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB CPUID: REVISION Mask */
N
N/* SCB Interrupt Control State Register Definitions */
N#define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB ICSR: NMIPENDSET Position */
N#define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB ICSR: NMIPENDSET Mask */
N
N#define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB ICSR: PENDSVSET Position */
N#define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB ICSR: PENDSVSET Mask */
N
N#define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB ICSR: PENDSVCLR Position */
N#define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB ICSR: PENDSVCLR Mask */
N
N#define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB ICSR: PENDSTSET Position */
N#define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB ICSR: PENDSTSET Mask */
N
N#define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB ICSR: PENDSTCLR Position */
N#define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB ICSR: PENDSTCLR Mask */
N
N#define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB ICSR: ISRPREEMPT Position */
N#define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB ICSR: ISRPREEMPT Mask */
N
N#define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB ICSR: ISRPENDING Position */
N#define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB ICSR: ISRPENDING Mask */
N
N#define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB ICSR: VECTPENDING Position */
N#define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB ICSR: VECTPENDING Mask */
N
N#define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB ICSR: VECTACTIVE Position */
N#define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB ICSR: VECTACTIVE Mask */
N
N/* SCB Application Interrupt and Reset Control Register Definitions */
N#define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB AIRCR: VECTKEY Position */
N#define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB AIRCR: VECTKEY Mask */
N
N#define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB AIRCR: VECTKEYSTAT Position */
N#define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB AIRCR: VECTKEYSTAT Mask */
N
N#define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB AIRCR: ENDIANESS Position */
N#define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB AIRCR: ENDIANESS Mask */
N
N#define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB AIRCR: SYSRESETREQ Position */
N#define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB AIRCR: SYSRESETREQ Mask */
N
N#define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB AIRCR: VECTCLRACTIVE Position */
N#define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB AIRCR: VECTCLRACTIVE Mask */
N
N/* SCB System Control Register Definitions */
N#define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB SCR: SEVONPEND Position */
N#define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB SCR: SEVONPEND Mask */
N
N#define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB SCR: SLEEPDEEP Position */
N#define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB SCR: SLEEPDEEP Mask */
N
N#define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB SCR: SLEEPONEXIT Position */
N#define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB SCR: SLEEPONEXIT Mask */
N
N/* SCB Configuration Control Register Definitions */
N#define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB CCR: STKALIGN Position */
N#define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB CCR: STKALIGN Mask */
N
N#define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB CCR: UNALIGN_TRP Position */
N#define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB CCR: UNALIGN_TRP Mask */
N
N/* SCB System Handler Control and State Register Definitions */
N#define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB SHCSR: SVCALLPENDED Position */
N#define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB SHCSR: SVCALLPENDED Mask */
N
N/* SCB Debug Fault Status Register Definitions */
N#define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB DFSR: EXTERNAL Position */
N#define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB DFSR: EXTERNAL Mask */
N
N#define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB DFSR: VCATCH Position */
N#define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB DFSR: VCATCH Mask */
N
N#define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB DFSR: DWTTRAP Position */
N#define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB DFSR: DWTTRAP Mask */
N
N#define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB DFSR: BKPT Position */
N#define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB DFSR: BKPT Mask */
N
N#define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB DFSR: HALTED Position */
N#define SCB_DFSR_HALTED_Msk                (1UL << SCB_DFSR_HALTED_Pos)                   /*!< SCB DFSR: HALTED Mask */
N
N/*@} end of group CMSIS_SCB */
N
N
N/** \ingroup  CMSIS_core_register   
N    \defgroup CMSIS_SysTick CMSIS SysTick
N  Type definitions for the Cortex-M System Timer Registers
N  @{
N */
N
N/** \brief  Structure type to access the System Timer (SysTick).
N */
Ntypedef struct
N{
N  __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Register */
X  volatile uint32_t CTRL;                     
N  __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register       */
X  volatile uint32_t LOAD;                     
N  __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register      */
X  volatile uint32_t VAL;                      
N  __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register        */
X  volatile const  uint32_t CALIB;                    
N} SysTick_Type;
N
N/* SysTick Control / Status Register Definitions */
N#define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysTick CTRL: COUNTFLAG Position */
N#define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysTick CTRL: COUNTFLAG Mask */
N
N#define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysTick CTRL: CLKSOURCE Position */
N#define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysTick CTRL: CLKSOURCE Mask */
N
N#define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysTick CTRL: TICKINT Position */
N#define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysTick CTRL: TICKINT Mask */
N
N#define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysTick CTRL: ENABLE Position */
N#define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysTick CTRL: ENABLE Mask */
N
N/* SysTick Reload Register Definitions */
N#define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysTick LOAD: RELOAD Position */
N#define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysTick LOAD: RELOAD Mask */
N
N/* SysTick Current Register Definitions */
N#define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysTick VAL: CURRENT Position */
N#define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysTick VAL: CURRENT Mask */
N
N/* SysTick Calibration Register Definitions */
N#define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysTick CALIB: NOREF Position */
N#define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysTick CALIB: NOREF Mask */
N
N#define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysTick CALIB: SKEW Position */
N#define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysTick CALIB: SKEW Mask */
N
N#define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysTick CALIB: TENMS Position */
N#define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysTick CALIB: TENMS Mask */
N
N/*@} end of group CMSIS_SysTick */
N
N
N/** \ingroup  CMSIS_core_register   
N    \defgroup CMSIS_CoreDebug CMSIS Core Debug
N  Type definitions for the Cortex-M Core Debug Registers
N  @{
N */
N
N/** \brief  Structure type to access the Core Debug Register (CoreDebug).
N */
Ntypedef struct
N{
N  __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status Register    */
X  volatile uint32_t DHCSR;                    
N  __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Register        */
X  volatile  uint32_t DCRSR;                    
N  __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Register            */
X  volatile uint32_t DCRDR;                    
N  __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Control Register */
X  volatile uint32_t DEMCR;                    
N} CoreDebug_Type;
N
N/* Debug Halting Control and Status Register */
N#define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< CoreDebug DHCSR: DBGKEY Position */
N#define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< CoreDebug DHCSR: DBGKEY Mask */
N
N#define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< CoreDebug DHCSR: S_RESET_ST Position */
N#define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< CoreDebug DHCSR: S_RESET_ST Mask */
N
N#define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< CoreDebug DHCSR: S_RETIRE_ST Position */
N#define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< CoreDebug DHCSR: S_RETIRE_ST Mask */
N
N#define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< CoreDebug DHCSR: S_LOCKUP Position */
N#define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< CoreDebug DHCSR: S_LOCKUP Mask */
N
N#define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< CoreDebug DHCSR: S_SLEEP Position */
N#define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< CoreDebug DHCSR: S_SLEEP Mask */
N
N#define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< CoreDebug DHCSR: S_HALT Position */
N#define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< CoreDebug DHCSR: S_HALT Mask */
N
N#define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< CoreDebug DHCSR: S_REGRDY Position */
N#define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< CoreDebug DHCSR: S_REGRDY Mask */
N
N#define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< CoreDebug DHCSR: C_MASKINTS Position */
N#define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< CoreDebug DHCSR: C_MASKINTS Mask */
N
N#define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< CoreDebug DHCSR: C_STEP Position */
N#define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< CoreDebug DHCSR: C_STEP Mask */
N
N#define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< CoreDebug DHCSR: C_HALT Position */
N#define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< CoreDebug DHCSR: C_HALT Mask */
N
N#define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< CoreDebug DHCSR: C_DEBUGEN Position */
N#define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< CoreDebug DHCSR: C_DEBUGEN Mask */
N
N/* Debug Core Register Selector Register */
N#define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< CoreDebug DCRSR: REGWnR Position */
N#define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< CoreDebug DCRSR: REGWnR Mask */
N
N#define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< CoreDebug DCRSR: REGSEL Position */
N#define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL << CoreDebug_DCRSR_REGSEL_Pos)         /*!< CoreDebug DCRSR: REGSEL Mask */
N
N/* Debug Exception and Monitor Control Register */
N#define CoreDebug_DEMCR_DWTENA_Pos         24                                             /*!< CoreDebug DEMCR: DWTENA Position */
N#define CoreDebug_DEMCR_DWTENA_Msk         (1UL << CoreDebug_DEMCR_DWTENA_Pos)            /*!< CoreDebug DEMCR: DWTENA Mask */
N
N#define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< CoreDebug DEMCR: VC_HARDERR Position */
N#define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< CoreDebug DEMCR: VC_HARDERR Mask */
N
N#define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< CoreDebug DEMCR: VC_CORERESET Position */
N#define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< CoreDebug DEMCR: VC_CORERESET Mask */
N
N/*@} end of group CMSIS_CoreDebug */
N
N
N/** \ingroup  CMSIS_core_register   
N  @{
N */
N 
N/* Memory mapping of Cortex-M0 Hardware */
N#define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Base Address */
N#define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address           */
N#define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address              */
N#define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address                 */
N#define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Base Address */
N
N#define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct          */
N#define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration struct      */
N#define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struct         */
N#define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration struct   */
N
N/*@} */
N
N
N
N/*******************************************************************************
N *                Hardware Abstraction Layer
N ******************************************************************************/
N/** \defgroup CMSIS_Core_FunctionInterface CMSIS Core Function Interface
N  Core Function Interface contains:
N  - Core NVIC Functions
N  - Core SysTick Functions
N  - Core Register Access Functions
N*/
N
N
N
N/* ##########################   NVIC functions  #################################### */
N/** \ingroup  CMSIS_Core_FunctionInterface   
N    \defgroup CMSIS_Core_NVICFunctions CMSIS Core NVIC Functions
N  @{
N */
N
N/* Interrupt Priorities are WORD accessible only under ARMv6M                   */
N/* The following MACROS handle generation of the register offset and byte masks */
N#define _BIT_SHIFT(IRQn)         (  (((uint32_t)(IRQn)       )    &  0x03) * 8 )
N#define _SHP_IDX(IRQn)           ( ((((uint32_t)(IRQn) & 0x0F)-8) >>    2)     )
N#define _IP_IDX(IRQn)            (   ((uint32_t)(IRQn)            >>    2)     )
N
N
N/** \brief  Enable External Interrupt
N
N    This function enables a device specific interupt in the NVIC interrupt controller.
N    The interrupt number cannot be a negative value. 
N
N    \param [in]      IRQn  Number of the external interrupt to enable
N */
Nstatic __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_EnableIRQ(IRQn_Type IRQn)
N{
N  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
X  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL))->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
N}
N
N
N/** \brief  Disable External Interrupt
N
N    This function disables a device specific interupt in the NVIC interrupt controller.
N    The interrupt number cannot be a negative value. 
N
N    \param [in]      IRQn  Number of the external interrupt to disable
N */
Nstatic __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_DisableIRQ(IRQn_Type IRQn)
N{
N  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
X  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL))->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
N}
N
N
N/** \brief  Get Pending Interrupt
N
N    This function reads the pending register in the NVIC and returns the pending bit
N    for the specified interrupt. 
N
N    \param [in]      IRQn  Number of the interrupt for get pending
N    \return             0  Interrupt status is not pending
N    \return             1  Interrupt status is pending
N */
Nstatic __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
Xstatic __inline uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
N{
N  return((uint32_t) ((NVIC->ISPR[0] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));
X  return((uint32_t) ((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL))->ISPR[0] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));
N}
N
N
N/** \brief  Set Pending Interrupt
N
N    This function sets the pending bit for the specified interrupt. 
N    The interrupt number cannot be a negative value.
N
N    \param [in]      IRQn  Number of the interrupt for set pending
N */
Nstatic __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_SetPendingIRQ(IRQn_Type IRQn)
N{
N  NVIC->ISPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
X  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL))->ISPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
N}
N
N
N/** \brief  Clear Pending Interrupt
N
N    This function clears the pending bit for the specified interrupt. 
N    The interrupt number cannot be a negative value.
N
N    \param [in]      IRQn  Number of the interrupt for clear pending
N */
Nstatic __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
N{
N  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
X  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL))->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F));  
N}
N
N
N/** \brief  Set Interrupt Priority
N
N    This function sets the priority for the specified interrupt. The interrupt 
N    number can be positive to specify an external (device specific) 
N    interrupt, or negative to specify an internal (core) interrupt.
N
N    Note: The priority cannot be set for every core interrupt.
N
N    \param [in]      IRQn  Number of the interrupt for set priority
N    \param [in]  priority  Priority to set
N */
Nstatic __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
Xstatic __inline void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
N{
N  if(IRQn < 0) {
N    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) | 
X    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL))->SHP[( ((((uint32_t)(IRQn) & 0x0F)-8) >> 2) )] = (((SCB_Type *) ((0xE000E000UL) + 0x0D00UL))->SHP[( ((((uint32_t)(IRQn) & 0x0F)-8) >> 2) )] & ~(0xFF << ( (((uint32_t)(IRQn) ) & 0x03) * 8 ))) | 
N        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
X        (((priority << (8 - 3)) & 0xFF) << ( (((uint32_t)(IRQn) ) & 0x03) * 8 )); }
N  else {
N    NVIC->IPR[_IP_IDX(IRQn)] = (NVIC->IPR[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL))->IPR[( ((uint32_t)(IRQn) >> 2) )] = (((NVIC_Type *) ((0xE000E000UL) + 0x0100UL))->IPR[( ((uint32_t)(IRQn) >> 2) )] & ~(0xFF << ( (((uint32_t)(IRQn) ) & 0x03) * 8 ))) |
N        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
X        (((priority << (8 - 3)) & 0xFF) << ( (((uint32_t)(IRQn) ) & 0x03) * 8 )); }
N}
N
N
N/** \brief  Get Interrupt Priority
N
N    This function reads the priority for the specified interrupt. The interrupt 
N    number can be positive to specify an external (device specific) 
N    interrupt, or negative to specify an internal (core) interrupt.
N
N    The returned priority value is automatically aligned to the implemented
N    priority bits of the microcontroller.
N
N    \param [in]   IRQn  Number of the interrupt for get priority
N    \return             Interrupt Priority
N */
Nstatic __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
Xstatic __inline uint32_t NVIC_GetPriority(IRQn_Type IRQn)
N{
N
N  if(IRQn < 0) {
N    return((uint32_t)((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS)));  } /* get priority for Cortex-M0 system interrupts */
X    return((uint32_t)((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL))->SHP[( ((((uint32_t)(IRQn) & 0x0F)-8) >> 2) )] >> ( (((uint32_t)(IRQn) ) & 0x03) * 8 ) ) >> (8 - 3)));  }  
N  else {
N    return((uint32_t)((NVIC->IPR[_IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS)));  } /* get priority for device specific interrupts  */
X    return((uint32_t)((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL))->IPR[( ((uint32_t)(IRQn) >> 2) )] >> ( (((uint32_t)(IRQn) ) & 0x03) * 8 ) ) >> (8 - 3)));  }  
N}
N
N
N/** \brief  System Reset
N
N    This function initiate a system reset request to reset the MCU.
N */
Nstatic __INLINE void NVIC_SystemReset(void)
Xstatic __inline void NVIC_SystemReset(void)
N{
N  __DSB();                                                     /* Ensure all outstanding memory accesses included
X  __dsb(0xF);                                                     
N                                                                  buffered write are completed before reset */              
N  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      | 
X  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL))->AIRCR  = ((0x5FA << 16)      | 
N                 SCB_AIRCR_SYSRESETREQ_Msk);
X                 (1UL << 2));
N  __DSB();                                                     /* Ensure completion of memory access */              
X  __dsb(0xF);                                                                    
N  while(1);                                                    /* wait until reset */
N}
N
N/*@} end of CMSIS_Core_NVICFunctions */
N
N
N
N/* ##################################    SysTick function  ############################################ */
N/** \ingroup  CMSIS_Core_FunctionInterface   
N    \defgroup CMSIS_Core_SysTickFunctions CMSIS Core SysTick Functions
N  @{
N */
N
N#if (__Vendor_SysTickConfig == 0)
X#if (0 == 0)
N
N/** \brief  System Tick Configuration
N
N    This function initialises the system tick timer and its interrupt and start the system tick timer.
N    Counter is in free running mode to generate periodical interrupts.
N
N    \param [in]  ticks  Number of ticks between two interrupts
N    \return          0  Function succeeded
N    \return          1  Function failed
N */
Nstatic __INLINE uint32_t SysTick_Config(uint32_t ticks)
Xstatic __inline uint32_t SysTick_Config(uint32_t ticks)
N{ 
N  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
X  if (ticks > (0xFFFFFFUL << 0))  return (1);             
N                                                               
N  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL))->LOAD  = (ticks & (0xFFFFFFUL << 0)) - 1;       
N  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
X  NVIC_SetPriority (SysTick_IRQn, (1<<3) - 1);   
N  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL))->VAL   = 0;                                           
N  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL))->CTRL  = (1UL << 2) | 
N                   SysTick_CTRL_TICKINT_Msk   | 
X                   (1UL << 1)   | 
N                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
X                   (1UL << 0);                     
N  return (0);                                                  /* Function successful */
N}
N
N#endif
N
N/*@} end of CMSIS_Core_SysTickFunctions */
N
N
N
N
N#endif /* __CORE_CM0_H_DEPENDANT */
N
N#endif /* __CMSIS_GENERIC */
N
N#ifdef __cplusplus
S}
N#endif
N
N/*lint -restore */
L 100 ".\Inc\LPC11Uxx.h" 2
N#include "system_LPC11Uxx.h"                /*!< LPC11Uxx System                       */
L 1 ".\Inc\system_LPC11Uxx.h" 1
N/**************************************************************************//**
N * @file     system_LPC11Uxx.h
N * @brief    CMSIS Cortex-M0 Device Peripheral Access Layer Header File
N *           for the NXP LPC11Uxx Device Series
N * @version  V1.10
N * @date     24. November 2010
N *
N * @note
N * Copyright (C) 2009-2010 ARM Limited. All rights reserved.
N *
N * @par
N * ARM Limited (ARM) is supplying this software for use with Cortex-M 
N * processor based microcontrollers.  This file can be freely distributed 
N * within development tools that are supporting such ARM based processors. 
N *
N * @par
N * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
N * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
N * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
N * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
N *
N ******************************************************************************/
N
N
N#ifndef __SYSTEM_LPC11Uxx_H__
N#define __SYSTEM_LPC11Uxx_H__
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#include "Type.h"
L 1 ".\Inc\Type.h" 1
N/****************************************************************************
N *   $Id:: type.h 6172 2011-01-13 18:22:51Z usb00423                        $
N *   Project: NXP LPC11xx software example
N *
N *   Description:
N *     This file contains different type definition.
N *
N ****************************************************************************
N * Software that is described herein is for illustrative purposes only
N * which provides customers with programming information regarding the
N * products. This software is supplied "AS IS" without any warranties.
N * NXP Semiconductors assumes no responsibility or liability for the
N * use of the software, conveys no license or title under any patent,
N * copyright, or mask work right to the product. NXP Semiconductors
N * reserves the right to make changes in the software without
N * notification. NXP Semiconductors also make no representation or
N * warranty that such application will be suitable for the specified
N * use without further testing or modification.
N****************************************************************************/
N#ifndef __TYPE_H__
N#define __TYPE_H__
N
N/* exact-width signed integer types */
Ntypedef signed char int8_t;
Ntypedef int8_t S8;
Ntypedef S8 RetS8;
Ntypedef signed short int int16_t;
Ntypedef int16_t S16;
Ntypedef S16 RetS16;
Ntypedef signed int int32_t;
Ntypedef int32_t S32;
Ntypedef S32 RetS32;
Ntypedef signed __int64 int64_t;
Ntypedef int64_t S64;
Ntypedef S64 RetS64;
N/*exact-width unsigned integer types */
Ntypedef unsigned char uint8_t;
Ntypedef uint8_t U8;
Ntypedef U8 RetU8;
Ntypedef unsigned short int uint16_t;
Ntypedef uint16_t U16;
Ntypedef U16 RetU16;
Ntypedef unsigned int uint32_t;
Ntypedef uint32_t U32;
Ntypedef U32 RetU32;
Ntypedef unsigned __int64 uint64_t;
Ntypedef uint64_t U64;
Ntypedef U64 RetU64;
N
Ntypedef U8 Boolean;
N
N// Dennis 16/5/2014
Ntypedef union
N{
N	U16 w;
N	U8 b[2];
N}u16;
N
Ntypedef union
N{
N	S16 w;
N	S8 b[2];
N}s16;
N
N#define BIT0 (1 << 0)
N#define BIT1 (1 << 1)
N#define BIT2 (1 << 2)
N#define BIT3 (1 << 3)
N#define BIT4 (1 << 4)
N#define BIT5 (1 << 5)
N#define BIT6 (1 << 6)
N#define BIT7 (1 << 7)
N#define BIT8 (1 << 8)
N#define BIT9 (1 << 9)
N#define BIT10 (1 << 10)
N#define BIT11 (1 << 11)
N#define BIT12 (1 << 12)
N#define BIT13 (1 << 13)
N#define BIT14 (1 << 14)
N#define BIT15 (1 << 15)
N#define BIT16 (1 << 16)
N#define BIT17 (1 << 17)
N#define BIT18 (1 << 18)
N#define BIT19 (1 << 19)
N#define BIT20 (1 << 20)
N#define BIT21 (1 << 21)
N#define BIT22 (1 << 22)
N#define BIT23 (1 << 23)
N#define BIT24 (1 << 24)
N#define BIT25 (1 << 25)
N#define BIT26 (1 << 26)
N#define BIT27 (1 << 27)
N#define BIT28 (1 << 28)
N#define BIT29 (1 << 29)
N#define BIT30 (1 << 30)
N#define BIT31 (1UL << 31)
N
N#ifndef NULL
N#define NULL ((void *)0)
N#endif
N
N#ifndef FALSE
N#define FALSE (0)
N#endif
N
N#ifndef TRUE
N#define TRUE (1)
N#endif
N
N#ifndef LOW
N#define LOW (0)
N#endif
N
N#ifndef HIGH
N#define HIGH (1)
N#endif
N
N#ifndef EMPTY
N#define EMPTY (0xFF)
N#endif
N
N#endif  /* __TYPE_H__ */
L 34 ".\Inc\system_LPC11Uxx.h" 2
N
N#ifdef  __SYSTEM_LPC11Uxx_C__
S#define INTERFACE
N#else
N#define INTERFACE extern
N#endif
N
N#define SYSOSCCTRL_Val 0x00000000/* Reset: 0x000*/
N#define WDTOSCCTRL_Val 0x00000000/*Reset: 0x000*/
N#define SYSPLLCTRL_Val 0x00000023/*eset: 0x000*/
N#define SYSPLLCLKSEL_Val 0x00000001/*Reset: 0x000*/
N#define MAINCLKSEL_Val 0x00000003/*Reset: 0x000*/
N#define SYSAHBCLKDIV_Val 0x00000001/*Reset: 0x001*/
N#define USBPLLCTRL_Val 0x00000023/*Reset: 0x000*/
N#define USBPLLCLKSEL_Val 0x00000001/*Reset: 0x000*/
N#define USBCLKSEL_Val 0x00000000/*Reset: 0x000*/
N#define USBCLKDIV_Val 0x00000001/*Reset: 0x001*/
N/*----------------------------------------------------------------------------
N  Define clocks
N *----------------------------------------------------------------------------*/
N#define __XTAL (12000000UL)/* Oscillator frequency*/
N#define __SYS_OSC_CLK (__XTAL)/* Main oscillator frequency*/
N/*----------------------------------------------------------------------------
N  Check the register settings
N *----------------------------------------------------------------------------*/
N
NINTERFACE U32 SystemCoreClock;/*!< System Clock Frequency (Core Clock)*/
Xextern U32 SystemCoreClock; 
N/**
N * Initialize the system
N *
N * @param  none
N * @return none
N *
N * @brief  Setup the microcontroller system.
N *         Initialize the System and update the SystemCoreClock variable.
N */
NINTERFACE void nsAPI_System_Init(void);
Xextern void nsAPI_System_Init(void);
N
N#undef INTERFACE
N#ifdef __cplusplus
S}
N#endif
N#endif /* __SYSTEM_LPC11Uxx_H */
L 101 ".\Inc\LPC11Uxx.h" 2
N
N/** @addtogroup Device_Peripheral_Registers
N  * @{
N  */
N
N
N// ------------------------------------------------------------------------------------------------
N// -----                                          I2C                                         -----
N// ------------------------------------------------------------------------------------------------
N
N
N/**
N  * @brief Product name title=UM10462 Chapter title=LPC11U1x I2C-bus controller Modification date=3/16/2011 Major revision=0 Minor revision=3  (I2C)
N  */
N
Ntypedef struct {                            /*!< (@ 0x40000000) I2C Structure          */
N  __IO uint32_t CONSET;                     /*!< (@ 0x40000000) I2C Control Set Register */
X  volatile uint32_t CONSET;                      
N  __I  uint32_t STAT;                       /*!< (@ 0x40000004) I2C Status Register */
X  volatile const  uint32_t STAT;                        
N  __IO uint32_t DAT;                        /*!< (@ 0x40000008) I2C Data Register.  */
X  volatile uint32_t DAT;                         
N  __IO uint32_t ADR0;                       /*!< (@ 0x4000000C) I2C Slave Address Register 0 */
X  volatile uint32_t ADR0;                        
N  __IO uint32_t SCLH;                       /*!< (@ 0x40000010) SCH Duty Cycle Register High Half Word */
X  volatile uint32_t SCLH;                        
N  __IO uint32_t SCLL;                       /*!< (@ 0x40000014) SCL Duty Cycle Register Low Half Word */
X  volatile uint32_t SCLL;                        
N  __IO uint32_t CONCLR;                     /*!< (@ 0x40000018) I2C Control Clear Register*/
X  volatile uint32_t CONCLR;                      
N  __IO uint32_t MMCTRL;                     /*!< (@ 0x4000001C) Monitor mode control register*/
X  volatile uint32_t MMCTRL;                      
N  __IO uint32_t ADR1;                       /*!< (@ 0x40000020) I2C Slave Address Register 1*/
X  volatile uint32_t ADR1;                        
N  __IO uint32_t ADR2;                       /*!< (@ 0x40000024) I2C Slave Address Register 2*/
X  volatile uint32_t ADR2;                        
N  __IO uint32_t ADR3;                       /*!< (@ 0x40000028) I2C Slave Address Register 3*/
X  volatile uint32_t ADR3;                        
N  __I  uint32_t DATA_BUFFER;                /*!< (@ 0x4000002C) Data buffer register */
X  volatile const  uint32_t DATA_BUFFER;                 
Nunion{
N  __IO uint32_t MASK[4];                    /*!< (@ 0x40000030) I2C Slave address mask register */
X  volatile uint32_t MASK[4];                     
N  struct{
N  __IO uint32_t MASK0;
X  volatile uint32_t MASK0;
N  __IO uint32_t MASK1;
X  volatile uint32_t MASK1;
N  __IO uint32_t MASK2;
X  volatile uint32_t MASK2;
N  __IO uint32_t MASK3;
X  volatile uint32_t MASK3;
N  };
N  };
N} LPC_I2C_Type;
N
N
N// ------------------------------------------------------------------------------------------------
N// -----                                         WWDT                                         -----
N// ------------------------------------------------------------------------------------------------
N
N
N/**
N  * @brief Product name title=UM10462 Chapter title=LPC11U1x Windowed Watchdog Timer (WWDT) Modification date=3/16/2011 Major revision=0 Minor revision=3  (WWDT)
N  */
N
Ntypedef struct {                            /*!< (@ 0x40004000) WWDT Structure         */
N  __IO uint32_t MOD;                        /*!< (@ 0x40004000) Watchdog mode register*/
X  volatile uint32_t MOD;                         
N  __IO uint32_t TC;                         /*!< (@ 0x40004004) Watchdog timer constant register */
X  volatile uint32_t TC;                          
N  __IO uint32_t FEED;                       /*!< (@ 0x40004008) Watchdog feed sequence register */
X  volatile uint32_t FEED;                        
N  __I  uint32_t TV;                         /*!< (@ 0x4000400C) Watchdog timer value register */
X  volatile const  uint32_t TV;                          
N  __IO uint32_t CLKSEL;                     /*!< (@ 0x40004010) Watchdog clock select register. */
X  volatile uint32_t CLKSEL;                      
N  __IO uint32_t WARNINT;                    /*!< (@ 0x40004014) Watchdog Warning Interrupt compare value. */
X  volatile uint32_t WARNINT;                     
N  __IO uint32_t WINDOW;                     /*!< (@ 0x40004018) Watchdog Window compare value. */
X  volatile uint32_t WINDOW;                      
N} LPC_WWDT_Type;
N
N
N// ------------------------------------------------------------------------------------------------
N// -----                                         USART                                        -----
N// ------------------------------------------------------------------------------------------------
N
N
N/**
N  * @brief Product name title=UM10462 Chapter title=LPC11U1x USART Modification date=3/16/2011 Major revision=0 Minor revision=3  (USART)
N  */
N
Ntypedef struct {                            /*!< (@ 0x40008000) USART Structure        */
N  
N  union {
N    __IO uint32_t DLL;                      /*!< (@ 0x40008000) Divisor Latch LSB. Least significant byte of the baud rate divisor value. The full divisor is used to generate a baud rate from the fractional rate divider. (DLAB=1) */
X    volatile uint32_t DLL;                       
N    __O  uint32_t THR;                      /*!< (@ 0x40008000) Transmit Holding Register. The next character to be transmitted is written here. (DLAB=0) */
X    volatile  uint32_t THR;                       
N    __I  uint32_t RBR;                      /*!< (@ 0x40008000) Receiver Buffer Register. Contains the next received character to be read. (DLAB=0) */
X    volatile const  uint32_t RBR;                       
N  };
N  
N  union {
N    __IO uint32_t IER;                      /*!< (@ 0x40008004) Interrupt Enable Register. Contains individual interrupt enable bits for the 7 potential USART interrupts. (DLAB=0) */
X    volatile uint32_t IER;                       
N    __IO uint32_t DLM;                      /*!< (@ 0x40008004) Divisor Latch MSB. Most significant byte of the baud rate divisor value. The full divisor is used to generate a baud rate from the fractional rate divider. (DLAB=1) */
X    volatile uint32_t DLM;                       
N  };
N  
N  union {
N    __O  uint32_t FCR;                      /*!< (@ 0x40008008) FIFO Control Register. Controls USART FIFO usage and modes. */
X    volatile  uint32_t FCR;                       
N    __I  uint32_t IIR;                      /*!< (@ 0x40008008) Interrupt ID Register. Identifies which interrupt(s) are pending. */
X    volatile const  uint32_t IIR;                       
N  };
N  __IO uint32_t LCR;                        /*!< (@ 0x4000800C) Line Control Register. Contains controls for frame formatting and break generation. */
X  volatile uint32_t LCR;                         
N  __IO uint32_t MCR;                        /*!< (@ 0x40008010) Modem Control Register. */
X  volatile uint32_t MCR;                         
N  __I  uint32_t LSR;                        /*!< (@ 0x40008014) Line Status Register. Contains flags for transmit and receive status, including line errors. */
X  volatile const  uint32_t LSR;                         
N  __I  uint32_t MSR;                        /*!< (@ 0x40008018) Modem Status Register. */
X  volatile const  uint32_t MSR;                         
N  __IO uint32_t SCR;                        /*!< (@ 0x4000801C) Scratch Pad Register. Eight-bit temporary storage for software. */
X  volatile uint32_t SCR;                         
N  __IO uint32_t ACR;                        /*!< (@ 0x40008020) Auto-baud Control Register. Contains controls for the auto-baud feature. */
X  volatile uint32_t ACR;                         
N  __IO uint32_t ICR;                        /*!< (@ 0x40008024) IrDA Control Register. Enables and configures the IrDA (remote control) mode. */
X  volatile uint32_t ICR;                         
N  __IO uint32_t FDR;                        /*!< (@ 0x40008028) Fractional Divider Register. Generates a clock input for the baud rate divider. */
X  volatile uint32_t FDR;                         
N  __IO uint32_t OSR;                        /*!< (@ 0x4000802C) Oversampling Register. Controls the degree of oversampling during each bit time. */
X  volatile uint32_t OSR;                         
N  __IO uint32_t TER;                        /*!< (@ 0x40008030) Transmit Enable Register. Turns off USART transmitter for use with software flow control. */
X  volatile uint32_t TER;                         
N  __I  uint32_t RESERVED0[3];
X  volatile const  uint32_t RESERVED0[3];
N  __IO uint32_t HDEN;                       /*!< (@ 0x40008040) Half duplex enable register. */
X  volatile uint32_t HDEN;                        
N  __I  uint32_t RESERVED1;
X  volatile const  uint32_t RESERVED1;
N  __IO uint32_t SCICTRL;                    /*!< (@ 0x40008048) Smart Card Interface Control register. Enables and configures the Smart Card Interface feature. */
X  volatile uint32_t SCICTRL;                     
N  __IO uint32_t RS485CTRL;                  /*!< (@ 0x4000804C) RS-485/EIA-485 Control. Contains controls to configure various aspects of RS-485/EIA-485 modes. */
X  volatile uint32_t RS485CTRL;                   
N  __IO uint32_t RS485ADRMATCH;              /*!< (@ 0x40008050) RS-485/EIA-485 address match. Contains the address match value for RS-485/EIA-485 mode. */
X  volatile uint32_t RS485ADRMATCH;               
N  __IO uint32_t RS485DLY;                   /*!< (@ 0x40008054) RS-485/EIA-485 direction control delay. */
X  volatile uint32_t RS485DLY;                    
N  __IO uint32_t SYNCCTRL; 
X  volatile uint32_t SYNCCTRL; 
N} LPC_USART_Type;
N
N
N// ------------------------------------------------------------------------------------------------
N// -----                                        Timer                                       -----
N// ------------------------------------------------------------------------------------------------
N
N
N/**
N  * @brief Product name title=UM10462 Chapter title=LPC11U1x 32-bitcounter/timers CT32B0/1 Modification date=3/16/2011 Major revision=0 Minor revision=3  
N  */
N
Ntypedef struct {                            /*!< (@ 0x40014000) CT32B0 Structure        */
N  __IO uint32_t IR;                         /*!< (@ 0x40014000) Interrupt Register      */
X  volatile uint32_t IR;                          
N  __IO uint32_t TCR;                        /*!< (@ 0x40014004) Timer Control Register  */
X  volatile uint32_t TCR;                         
N  __IO uint32_t TC;                         /*!< (@ 0x40014008) Timer Counter 		*/
X  volatile uint32_t TC;                          
N  __IO uint32_t PR;                         /*!< (@ 0x4001400C) Prescale Register  	*/
X  volatile uint32_t PR;                          
N  __IO uint32_t PC;                         /*!< (@ 0x40014010) Prescale Counter	 */
X  volatile uint32_t PC;                          
N  __IO uint32_t MCR;                        /*!< (@ 0x40014014) Match Control Register */
X  volatile uint32_t MCR;                         
N  union {
N  __IO uint32_t MR[4];                      /*!< (@ 0x40014018) Match Register */
X  volatile uint32_t MR[4];                       
N  struct{
N  __IO uint32_t MR0;                        /*!< (@ 0x40018018) Match Register. MR0 */
X  volatile uint32_t MR0;                         
N  __IO uint32_t MR1;                        /*!< (@ 0x4001801C) Match Register. MR1 */
X  volatile uint32_t MR1;                         
N  __IO uint32_t MR2;                        /*!< (@ 0x40018020) Match Register. MR2 */
X  volatile uint32_t MR2;                         
N  __IO uint32_t MR3;                        /*!< (@ 0x40018024) Match Register. MR3 */
X  volatile uint32_t MR3;                         
N  };
N  };
N  __IO uint32_t CCR;                        /*!< (@ 0x40014028) Capture Control Register */
X  volatile uint32_t CCR;                         
N  union{
N  __I  uint32_t CR[4];                      /*!< (@ 0x4001402C) Capture Register  */
X  volatile const  uint32_t CR[4];                       
N    struct{
N  __I  uint32_t CR0;			    /*!< (@ 0x4001802C) Capture Register. CR 0 */
X  volatile const  uint32_t CR0;			     
N  __I  uint32_t CR1;			    /*!< (@ 0x40018030) Capture Register. CR 1 */
X  volatile const  uint32_t CR1;			     
N  __I  uint32_t CR2;			    /*!< (@ 0x40018034) Capture Register. CR 2 */
X  volatile const  uint32_t CR2;			     
N  __I  uint32_t CR3;			    /*!< (@ 0x40018038) Capture Register. CR 3 */
X  volatile const  uint32_t CR3;			     
N  };
N  };
N__IO uint32_t EMR;                        /*!< (@ 0x4001403C) External Match Register */
Xvolatile uint32_t EMR;                         
N  __I  uint32_t RESERVED0[12];
X  volatile const  uint32_t RESERVED0[12];
N  __IO uint32_t CTCR;                       /*!< (@ 0x40014070) Count Control Register */
X  volatile uint32_t CTCR;                        
N  __IO uint32_t PWMC;                       /*!< (@ 0x40014074) PWM Control Register */
X  volatile uint32_t PWMC;                        
N} LPC_CTxxBx_Type;
N
N
N
N// ------------------------------------------------------------------------------------------------
N// -----                                          ADC                                         -----
N// ------------------------------------------------------------------------------------------------
N
N
N/**
N  * @brief Product name title=UM10462 Chapter title=LPC11U1x ADC Modification date=3/16/2011 Major revision=0 Minor revision=3  (ADC)
N  */
N
Ntypedef struct {                            /*!< (@ 0x4001C000) ADC Structure          */
N  __IO uint32_t CR;                         /*!< (@ 0x4001C000) A/D Control Register */
X  volatile uint32_t CR;                          
N  __IO uint32_t GDR;                        /*!< (@ 0x4001C004) A/D Global Data Register */
X  volatile uint32_t GDR;                         
N  __I  uint32_t RESERVED0[1];
X  volatile const  uint32_t RESERVED0[1];
N  __IO uint32_t INTEN;                      /*!< (@ 0x4001C00C) A/D Interrupt Enable Register */
X  volatile uint32_t INTEN;                       
N  union{
N  __I  uint32_t DR[8];                      /*!< (@ 0x4001C010) A/D Channel Data Register*/
X  volatile const  uint32_t DR[8];                       
N    struct{
N  __IO uint32_t DR0;                      	/*!< (@ 0x40020010) A/D Channel Data Register 0*/
X  volatile uint32_t DR0;                      	 
N  __IO uint32_t DR1;                      	/*!< (@ 0x40020014) A/D Channel Data Register 1*/
X  volatile uint32_t DR1;                      	 
N  __IO uint32_t DR2;                      	/*!< (@ 0x40020018) A/D Channel Data Register 2*/
X  volatile uint32_t DR2;                      	 
N  __IO uint32_t DR3;                      	/*!< (@ 0x4002001C) A/D Channel Data Register 3*/
X  volatile uint32_t DR3;                      	 
N  __IO uint32_t DR4;                      	/*!< (@ 0x40020020) A/D Channel Data Register 4*/
X  volatile uint32_t DR4;                      	 
N  __IO uint32_t DR5;                      	/*!< (@ 0x40020024) A/D Channel Data Register 5*/
X  volatile uint32_t DR5;                      	 
N  __IO uint32_t DR6;                      	/*!< (@ 0x40020028) A/D Channel Data Register 6*/
X  volatile uint32_t DR6;                      	 
N  __IO uint32_t DR7;                      	/*!< (@ 0x4002002C) A/D Channel Data Register 7*/
X  volatile uint32_t DR7;                      	 
N  };
N  };
N  __I  uint32_t STAT;                       /*!< (@ 0x4001C030) A/D Status Register.  */
X  volatile const  uint32_t STAT;                        
N} LPC_ADC_Type;
N
N
N// ------------------------------------------------------------------------------------------------
N// -----                                          PMU                                         -----
N// ------------------------------------------------------------------------------------------------
N
N
N/**
N  * @brief Product name title=UM10462 Chapter title=LPC11U1x Power Management Unit (PMU) Modification date=3/16/2011 Major revision=0 Minor revision=3  (PMU)
N  */
N
Ntypedef struct {                            /*!< (@ 0x40038000) PMU Structure          */
N  __IO uint32_t PCON;                       /*!< (@ 0x40038000) Power control register */
X  volatile uint32_t PCON;                        
N  union{
N  __IO uint32_t GPREG[4];                   /*!< (@ 0x40038004) General purpose register 0 */
X  volatile uint32_t GPREG[4];                    
N  struct{
N  __IO uint32_t GPREG0;                   	/*!< (@ 0x40038004) General purpose register 0 */
X  volatile uint32_t GPREG0;                   	 
N  __IO uint32_t GPREG1;                   	/*!< (@ 0x40038008) General purpose register 1 */
X  volatile uint32_t GPREG1;                   	 
N  __IO uint32_t GPREG2;                   	/*!< (@ 0x4003800C) General purpose register 2 */
X  volatile uint32_t GPREG2;                   	 
N  __IO uint32_t GPREG3;                   	/*!< (@ 0x40038010) General purpose register 3 */
X  volatile uint32_t GPREG3;                   	 
N  };
N  };
N} LPC_PMU_Type;
N
N
N// ------------------------------------------------------------------------------------------------
N// -----                                       FLASHCTRL                                      -----
N// ------------------------------------------------------------------------------------------------
N
N
N/**
N  * @brief Product name title=UM10462 Chapter title=LPC11U1x Flash programming firmware Modification date=3/17/2011 Major revision=0 Minor revision=3  (FLASHCTRL)
N  */
N
Ntypedef struct {                            /*!< (@ 0x4003C000) FLASHCTRL Structure    */
N  __I  uint32_t RESERVED0[4];
X  volatile const  uint32_t RESERVED0[4];
N  __IO uint32_t FLASHCFG;                   /*!< (@ 0x4003C010) Flash memory access time configuration register */
X  volatile uint32_t FLASHCFG;                    
N  __I  uint32_t RESERVED1[3];
X  volatile const  uint32_t RESERVED1[3];
N  __IO uint32_t FMSSTART;                   /*!< (@ 0x4003C020) Signature start address register */
X  volatile uint32_t FMSSTART;                    
N  __IO uint32_t FMSSTOP;                    /*!< (@ 0x4003C024) Signature stop-address register */
X  volatile uint32_t FMSSTOP;                     
N  __I  uint32_t RESERVED2[1];
X  volatile const  uint32_t RESERVED2[1];
N  __I  uint32_t FMSW0;                      /*!< (@ 0x4003C02C) Word 0 [31:0]          */
X  volatile const  uint32_t FMSW0;                       
N  __I  uint32_t FMSW1;                      /*!< (@ 0x4003C030) Word 1 [63:32]         */
X  volatile const  uint32_t FMSW1;                       
N  __I  uint32_t FMSW2;                      /*!< (@ 0x4003C034) Word 2 [95:64]         */
X  volatile const  uint32_t FMSW2;                       
N  __I  uint32_t FMSW3;                      /*!< (@ 0x4003C038) Word 3 [127:96]        */
X  volatile const  uint32_t FMSW3;                       
N  __I  uint32_t RESERVED3[1001];
X  volatile const  uint32_t RESERVED3[1001];
N  __I  uint32_t FMSTAT;                     /*!< (@ 0x4003CFE0) Signature generation status register */
X  volatile const  uint32_t FMSTAT;                      
N  __I  uint32_t RESERVED4[1];
X  volatile const  uint32_t RESERVED4[1];
N  __IO uint32_t FMSTATCLR;                  /*!< (@ 0x4003CFE8) Signature generation status clear register */
X  volatile uint32_t FMSTATCLR;                   
N} LPC_FLASHCTRL_Type;
N
N
N// ------------------------------------------------------------------------------------------------
N// -----                                         SSP0/1                                         -----
N// ------------------------------------------------------------------------------------------------
N
N
N/**
N  * @brief Product name title=UM10462 Chapter title=LPC11U1x SSP/SPI Modification date=3/16/2011 Major revision=0 Minor revision=3  (SSP0)
N  */
N
Ntypedef struct {                            /*!< (@ 0x40040000) SSP0 Structure         */
N  __IO uint32_t CR0;                        /*!< (@ 0x40040000) Control Register 0. Selects the serial clock rate, bus type, and data size. */
X  volatile uint32_t CR0;                         
N  __IO uint32_t CR1;                        /*!< (@ 0x40040004) Control Register 1. Selects master/slave and other modes. */
X  volatile uint32_t CR1;                         
N  __IO uint32_t DR;                         /*!< (@ 0x40040008) Data Register. Writes fill the transmit FIFO, and reads empty the receive FIFO. */
X  volatile uint32_t DR;                          
N  __I  uint32_t SR;                         /*!< (@ 0x4004000C) Status Register        */
X  volatile const  uint32_t SR;                          
N  __IO uint32_t CPSR;                       /*!< (@ 0x40040010) Clock Prescale Register */
X  volatile uint32_t CPSR;                        
N  __IO uint32_t IMSC;                       /*!< (@ 0x40040014) Interrupt Mask Set and Clear Register */
X  volatile uint32_t IMSC;                        
N  __I  uint32_t RIS;                        /*!< (@ 0x40040018) Raw Interrupt Status Register */
X  volatile const  uint32_t RIS;                         
N  __I  uint32_t MIS;                        /*!< (@ 0x4004001C) Masked Interrupt Status Register */
X  volatile const  uint32_t MIS;                         
N  __IO uint32_t ICR;                        /*!< (@ 0x40040020) SSPICR Interrupt Clear Register */
X  volatile uint32_t ICR;                         
N} LPC_SSPx_Type;
N
N
N
N// ------------------------------------------------------------------------------------------------
N// -----                                       IOCONFIG                                       -----
N// ------------------------------------------------------------------------------------------------
N
N
N/**
N  * @brief Product name title=UM10462 Chapter title=LPC11U1x I/O configuration Modification date=3/16/2011 Major revision=0 Minor revision=3  (IOCONFIG)
N  */
N
Ntypedef struct {                            /*!< (@ 0x40044000) IOCONFIG Structure     */
N  __IO uint32_t RESET_PIO0_0;               /*!< (@ 0x40044000) I/O configuration for pin RESET/PIO0_0 */
X  volatile uint32_t RESET_PIO0_0;                
N  __IO uint32_t PIO0_1;                     /*!< (@ 0x40044004) I/O configuration for pin PIO0_1/CLKOUT/CT32B0_MAT2/USB_FTOGGLE */
X  volatile uint32_t PIO0_1;                      
N  __IO uint32_t PIO0_2;                     /*!< (@ 0x40044008) I/O configuration for pin PIO0_2/SSEL0/CT16B0_CAP0 */
X  volatile uint32_t PIO0_2;                      
N  __IO uint32_t PIO0_3;                     /*!< (@ 0x4004400C) I/O configuration for pin PIO0_3/USB_VBUS */
X  volatile uint32_t PIO0_3;                      
N  __IO uint32_t PIO0_4;                     /*!< (@ 0x40044010) I/O configuration for pin PIO0_4/SCL */
X  volatile uint32_t PIO0_4;                      
N  __IO uint32_t PIO0_5;                     /*!< (@ 0x40044014) I/O configuration for pin PIO0_5/SDA */
X  volatile uint32_t PIO0_5;                      
N  __IO uint32_t PIO0_6;                     /*!< (@ 0x40044018) I/O configuration for pin PIO0_6/USB_CONNECT/SCK0 */
X  volatile uint32_t PIO0_6;                      
N  __IO uint32_t PIO0_7;                     /*!< (@ 0x4004401C) I/O configuration for pin PIO0_7/CTS */
X  volatile uint32_t PIO0_7;                      
N  __IO uint32_t PIO0_8;                     /*!< (@ 0x40044020) I/O configuration for pin PIO0_8/MISO0/CT16B0_MAT0 */
X  volatile uint32_t PIO0_8;                      
N  __IO uint32_t PIO0_9;                     /*!< (@ 0x40044024) I/O configuration for pin PIO0_9/MOSI0/CT16B0_MAT1 */
X  volatile uint32_t PIO0_9;                      
N  __IO uint32_t SWCLK_PIO0_10;              /*!< (@ 0x40044028) I/O configuration for pin SWCLK/PIO0_10/ SCK0/CT16B0_MAT2 */
X  volatile uint32_t SWCLK_PIO0_10;               
N  __IO uint32_t TDI_PIO0_11;                /*!< (@ 0x4004402C) I/O configuration for pin TDI/PIO0_11/AD0/CT32B0_MAT3 */
X  volatile uint32_t TDI_PIO0_11;                 
N  __IO uint32_t TMS_PIO0_12;                /*!< (@ 0x40044030) I/O configuration for pin TMS/PIO0_12/AD1/CT32B1_CAP0 */
X  volatile uint32_t TMS_PIO0_12;                 
N  __IO uint32_t TDO_PIO0_13;                /*!< (@ 0x40044034) I/O configuration for pin TDO/PIO0_13/AD2/CT32B1_MAT0 */
X  volatile uint32_t TDO_PIO0_13;                 
N  __IO uint32_t TRST_PIO0_14;               /*!< (@ 0x40044038) I/O configuration for pin TRST/PIO0_14/AD3/CT32B1_MAT1 */
X  volatile uint32_t TRST_PIO0_14;                
N  __IO uint32_t SWDIO_PIO0_15;              /*!< (@ 0x4004403C) I/O configuration for pin SWDIO/PIO0_15/AD4/CT32B1_MAT2 */
X  volatile uint32_t SWDIO_PIO0_15;               
N  __IO uint32_t PIO0_16;                    /*!< (@ 0x40044040) I/O configuration for pin PIO0_16/AD5/CT32B1_MAT3/ WAKEUP */
X  volatile uint32_t PIO0_16;                     
N  __IO uint32_t PIO0_17;                    /*!< (@ 0x40044044) I/O configuration for pin PIO0_17/RTS/CT32B0_CAP0/SCLK */
X  volatile uint32_t PIO0_17;                     
N  __IO uint32_t PIO0_18;                    /*!< (@ 0x40044048) I/O configuration for pin PIO0_18/RXD/CT32B0_MAT0 */
X  volatile uint32_t PIO0_18;                     
N  __IO uint32_t PIO0_19;                    /*!< (@ 0x4004404C) I/O configuration for pin PIO0_19/TXD/CT32B0_MAT1 */
X  volatile uint32_t PIO0_19;                     
N  __IO uint32_t PIO0_20;                    /*!< (@ 0x40044050) I/O configuration for pin PIO0_20/CT16B1_CAP0 */
X  volatile uint32_t PIO0_20;                     
N  __IO uint32_t PIO0_21;                    /*!< (@ 0x40044054) I/O configuration for pin PIO0_21/CT16B1_MAT0/MOSI1 */
X  volatile uint32_t PIO0_21;                     
N  __IO uint32_t PIO0_22;                    /*!< (@ 0x40044058) I/O configuration for pin PIO0_22/AD6/CT16B1_MAT1/MISO1 */
X  volatile uint32_t PIO0_22;                     
N  __IO uint32_t PIO0_23;                    /*!< (@ 0x4004405C) I/O configuration for pin PIO0_23/AD7 */
X  volatile uint32_t PIO0_23;                     
N  __IO uint32_t PIO1_0;                 /*!< Offset: 0x060 */
X  volatile uint32_t PIO1_0;                  
N  __IO uint32_t PIO1_1;         
X  volatile uint32_t PIO1_1;         
N  __IO uint32_t PIO1_2;       
X  volatile uint32_t PIO1_2;       
N  __IO uint32_t PIO1_3;      
X  volatile uint32_t PIO1_3;      
N  __IO uint32_t PIO1_4;                 /*!< Offset: 0x070 */
X  volatile uint32_t PIO1_4;                  
N  __IO uint32_t PIO1_5;                     /*!< (@ 0x40044074) I/O configuration for pin PIO1_5/CT32B1_CAP1 */
X  volatile uint32_t PIO1_5;                      
N  __IO uint32_t PIO1_6;     
X  volatile uint32_t PIO1_6;     
N  __IO uint32_t PIO1_7;       
X  volatile uint32_t PIO1_7;       
N  __IO uint32_t PIO1_8;                 /*!< Offset: 0x080 */
X  volatile uint32_t PIO1_8;                  
N  __IO uint32_t PIO1_9;        
X  volatile uint32_t PIO1_9;        
N  __IO uint32_t PIO1_10;        
X  volatile uint32_t PIO1_10;        
N  __IO uint32_t PIO1_11;       
X  volatile uint32_t PIO1_11;       
N  __IO uint32_t PIO1_12;                /*!< Offset: 0x090 */
X  volatile uint32_t PIO1_12;                 
N  __IO uint32_t PIO1_13;                    /*!< (@ 0x40044094) I/O configuration for pin PIO1_13/DTR/CT16B0_MAT0/TXD */
X  volatile uint32_t PIO1_13;                     
N  __IO uint32_t PIO1_14;                    /*!< (@ 0x40044098) I/O configuration for pin PIO1_14/DSR/CT16B0_MAT1/RXD */
X  volatile uint32_t PIO1_14;                     
N  __IO uint32_t PIO1_15;                    /*!< (@ 0x4004409C) I/O configuration for pin PIO1_15/DCD/ CT16B0_MAT2/SCK1 */
X  volatile uint32_t PIO1_15;                     
N  __IO uint32_t PIO1_16;                    /*!< (@ 0x400440A0) I/O configuration for pin PIO1_16/RI/CT16B0_CAP0 */
X  volatile uint32_t PIO1_16;                     
N  __IO uint32_t PIO1_17;
X  volatile uint32_t PIO1_17;
N  __IO uint32_t PIO1_18;
X  volatile uint32_t PIO1_18;
N  __IO uint32_t PIO1_19;                    /*!< (@ 0x400440AC) I/O configuration for pin PIO1_19/DTR/SSEL1 */
X  volatile uint32_t PIO1_19;                     
N  __IO uint32_t PIO1_20;                    /*!< (@ 0x400440B0) I/O configuration for pin PIO1_20/DSR/SCK1 */
X  volatile uint32_t PIO1_20;                     
N  __IO uint32_t PIO1_21;                    /*!< (@ 0x400440B4) I/O configuration for pin PIO1_21/DCD/MISO1 */
X  volatile uint32_t PIO1_21;                     
N  __IO uint32_t PIO1_22;                    /*!< (@ 0x400440B8) I/O configuration for pin PIO1_22/RI/MOSI1 */
X  volatile uint32_t PIO1_22;                     
N  __IO uint32_t PIO1_23;                    /*!< (@ 0x400440BC) I/O configuration for pin PIO1_23/CT16B1_MAT1/SSEL1 */
X  volatile uint32_t PIO1_23;                     
N  __IO uint32_t PIO1_24;                    /*!< (@ 0x400440C0) I/O configuration for pin PIO1_24/ CT32B0_MAT0 */
X  volatile uint32_t PIO1_24;                     
N  __IO uint32_t PIO1_25;                    /*!< (@ 0x400440C4) I/O configuration for pin PIO1_25/CT32B0_MAT1 */
X  volatile uint32_t PIO1_25;                     
N  __IO uint32_t PIO1_26;                    /*!< (@ 0x400440C8) I/O configuration for pin PIO1_26/CT32B0_MAT2/ RXD */
X  volatile uint32_t PIO1_26;                     
N  __IO uint32_t PIO1_27;                    /*!< (@ 0x400440CC) I/O configuration for pin PIO1_27/CT32B0_MAT3/ TXD */
X  volatile uint32_t PIO1_27;                     
N  __IO uint32_t PIO1_28;                    /*!< (@ 0x400440D0) I/O configuration for pin PIO1_28/CT32B0_CAP0/ SCLK */
X  volatile uint32_t PIO1_28;                     
N  __IO uint32_t PIO1_29;                    /*!< (@ 0x400440D4) I/O configuration for pin PIO1_29/SCK0/ CT32B0_CAP1 */
X  volatile uint32_t PIO1_29;                     
N  __IO uint32_t PIO1_30;
X  volatile uint32_t PIO1_30;
N  __IO uint32_t PIO1_31;                    /*!< (@ 0x400440DC) I/O configuration for pin PIO1_31 */
X  volatile uint32_t PIO1_31;                     
N} LPC_IOCON_Type;
N
N
N// ------------------------------------------------------------------------------------------------
N// -----                                        SYSCON                                        -----
N// ------------------------------------------------------------------------------------------------
N
N
N/**
N  * @brief Product name title=UM10462 Chapter title=LPC11U1x System control block Modification date=3/16/2011 Major revision=0 Minor revision=3  (SYSCON)
N  */
N
Ntypedef struct {                            /*!< (@ 0x40048000) SYSCON Structure       */
N  __IO uint32_t SYSMEMREMAP;                /*!< (@ 0x40048000) System memory remap    */
X  volatile uint32_t SYSMEMREMAP;                 
N  __IO uint32_t PRESETCTRL;                 /*!< (@ 0x40048004) Peripheral reset control */
X  volatile uint32_t PRESETCTRL;                  
N  __IO uint32_t SYSPLLCTRL;                 /*!< (@ 0x40048008) System PLL control     */
X  volatile uint32_t SYSPLLCTRL;                  
N  __I  uint32_t SYSPLLSTAT;                 /*!< (@ 0x4004800C) System PLL status      */
X  volatile const  uint32_t SYSPLLSTAT;                  
N  __IO uint32_t USBPLLCTRL;                 /*!< (@ 0x40048010) USB PLL control        */
X  volatile uint32_t USBPLLCTRL;                  
N  __I  uint32_t USBPLLSTAT;                 /*!< (@ 0x40048014) USB PLL status         */
X  volatile const  uint32_t USBPLLSTAT;                  
N  __I  uint32_t RESERVED0[2];
X  volatile const  uint32_t RESERVED0[2];
N  __IO uint32_t SYSOSCCTRL;                 /*!< (@ 0x40048020) System oscillator control */
X  volatile uint32_t SYSOSCCTRL;                  
N  __IO uint32_t WDTOSCCTRL;                 /*!< (@ 0x40048024) Watchdog oscillator control */
X  volatile uint32_t WDTOSCCTRL;                  
N  __I  uint32_t RESERVED1[2];
X  volatile const  uint32_t RESERVED1[2];
N  __IO uint32_t SYSRSTSTAT;                 /*!< (@ 0x40048030) System reset status register */
X  volatile uint32_t SYSRSTSTAT;                  
N  __I  uint32_t RESERVED2[3];
X  volatile const  uint32_t RESERVED2[3];
N  __IO uint32_t SYSPLLCLKSEL;               /*!< (@ 0x40048040) System PLL clock source select */
X  volatile uint32_t SYSPLLCLKSEL;                
N  __IO uint32_t SYSPLLCLKUEN;               /*!< (@ 0x40048044) System PLL clock source update enable */
X  volatile uint32_t SYSPLLCLKUEN;                
N  __IO uint32_t USBPLLCLKSEL;               /*!< (@ 0x40048048) USB PLL clock source select */
X  volatile uint32_t USBPLLCLKSEL;                
N  __IO uint32_t USBPLLCLKUEN;               /*!< (@ 0x4004804C) USB PLL clock source update enable */
X  volatile uint32_t USBPLLCLKUEN;                
N  __I  uint32_t RESERVED3[8];
X  volatile const  uint32_t RESERVED3[8];
N  __IO uint32_t MAINCLKSEL;                 /*!< (@ 0x40048070) Main clock source select */
X  volatile uint32_t MAINCLKSEL;                  
N  __IO uint32_t MAINCLKUEN;                 /*!< (@ 0x40048074) Main clock source update enable */
X  volatile uint32_t MAINCLKUEN;                  
N  __IO uint32_t SYSAHBCLKDIV;               /*!< (@ 0x40048078) System clock divider   */
X  volatile uint32_t SYSAHBCLKDIV;                
N  __I  uint32_t RESERVED4[1];
X  volatile const  uint32_t RESERVED4[1];
N  __IO uint32_t SYSAHBCLKCTRL;              /*!< (@ 0x40048080) System clock control   */
X  volatile uint32_t SYSAHBCLKCTRL;               
N  __I  uint32_t RESERVED5[4];
X  volatile const  uint32_t RESERVED5[4];
N  __IO uint32_t SSP0CLKDIV;                 /*!< (@ 0x40048094) SSP0 clock divider     */
X  volatile uint32_t SSP0CLKDIV;                  
N  __IO uint32_t UARTCLKDIV;                 /*!< (@ 0x40048098) UART clock divider     */
X  volatile uint32_t UARTCLKDIV;                  
N  __IO uint32_t SSP1CLKDIV;                 /*!< (@ 0x4004809C) SSP1 clock divider     */
X  volatile uint32_t SSP1CLKDIV;                  
N  __I  uint32_t RESERVED6[8];
X  volatile const  uint32_t RESERVED6[8];
N  __IO uint32_t USBCLKSEL;                  /*!< (@ 0x400480C0) USB clock source select */
X  volatile uint32_t USBCLKSEL;                   
N  __IO uint32_t USBCLKUEN;                  /*!< (@ 0x400480C4) USB clock source update enable */
X  volatile uint32_t USBCLKUEN;                   
N  __IO uint32_t USBCLKDIV;                  /*!< (@ 0x400480C8) USB clock source divider */
X  volatile uint32_t USBCLKDIV;                   
N  __I  uint32_t RESERVED7[5];
X  volatile const  uint32_t RESERVED7[5];
N  __IO uint32_t CLKOUTSEL;                  /*!< (@ 0x400480E0) CLKOUT clock source select */
X  volatile uint32_t CLKOUTSEL;                   
N  __IO uint32_t CLKOUTUEN;                  /*!< (@ 0x400480E4) CLKOUT clock source update enable */
X  volatile uint32_t CLKOUTUEN;                   
N  __IO uint32_t CLKOUTDIV;                  /*!< (@ 0x400480E8) CLKOUT clock divider   */
X  volatile uint32_t CLKOUTDIV;                   
N  __I  uint32_t RESERVED8[5];
X  volatile const  uint32_t RESERVED8[5];
N  __I  uint32_t PIOPORCAP0;                 /*!< (@ 0x40048100) POR captured PIO status 0 */
X  volatile const  uint32_t PIOPORCAP0;                  
N  __I  uint32_t PIOPORCAP1;                 /*!< (@ 0x40048104) POR captured PIO status 1 */
X  volatile const  uint32_t PIOPORCAP1;                  
N  __I  uint32_t RESERVED9[18];
X  volatile const  uint32_t RESERVED9[18];
N  __IO uint32_t BODCTRL;                    /*!< (@ 0x40048150) Brown-Out Detect       */
X  volatile uint32_t BODCTRL;                     
N  __IO uint32_t SYSTCKCAL;                  /*!< (@ 0x40048154) System tick counter calibration */
X  volatile uint32_t SYSTCKCAL;                   
N  __I  uint32_t RESERVED10[6];
X  volatile const  uint32_t RESERVED10[6];
N  __IO uint32_t IRQLATENCY;                 /*!< (@ 0x40048170) IQR delay */
X  volatile uint32_t IRQLATENCY;                  
N  __IO uint32_t NMISRC;                     /*!< (@ 0x40048174) NMI Source Control     */
X  volatile uint32_t NMISRC;                      
N  __IO uint32_t PINTSEL[8];                 /*!< (@ 0x40048178) GPIO Pin Interrupt Select register 0 */
X  volatile uint32_t PINTSEL[8];                  
N  __IO uint32_t USBCLKCTRL;                 /*!< (@ 0x40048198) USB clock control      */
X  volatile uint32_t USBCLKCTRL;                  
N  __I  uint32_t USBCLKST;                   /*!< (@ 0x4004819C) USB clock status       */
X  volatile const  uint32_t USBCLKST;                    
N  __I  uint32_t RESERVED11[25];
X  volatile const  uint32_t RESERVED11[25];
N  __IO uint32_t STARTERP0;                  /*!< (@ 0x40048204) Start logic 0 interrupt wake-up enable register 0 */
X  volatile uint32_t STARTERP0;                   
N  __I  uint32_t RESERVED12[3];
X  volatile const  uint32_t RESERVED12[3];
N  __IO uint32_t STARTERP1;                  /*!< (@ 0x40048214) Start logic 1 interrupt wake-up enable register 1 */
X  volatile uint32_t STARTERP1;                   
N  __I  uint32_t RESERVED13[6];
X  volatile const  uint32_t RESERVED13[6];
N  __IO uint32_t PDSLEEPCFG;                 /*!< (@ 0x40048230) Power-down states in deep-sleep mode */
X  volatile uint32_t PDSLEEPCFG;                  
N  __IO uint32_t PDAWAKECFG;                 /*!< (@ 0x40048234) Power-down states for wake-up from deep-sleep */
X  volatile uint32_t PDAWAKECFG;                  
N  __IO uint32_t PDRUNCFG;                   /*!< (@ 0x40048238) Power configuration register */
X  volatile uint32_t PDRUNCFG;                    
N  __I  uint32_t RESERVED14[110];
X  volatile const  uint32_t RESERVED14[110];
N  __I  uint32_t DEVICE_ID;                  /*!< (@ 0x400483F4) Device ID              */
X  volatile const  uint32_t DEVICE_ID;                   
N} LPC_SYSCON_Type;
N
N
N// ------------------------------------------------------------------------------------------------
N// -----                                     GPIO_PIN_INT                                     -----
N// ------------------------------------------------------------------------------------------------
N
N
N/**
N  * @brief Product name title=UM10462 Chapter title=LPC11U1x GPIO Modification date=3/17/2011 Major revision=0 Minor revision=3  (GPIO_PIN_INT)
N  */
N
Ntypedef struct {                            /*!< (@ 0x4004C000) GPIO_PIN_INT Structure */
N  __IO uint32_t ISEL;                       /*!< (@ 0x4004C000) Pin Interrupt Mode register */
X  volatile uint32_t ISEL;                        
N  __IO uint32_t IENR;                       /*!< (@ 0x4004C004) Pin Interrupt Enable (Rising) register */
X  volatile uint32_t IENR;                        
N  __IO uint32_t SIENR;                      /*!< (@ 0x4004C008) Set Pin Interrupt Enable (Rising) register */
X  volatile uint32_t SIENR;                       
N  __IO uint32_t CIENR;                      /*!< (@ 0x4004C00C) Clear Pin Interrupt Enable (Rising) register */
X  volatile uint32_t CIENR;                       
N  __IO uint32_t IENF;                       /*!< (@ 0x4004C010) Pin Interrupt Enable Falling Edge / Active Level register */
X  volatile uint32_t IENF;                        
N  __IO uint32_t SIENF;                      /*!< (@ 0x4004C014) Set Pin Interrupt Enable Falling Edge / Active Level register */
X  volatile uint32_t SIENF;                       
N  __IO uint32_t CIENF;                      /*!< (@ 0x4004C018) Clear Pin Interrupt Enable Falling Edge / Active Level address */
X  volatile uint32_t CIENF;                       
N  __IO uint32_t RISE;                       /*!< (@ 0x4004C01C) Pin Interrupt Rising Edge register */
X  volatile uint32_t RISE;                        
N  __IO uint32_t FALL;                       /*!< (@ 0x4004C020) Pin Interrupt Falling Edge register */
X  volatile uint32_t FALL;                        
N  __IO uint32_t IST;                        /*!< (@ 0x4004C024) Pin Interrupt Status register */
X  volatile uint32_t IST;                         
N} LPC_GPIO_PIN_INT_Type;
N
N
N// ------------------------------------------------------------------------------------------------
N// -----                                    GPIO_GROUP_INT0/1                                   -----
N// ------------------------------------------------------------------------------------------------
N
N
N/**
N  * @brief Product name title=UM10462 Chapter title=LPC11U1x GPIO Modification date=3/17/2011 Major revision=0 Minor revision=3  (GPIO_GROUP_INT0)
N  */
N
Ntypedef struct {                            /*!< (@ 0x4005C000) GPIO_GROUP_INT0 Structure */
N  __IO uint32_t CTRL;                       /*!< (@ 0x4005C000) GPIO grouped interrupt control register */
X  volatile uint32_t CTRL;                        
N  __I  uint32_t RESERVED0[7];
X  volatile const  uint32_t RESERVED0[7];
N  __IO uint32_t PORT_POL[2];                /*!< (@ 0x4005C020) GPIO grouped interrupt port 0 polarity register */
X  volatile uint32_t PORT_POL[2];                 
N  __I  uint32_t RESERVED1[6];
X  volatile const  uint32_t RESERVED1[6];
N  __IO uint32_t PORT_ENA[2];                /*!< (@ 0x4005C040) GPIO grouped interrupt port 0/1 enable register */
X  volatile uint32_t PORT_ENA[2];                 
N} LPC_GPIO_GROUP_INTx_Type;
N
N
N
N// ------------------------------------------------------------------------------------------------
N// -----                                          USB                                         -----
N// ------------------------------------------------------------------------------------------------
N
N
N/**
N  * @brief Product name title=UM10462 Chapter title=LPC11U1x USB2.0device controller Modification date=3/16/2011 Major revision=0 Minor revision=3  (USB)
N  */
N
Ntypedef struct {                            /*!< (@ 0x40080000) USB Structure          */
N  __IO uint32_t DEVCMDSTAT;                 /*!< (@ 0x40080000) USB Device Command/Status register */
X  volatile uint32_t DEVCMDSTAT;                  
N  __IO uint32_t INFO;                       /*!< (@ 0x40080004) USB Info register      */
X  volatile uint32_t INFO;                        
N  __IO uint32_t EPLISTSTART;                /*!< (@ 0x40080008) USB EP Command/Status List start address */
X  volatile uint32_t EPLISTSTART;                 
N  __IO uint32_t DATABUFSTART;               /*!< (@ 0x4008000C) USB Data buffer start address */
X  volatile uint32_t DATABUFSTART;                
N  __IO uint32_t LPM;                        /*!< (@ 0x40080010) Link Power Management register */
X  volatile uint32_t LPM;                         
N  __IO uint32_t EPSKIP;                     /*!< (@ 0x40080014) USB Endpoint skip      */
X  volatile uint32_t EPSKIP;                      
N  __IO uint32_t EPINUSE;                    /*!< (@ 0x40080018) USB Endpoint Buffer in use */
X  volatile uint32_t EPINUSE;                     
N  __IO uint32_t EPBUFCFG;                   /*!< (@ 0x4008001C) USB Endpoint Buffer Configuration register */
X  volatile uint32_t EPBUFCFG;                    
N  __IO uint32_t INTSTAT;                    /*!< (@ 0x40080020) USB interrupt status register */
X  volatile uint32_t INTSTAT;                     
N  __IO uint32_t INTEN;                      /*!< (@ 0x40080024) USB interrupt enable register */
X  volatile uint32_t INTEN;                       
N  __IO uint32_t INTSETSTAT;                 /*!< (@ 0x40080028) USB set interrupt status register */
X  volatile uint32_t INTSETSTAT;                  
N  __IO uint32_t INTROUTING;                 /*!< (@ 0x4008002C) USB interrupt routing register */
X  volatile uint32_t INTROUTING;                  
N  __I  uint32_t RESERVED0[1];
X  volatile const  uint32_t RESERVED0[1];
N  __I  uint32_t EPTOGGLE;                   /*!< (@ 0x40080034) USB Endpoint toggle register */
X  volatile const  uint32_t EPTOGGLE;                    
N} LPC_USB_Type;
N
N
N// ------------------------------------------------------------------------------------------------
N// -----                                       GPIO_PORT                                      -----
N// ------------------------------------------------------------------------------------------------
N
N
N/**
N  * @brief Product name title=UM10462 Chapter title=LPC11U1x GPIO Modification date=3/17/2011 Major revision=0 Minor revision=3  (GPIO_PORT)
N  */
N
Ntypedef struct {                            
N  union {
N    struct {
N      __IO uint8_t B0[32];                       /*!< (@ 0x50000000) Byte pin registers port 0; pins PIO0_0 to PIO0_31 */
X      volatile uint8_t B0[32];                        
N      __IO uint8_t B1[32];                       /*!< (@ 0x50000020) Byte pin registers port 1 */
X      volatile uint8_t B1[32];                        
N    };
N    __IO uint8_t B[64];                       /*!< (@ 0x50000000) Byte pin registers port 0/1 */
X    volatile uint8_t B[64];                        
N  };
N  __I  uint32_t RESERVED0[1008];
X  volatile const  uint32_t RESERVED0[1008];
N  union {
N    struct {
N      __IO uint32_t W0[32];                      /*!< (@ 0x50001000) Word pin registers port 0 */
X      volatile uint32_t W0[32];                       
N      __IO uint32_t W1[32];                      /*!< (@ 0x50001080) Word pin registers port 1 */
X      volatile uint32_t W1[32];                       
N    };
N    __IO uint32_t W[64];                       /*!< (@ 0x50001000) Word pin registers port 0/1 */
X    volatile uint32_t W[64];                        
N  };
N       uint32_t RESERVED1[960];
N  __IO uint32_t DIR[2];			/* 0x2000 */
X  volatile uint32_t DIR[2];			 
N       uint32_t RESERVED2[30];
N  __IO uint32_t MASK[2];		/* 0x2080 */
X  volatile uint32_t MASK[2];		 
N       uint32_t RESERVED3[30];
N  __IO uint32_t PIN[2];			/* 0x2100 */
X  volatile uint32_t PIN[2];			 
N       uint32_t RESERVED4[30];
N  __IO uint32_t MPIN[2];		/* 0x2180 */
X  volatile uint32_t MPIN[2];		 
N       uint32_t RESERVED5[30];
N  __IO uint32_t SET[2];			/* 0x2200 */
X  volatile uint32_t SET[2];			 
N       uint32_t RESERVED6[30];
N  __O  uint32_t CLR[2];			/* 0x2280 */
X  volatile  uint32_t CLR[2];			 
N       uint32_t RESERVED7[30];
N  __O  uint32_t NOT[2];			/* 0x2300 */
X  volatile  uint32_t NOT[2];			 
N} LPC_GPIO_Type;
N
N
N#if defined ( __CC_ARM   )
X#if 1L
N  #pragma no_anon_unions
N#endif
N
N
N// ------------------------------------------------------------------------------------------------
N// -----                                 Peripheral memory map                                -----
N// ------------------------------------------------------------------------------------------------
N
N#define LPC_I2C_BASE              (0x40000000)
N#define LPC_WWDT_BASE             (0x40004000)
N#define LPC_USART_BASE            (0x40008000)
N#define LPC_CT16B0_BASE           (0x4000C000)
N#define LPC_CT16B1_BASE           (0x40010000)
N#define LPC_CT32B0_BASE           (0x40014000)
N#define LPC_CT32B1_BASE           (0x40018000)
N#define LPC_ADC_BASE              (0x4001C000)
N#define LPC_PMU_BASE              (0x40038000)
N#define LPC_FLASHCTRL_BASE        (0x4003C000)
N#define LPC_SSP0_BASE             (0x40040000)
N#define LPC_SSP1_BASE             (0x40058000)
N#define LPC_IOCON_BASE            (0x40044000)
N#define LPC_SYSCON_BASE           (0x40048000)
N#define LPC_GPIO_PIN_INT_BASE     (0x4004C000)
N#define LPC_GPIO_GROUP_INT0_BASE  (0x4005C000)
N#define LPC_GPIO_GROUP_INT1_BASE  (0x40060000)
N#define LPC_USB_BASE              (0x40080000)
N#define LPC_GPIO_BASE             (0x50000000)
N
N
N// ------------------------------------------------------------------------------------------------
N// -----                                Peripheral declaration                                -----
N// ------------------------------------------------------------------------------------------------
N
N#define LPC_I2C                   ((LPC_I2C_Type            *) LPC_I2C_BASE)
N#define LPC_WWDT                  ((LPC_WWDT_Type           *) LPC_WWDT_BASE)
N#define LPC_USART                 ((LPC_USART_Type          *) LPC_USART_BASE)
N#define LPC_CT16B0                ((LPC_CTxxBx_Type         *) LPC_CT16B0_BASE)
N#define LPC_CT16B1                ((LPC_CTxxBx_Type         *) LPC_CT16B1_BASE)
N#define LPC_CT32B0                ((LPC_CTxxBx_Type         *) LPC_CT32B0_BASE)
N#define LPC_CT32B1                ((LPC_CTxxBx_Type         *) LPC_CT32B1_BASE)
N#define LPC_ADC                   ((LPC_ADC_Type            *) LPC_ADC_BASE)
N#define LPC_PMU                   ((LPC_PMU_Type            *) LPC_PMU_BASE)
N#define LPC_FLASHCTRL             ((LPC_FLASHCTRL_Type      *) LPC_FLASHCTRL_BASE)
N#define LPC_SSP0                  ((LPC_SSPx_Type           *) LPC_SSP0_BASE)
N#define LPC_SSP1                  ((LPC_SSPx_Type           *) LPC_SSP1_BASE)
N#define LPC_IOCON                 ((LPC_IOCON_Type          *) LPC_IOCON_BASE)
N#define LPC_SYSCON                ((LPC_SYSCON_Type         *) LPC_SYSCON_BASE)
N#define LPC_GPIO_PIN_INT          ((LPC_GPIO_PIN_INT_Type   *) LPC_GPIO_PIN_INT_BASE)
N#define LPC_GPIO_GROUP_INT0       ((LPC_GPIO_GROUP_INTx_Type*) LPC_GPIO_GROUP_INT0_BASE)
N#define LPC_GPIO_GROUP_INT1       ((LPC_GPIO_GROUP_INTx_Type*) LPC_GPIO_GROUP_INT1_BASE)
N#define LPC_USB                   ((LPC_USB_Type            *) LPC_USB_BASE)
N#define LPC_GPIO                  ((LPC_GPIO_Type           *) LPC_GPIO_BASE)
N
N
N/** @} */ /* End of group Device_Peripheral_Registers */
N/** @} */ /* End of group (null) */
N/** @} */ /* End of group LPC11Uxx */
N
N#ifdef __cplusplus
S}
N#endif
N#endif  // __LPC11UXX_H__
N
L 2 ".\Inc\Pixart_Sensor.h" 2
N#include "system_LPC11Uxx.h"
N#include "lpc11Uxx.h"          /* LPC11xx definitions */
N#include "type.h"
N#include "stdio.h"
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdio.h" 1
N/* stdio.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.9 */
N/* Copyright (C) Codemist Ltd., 1988-1993                       */
N/* Copyright 1991-1998 ARM Limited. All rights reserved.        */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: sdouglas $
N */
N
N/*
N * stdio.h declares two types, several macros, and many functions for
N * performing input and output. For a discussion on Streams and Files
N * refer to sections 4.9.2 and 4.9.3 in the above ANSI draft, or to a
N * modern textbook on C.
N */
N
N#ifndef __stdio_h
N#define __stdio_h
N#define __ARMCLIB_VERSION 5060044
N
N/*
N * Depending on compiler version __int64 or __INT64_TYPE__ should be defined.
N */
N#ifndef __int64
N  #ifdef __INT64_TYPE__
S    #define __int64 __INT64_TYPE__
N  #endif
N  /* On some architectures neither of these may be defined - if so, fall
N     through and error out if used. */
N#endif
N
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STDIO_DECLS
N  #define __STDIO_DECLS
N
N    #undef __CLIBNS
N    #ifdef __cplusplus
S      namespace std {
S      #define __CLIBNS ::std::
S        extern "C" {
N    #else /* ndef __cplusplus */
N      #define __CLIBNS
N    #endif /* ndef __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__) || !defined(__size_t)
X#if 0L || !0L || !0L
N /* always defined in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N  #if !defined(__cplusplus) && defined(__STRICT_ANSI__)
X  #if !0L && 0L
S    #define __size_t 1
N  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
N/* ANSI forbids va_list to be defined here */
N/* keep in step with <stdarg.h> and <wchar.h> */
N#if !defined(__va_list) && (defined(__cplusplus) || !defined(__STRICT_ANSI__) || !defined(__va_list_defined))
X#if !0L && (0L || !0L || !0L)
N/* always defined in C++ and non-strict C for consistency of debug info */
N  #ifdef __clang__
S    typedef __builtin_va_list __va_list;
N  #else
N    typedef struct __va_list __va_list;
N  #endif
N  #if !defined(__cplusplus) && defined(__STRICT_ANSI__)
X  #if !0L && 0L
S    #define __va_list_defined 1
N  #endif
N#endif
N
N   /*
N    * If the compiler supports signalling nans as per N965 then it
N    * will define __SUPPORT_SNAN__, in which case a user may define
N    * _WANT_SNAN in order to obtain compliant versions of the printf
N    * and scanf families of functions
N    */
N#if defined(__SUPPORT_SNAN__) && defined(_WANT_SNAN)
X#if 0L && 0L
S#pragma import(__use_snan)
N#endif
N
Ntypedef struct __fpos_t_struct {
N    unsigned __int64 __pos;
N    /*
N     * this structure is equivalent to an mbstate_t, but we're not
N     * allowed to actually define the type name `mbstate_t' within
N     * stdio.h
N     */
N    struct {
N        unsigned int __state1, __state2;
N    } __mbstate;
N} fpos_t;
N   /*
N    * fpos_t is an object capable of recording all information needed to
N    * specify uniquely every position within a file.
N    */
N
N#define _SYS_OPEN 16
N   /* _SYS_OPEN defines a limit on the number of open files that is imposed
N    * by this C library
N    */
N
Ntypedef struct __FILE FILE;
N   /*
N    * FILE is an object capable of recording all information needed to control
N    * a stream, such as its file position indicator, a pointer to its
N    * associated buffer, an error indicator that records whether a read/write
N    * error has occurred and an end-of-file indicator that records whether the
N    * end-of-file has been reached.
N    * Its structure is not made known to library clients.
N    */
N
N#if defined(__STRICT_ANSI__) && !__FILE_INCOMPLETE
X#if 0L && !__FILE_INCOMPLETE
Sstruct __FILE {
S    union {
S        long __FILE_alignment;
S#ifdef __TARGET_ARCH_AARCH64
S        char __FILE_size[136];
S#else /* __TARGET_ARCH_AARCH64 */
S        char __FILE_size[84];
S#endif /* __TARGET_ARCH_AARCH64 */
S    } __FILE_opaque;
S};
S    /*
S     * FILE must be an object type (C99 - 7.19.1) and an object type fully
S     * describes an object [including its static size] (C99 - 6.2.5).
S     * This definition is a placeholder which matches the struct __FILE in
S     * size and alignment as used internally by libc.
S     */
N#endif
N
N
Nextern FILE __stdin, __stdout, __stderr;
Nextern FILE *__aeabi_stdin, *__aeabi_stdout, *__aeabi_stderr;
N
N#if _AEABI_PORTABILITY_LEVEL != 0 || (!defined _AEABI_PORTABILITY_LEVEL && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
X#if _AEABI_PORTABILITY_LEVEL != 0 || (!0L && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
S#define stdin  (__CLIBNS __aeabi_stdin)
S   /* pointer to a FILE object associated with standard input stream */
S#define stdout (__CLIBNS __aeabi_stdout)
S   /* pointer to a FILE object associated with standard output stream */
S#define stderr (__CLIBNS __aeabi_stderr)
S   /* pointer to a FILE object associated with standard error stream */
Sextern const int __aeabi_IOFBF;
S#define _IOFBF (__CLIBNS __aeabi_IOFBF)
Sextern const int __aeabi_IONBF;
S#define _IONBF (__CLIBNS __aeabi_IONBF)
Sextern const int __aeabi_IOLBF;
S#define _IOLBF (__CLIBNS __aeabi_IOLBF)
Sextern const int __aeabi_BUFSIZ;
S#define BUFSIZ (__CLIBNS __aeabi_BUFSIZ)
Sextern const int __aeabi_FOPEN_MAX;
S#define FOPEN_MAX (__CLIBNS __aeabi_FOPEN_MAX)
Sextern const int __aeabi_TMP_MAX;
S#define TMP_MAX (__CLIBNS __aeabi_TMP_MAX)
Sextern const int __aeabi_FILENAME_MAX;
S#define FILENAME_MAX (__CLIBNS __aeabi_FILENAME_MAX)
Sextern const int __aeabi_L_tmpnam;
S#define L_tmpnam (__CLIBNS __aeabi_L_tmpnam)
N#else
N#define stdin  (&__CLIBNS __stdin)
N   /* pointer to a FILE object associated with standard input stream */
N#define stdout (&__CLIBNS __stdout)
N   /* pointer to a FILE object associated with standard output stream */
N#define stderr (&__CLIBNS __stderr)
N   /* pointer to a FILE object associated with standard error stream */
N
N#define _IOFBF           0x100 /* fully buffered IO */
N#define _IOLBF           0x200 /* line buffered IO */
N#define _IONBF           0x400 /* unbuffered IO */
N
N    /* Various default file IO buffer sizes */
N#define BUFSIZ       (512)  /* system buffer size (as used by setbuf) */
N
N#define FOPEN_MAX _SYS_OPEN
N   /*
N    * an integral constant expression that is the minimum number of files that
N    * this implementation guarantees can be open simultaneously.
N    */
N
N#define FILENAME_MAX 256
N   /*
N    * an integral constant expression that is the size of an array of char
N    * large enough to hold the longest filename string
N    */
N#define L_tmpnam FILENAME_MAX
N   /*
N    * an integral constant expression that is the size of an array of char
N    * large enough to hold a temporary file name string generated by the
N    * tmpnam function.
N    */
N#define TMP_MAX 256
N   /*
N    * an integral constant expression that is the minimum number of unique
N    * file names that shall be generated by the tmpnam function.
N    */
N
N#endif
N
N#define EOF      (-1)
N   /*
N    * negative integral constant, indicates end-of-file, that is, no more input
N    * from a stream.
N    */
N
N#define SEEK_SET 0 /* start of stream (see fseek) */
N#define SEEK_CUR 1 /* current position in stream (see fseek) */
N#define SEEK_END 2 /* end of stream (see fseek) */
N
N    /*
N     * _IOBIN is the flag passed to _sys_write to denote a binary
N     * file.
N     */
N#define _IOBIN            0x04     /* binary stream */
N
N#define __STDIN_BUFSIZ  (64)  /* default stdin buffer size */
N#define __STDOUT_BUFSIZ (64)  /* default stdout buffer size */
N#define __STDERR_BUFSIZ (16)  /* default stderr buffer size */
N
Nextern _ARMABI int remove(const char * /*filename*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int remove(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * causes the file whose name is the string pointed to by filename to be
N    * removed. Subsequent attempts to open the file will fail, unless it is
N    * created anew. If the file is open, the behaviour of the remove function
N    * is implementation-defined.
N    * Returns: zero if the operation succeeds, nonzero if it fails.
N    */
Nextern _ARMABI int rename(const char * /*old*/, const char * /*new*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int rename(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * causes the file whose name is the string pointed to by old to be
N    * henceforth known by the name given by the string pointed to by new. The
N    * file named old is effectively removed. If a file named by the string
N    * pointed to by new exists prior to the call of the rename function, the
N    * behaviour is implementation-defined.
N    * Returns: zero if the operation succeeds, nonzero if it fails, in which
N    *          case if the file existed previously it is still known by its
N    *          original name.
N    */
Nextern _ARMABI FILE *tmpfile(void);
Xextern __declspec(__nothrow) FILE *tmpfile(void);
N   /*
N    * creates a temporary binary file that will be automatically removed when
N    * it is closed or at program termination. The file is opened for update.
N    * Returns: a pointer to the stream of the file that it created. If the file
N    *          cannot be created, a null pointer is returned.
N    */
Nextern _ARMABI char *tmpnam(char * /*s*/);
Xextern __declspec(__nothrow) char *tmpnam(char *  );
N   /*
N    * generates a string that is not the same as the name of an existing file.
N    * The tmpnam function generates a different string each time it is called,
N    * up to TMP_MAX times. If it is called more than TMP_MAX times, the
N    * behaviour is implementation-defined.
N    * Returns: If the argument is a null pointer, the tmpnam function leaves
N    *          its result in an internal static object and returns a pointer to
N    *          that object. Subsequent calls to the tmpnam function may modify
N    *          the same object. if the argument is not a null pointer, it is
N    *          assumed to point to an array of at least L_tmpnam characters;
N    *          the tmpnam function writes its result in that array and returns
N    *          the argument as its value.
N    */
N
Nextern _ARMABI int fclose(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fclose(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * causes the stream pointed to by stream to be flushed and the associated
N    * file to be closed. Any unwritten buffered data for the stream are
N    * delivered to the host environment to be written to the file; any unread
N    * buffered data are discarded. The stream is disassociated from the file.
N    * If the associated buffer was automatically allocated, it is deallocated.
N    * Returns: zero if the stream was succesfully closed, or nonzero if any
N    *          errors were detected or if the stream was already closed.
N    */
Nextern _ARMABI int fflush(FILE * /*stream*/);
Xextern __declspec(__nothrow) int fflush(FILE *  );
N   /*
N    * If the stream points to an output or update stream in which the most
N    * recent operation was output, the fflush function causes any unwritten
N    * data for that stream to be delivered to the host environment to be
N    * written to the file. If the stream points to an input or update stream,
N    * the fflush function undoes the effect of any preceding ungetc operation
N    * on the stream.
N    * Returns: nonzero if a write error occurs.
N    */
Nextern _ARMABI FILE *fopen(const char * __restrict /*filename*/,
Xextern __declspec(__nothrow) FILE *fopen(const char * __restrict  ,
N                           const char * __restrict /*mode*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * opens the file whose name is the string pointed to by filename, and
N    * associates a stream with it.
N    * The argument mode points to a string beginning with one of the following
N    * sequences:
N    * "r"         open text file for reading
N    * "w"         create text file for writing, or truncate to zero length
N    * "a"         append; open text file or create for writing at eof
N    * "rb"        open binary file for reading
N    * "wb"        create binary file for writing, or truncate to zero length
N    * "ab"        append; open binary file or create for writing at eof
N    * "r+"        open text file for update (reading and writing)
N    * "w+"        create text file for update, or truncate to zero length
N    * "a+"        append; open text file or create for update, writing at eof
N    * "r+b"/"rb+" open binary file for update (reading and writing)
N    * "w+b"/"wb+" create binary file for update, or truncate to zero length
N    * "a+b"/"ab+" append; open binary file or create for update, writing at eof
N    *
N    * Opening a file with read mode ('r' as the first character in the mode
N    * argument) fails if the file does not exist or cannot be read.
N    * Opening a file with append mode ('a' as the first character in the mode
N    * argument) causes all subsequent writes to be forced to the current end of
N    * file, regardless of intervening calls to the fseek function. In some
N    * implementations, opening a binary file with append mode ('b' as the
N    * second or third character in the mode argument) may initially position
N    * the file position indicator beyond the last data written, because of the
N    * NUL padding.
N    * When a file is opened with update mode ('+' as the second or third
N    * character in the mode argument), both input and output may be performed
N    * on the associated stream. However, output may not be directly followed
N    * by input without an intervening call to the fflush fuction or to a file
N    * positioning function (fseek, fsetpos, or rewind), and input be not be
N    * directly followed by output without an intervening call to the fflush
N    * fuction or to a file positioning function, unless the input operation
N    * encounters end-of-file. Opening a file with update mode may open or
N    * create a binary stream in some implementations. When opened, a stream
N    * is fully buffered if and only if it does not refer to an interactive
N    * device. The error and end-of-file indicators for the stream are
N    * cleared.
N    * Returns: a pointer to the object controlling the stream. If the open
N    *          operation fails, fopen returns a null pointer.
N    */
Nextern _ARMABI FILE *freopen(const char * __restrict /*filename*/,
Xextern __declspec(__nothrow) FILE *freopen(const char * __restrict  ,
N                    const char * __restrict /*mode*/,
N                    FILE * __restrict /*stream*/) __attribute__((__nonnull__(2,3)));
N   /*
N    * opens the file whose name is the string pointed to by filename and
N    * associates the stream pointed to by stream with it. The mode argument is
N    * used just as in the fopen function.
N    * The freopen function first attempts to close any file that is associated
N    * with the specified stream. Failure to close the file successfully is
N    * ignored. The error and end-of-file indicators for the stream are cleared.
N    * Returns: a null pointer if the operation fails. Otherwise, freopen
N    *          returns the value of the stream.
N    */
Nextern _ARMABI void setbuf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) void setbuf(FILE * __restrict  ,
N                    char * __restrict /*buf*/) __attribute__((__nonnull__(1)));
N   /*
N    * Except that it returns no value, the setbuf function is equivalent to the
N    * setvbuf function invoked with the values _IOFBF for mode and BUFSIZ for
N    * size, or (if buf is a null pointer), with the value _IONBF for mode.
N    * Returns: no value.
N    */
Nextern _ARMABI int setvbuf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int setvbuf(FILE * __restrict  ,
N                   char * __restrict /*buf*/,
N                   int /*mode*/, size_t /*size*/) __attribute__((__nonnull__(1)));
N   /*
N    * may be used after the stream pointed to by stream has been associated
N    * with an open file but before it is read or written. The argument mode
N    * determines how stream will be buffered, as follows: _IOFBF causes
N    * input/output to be fully buffered; _IOLBF causes output to be line
N    * buffered (the buffer will be flushed when a new-line character is
N    * written, when the buffer is full, or when input is requested); _IONBF
N    * causes input/output to be completely unbuffered. If buf is not the null
N    * pointer, the array it points to may be used instead of an automatically
N    * allocated buffer (the buffer must have a lifetime at least as great as
N    * the open stream, so the stream should be closed before a buffer that has
N    * automatic storage duration is deallocated upon block exit). The argument
N    * size specifies the size of the array. The contents of the array at any
N    * time are indeterminate.
N    * Returns: zero on success, or nonzero if an invalid value is given for
N    *          mode or size, or if the request cannot be honoured.
N    */
N#pragma __printf_args
Nextern _ARMABI int fprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int fprintf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * writes output to the stream pointed to by stream, under control of the
N    * string pointed to by format that specifies how subsequent arguments are
N    * converted for output. If there are insufficient arguments for the format,
N    * the behaviour is undefined. If the format is exhausted while arguments
N    * remain, the excess arguments are evaluated but otherwise ignored. The
N    * fprintf function returns when the end of the format string is reached.
N    * The format shall be a multibyte character sequence, beginning and ending
N    * in its initial shift state. The format is composed of zero or more
N    * directives: ordinary multibyte characters (not %), which are copied
N    * unchanged to the output stream; and conversion specifiers, each of which
N    * results in fetching zero or more subsequent arguments. Each conversion
N    * specification is introduced by the character %. For a description of the
N    * available conversion specifiers refer to section 4.9.6.1 in the ANSI
N    * draft mentioned at the start of this file or to any modern textbook on C.
N    * The minimum value for the maximum number of characters producable by any
N    * single conversion is at least 509.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
N#pragma __printf_args
Nextern _ARMABI int _fprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _fprintf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, but does not support floating-point formats.
N    * You can use instead of fprintf to improve code size.
N    * Returns: as fprintf.
N    */
N#pragma __printf_args
Nextern _ARMABI int printf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fprintf with the argument stdout interposed before the
N    * arguments to printf.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
N#pragma __printf_args
Nextern _ARMABI int _printf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to printf, but does not support floating-point formats.
N    * You can use instead of printf to improve code size.
N    * Returns: as printf.
N    */
N#pragma __printf_args
Nextern _ARMABI int sprintf(char * __restrict /*s*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, except that the argument s specifies an array
N    * into which the generated output is to be written, rather than to a
N    * stream. A null character is written at the end of the characters written;
N    * it is not counted as part of the returned sum.
N    * Returns: the number of characters written to the array, not counting the
N    *          terminating null character.
N    */
N#pragma __printf_args
Nextern _ARMABI int _sprintf(char * __restrict /*s*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sprintf, but does not support floating-point formats.
N    * You can use instead of sprintf to improve code size.
N    * Returns: as sprintf.
N    */
N
N#pragma __printf_args
Nextern _ARMABI int __ARM_snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int __ARM_snprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199409L) || (0L && 201103L <= __cplusplus)
N#pragma __printf_args
Nextern _ARMABI int snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int snprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to fprintf, except that the argument s specifies an array
N    * into which the generated output is to be written, rather than to a
N    * stream. The argument n specifies the size of the output array, so as to
N    * avoid overflowing the buffer.
N    * A null character is written at the end of the characters written, even
N    * if the formatting was not completed; it is not counted as part of the
N    * returned sum. At most n characters of the output buffer are used,
N    * _including_ the null character.
N    * Returns: the number of characters that would have been written to the
N    *          array, not counting the terminating null character, if the
N    *          array had been big enough. So if the return is >=0 and <n, then
N    *          the entire string was successfully formatted; if the return is
N    *          >=n, the string was truncated (but there is still a null char
N    *          at the end of what was written); if the return is <0, there was
N    *          an error.
N    */
N#endif
N#pragma __printf_args
Nextern _ARMABI int _snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int _snprintf(char * __restrict  , size_t  ,
N                      const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to snprintf, but does not support floating-point formats.
N    * You can use instead of snprintf to improve code size.
N    * Returns: as snprintf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int fscanf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int fscanf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * reads input from the stream pointed to by stream, under control of the
N    * string pointed to by format that specifies the admissible input sequences
N    * and how thay are to be converted for assignment, using subsequent
N    * arguments as pointers to the objects to receive the converted input. If
N    * there are insufficient arguments for the format, the behaviour is
N    * undefined. If the format is exhausted while arguments remain, the excess
N    * arguments are evaluated but otherwise ignored.
N    * The format is composed of zero or more directives: one or more
N    * white-space characters; an ordinary character (not %); or a conversion
N    * specification. Each conversion specification is introduced by the
N    * character %. For a description of the available conversion specifiers
N    * refer to section 4.9.6.2 in the ANSI draft mentioned at the start of this
N    * file, or to any modern textbook on C.
N    * If end-of-file is encountered during input, conversion is terminated. If
N    * end-of-file occurs before any characters matching the current directive
N    * have been read (other than leading white space, where permitted),
N    * execution of the current directive terminates with an input failure;
N    * otherwise, unless execution of the current directive is terminated with a
N    * matching failure, execution of the following directive (if any) is
N    * terminated with an input failure.
N    * If conversions terminates on a conflicting input character, the offending
N    * input character is left unread in the input strem. Trailing white space
N    * (including new-line characters) is left unread unless matched by a
N    * directive. The success of literal matches and suppressed asignments is
N    * not directly determinable other than via the %n directive.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the fscanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early conflict between an input
N    *          character and the format.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _fscanf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _fscanf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fscanf, but does not support floating-point formats.
N    * You can use instead of fscanf to improve code size.
N    * Returns: as fscanf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int scanf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fscanf with the argument stdin interposed before the
N    * arguments to scanf.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the scanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early matching failure.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _scanf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to scanf, but does not support floating-point formats.
N    * You can use instead of scanf to improve code size.
N    * Returns: as scanf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int sscanf(const char * __restrict /*s*/,
Xextern __declspec(__nothrow) int sscanf(const char * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fscanf except that the argument s specifies a string
N    * from which the input is to be obtained, rather than from a stream.
N    * Reaching the end of the string is equivalent to encountering end-of-file
N    * for the fscanf function.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the scanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early matching failure.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _sscanf(const char * __restrict /*s*/,
Xextern __declspec(__nothrow) int _sscanf(const char * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sscanf, but does not support floating-point formats.
N    * You can use instead of sscanf to improve code size.
N    * Returns: as sscanf.
N    */
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199409L) || (0L && 201103L <= __cplusplus)
N/* C99 additions */
Nextern _ARMABI int vfscanf(FILE * __restrict /*stream*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int vscanf(const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
Nextern _ARMABI int vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
N#endif
Nextern _ARMABI int _vfscanf(FILE * __restrict /*stream*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int _vscanf(const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
Nextern _ARMABI int _vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int __ARM_vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int __ARM_vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
N
Nextern _ARMABI int vprintf(const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to printf, with the variable argument list replaced by arg,
N    * which has been initialised by the va_start macro (and possibly subsequent
N    * va_arg calls). The vprintf function does not invoke the va_end function.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
Nextern _ARMABI int _vprintf(const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to vprintf, but does not support floating-point formats.
N    * You can use instead of vprintf to improve code size.
N    * Returns: as vprintf.
N    */
Nextern _ARMABI int vfprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int vfprintf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vfprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
Nextern _ARMABI int vsprintf(char * __restrict /*s*/,
Xextern __declspec(__nothrow) int vsprintf(char * __restrict  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vsprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters written in the array, not counting the
N    *          terminating null character.
N    */
Nextern _ARMABI int __ARM_vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int __ARM_vsnprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199409L) || (0L && 201103L <= __cplusplus)
Nextern _ARMABI int vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int vsnprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to snprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vsprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters that would have been written in the
N    *          array, not counting the terminating null character. As
N    *          snprintf.
N    */
N#endif
Nextern _ARMABI int _vsprintf(char * __restrict /*s*/,
Xextern __declspec(__nothrow) int _vsprintf(char * __restrict  ,
N                      const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to vsprintf, but does not support floating-point formats.
N    * You can use instead of vsprintf to improve code size.
N    * Returns: as vsprintf.
N    */
Nextern _ARMABI int _vfprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _vfprintf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to vfprintf, but does not support floating-point formats.
N    * You can use instead of vfprintf to improve code size.
N    * Returns: as vfprintf.
N    */
Nextern _ARMABI int _vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int _vsnprintf(char * __restrict  , size_t  ,
N                      const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to vsnprintf, but does not support floating-point formats.
N    * You can use instead of vsnprintf to improve code size.
N    * Returns: as vsnprintf.
N    */
N#if !defined(__STRICT_ANSI__)
X#if !0L
N#pragma __printf_args
Nextern _ARMABI int asprintf(char ** /*strp*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int asprintf(char **  , const char * __restrict  , ...) __attribute__((__nonnull__(2)));
Nextern _ARMABI int vasprintf(char ** /*strp*/, const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int vasprintf(char **  , const char * __restrict  , __va_list  ) __attribute__((__nonnull__(2)));
N#endif
N#pragma __printf_args
Nextern _ARMABI int __ARM_asprintf(char ** /*strp*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int __ARM_asprintf(char **  , const char * __restrict  , ...) __attribute__((__nonnull__(2)));
Nextern _ARMABI int __ARM_vasprintf(char ** /*strp*/, const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int __ARM_vasprintf(char **  , const char * __restrict  , __va_list  ) __attribute__((__nonnull__(2)));
N   /*
N    * dynamically allocates a buffer of the right size for the
N    * formatted string, and returns it in (*strp). Formal return value
N    * is the same as any other printf variant, except that it returns
N    * -1 if the buffer could not be allocated.
N    *
N    * (The functions with __ARM_ prefixed names are identical to the
N    * ones without, but are available in all compilation modes without
N    * violating user namespace.)
N    */
N
Nextern _ARMABI int fgetc(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fgetc(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * obtains the next character (if present) as an unsigned char converted to
N    * an int, from the input stream pointed to by stream, and advances the
N    * associated file position indicator (if defined).
N    * Returns: the next character from the input stream pointed to by stream.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and fgetc returns EOF. If a read error occurs, the error
N    *          indicator is set and fgetc returns EOF.
N    */
Nextern _ARMABI char *fgets(char * __restrict /*s*/, int /*n*/,
Xextern __declspec(__nothrow) char *fgets(char * __restrict  , int  ,
N                    FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,3)));
N   /*
N    * reads at most one less than the number of characters specified by n from
N    * the stream pointed to by stream into the array pointed to by s. No
N    * additional characters are read after a new-line character (which is
N    * retained) or after end-of-file. A null character is written immediately
N    * after the last character read into the array.
N    * Returns: s if successful. If end-of-file is encountered and no characters
N    *          have been read into the array, the contents of the array remain
N    *          unchanged and a null pointer is returned. If a read error occurs
N    *          during the operation, the array contents are indeterminate and a
N    *          null pointer is returned.
N    */
Nextern _ARMABI int fputc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int fputc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * writes the character specified by c (converted to an unsigned char) to
N    * the output stream pointed to by stream, at the position indicated by the
N    * asociated file position indicator (if defined), and advances the
N    * indicator appropriately. If the file position indicator is not defined,
N    * the character is appended to the output stream.
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and fputc returns EOF.
N    */
Nextern _ARMABI int fputs(const char * __restrict /*s*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fputs(const char * __restrict  , FILE * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * writes the string pointed to by s to the stream pointed to by stream.
N    * The terminating null character is not written.
N    * Returns: EOF if a write error occurs; otherwise it returns a nonnegative
N    *          value.
N    */
Nextern _ARMABI int getc(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int getc(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fgetc except that it may be implemented as an unsafe
N    * macro (stream may be evaluated more than once, so the argument should
N    * never be an expression with side-effects).
N    * Returns: the next character from the input stream pointed to by stream.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and getc returns EOF. If a read error occurs, the error
N    *          indicator is set and getc returns EOF.
N    */
N#ifdef __cplusplus
S    inline int getchar() { return getc(stdin); }
N#else
N    #define getchar() getc(stdin)
N    extern _ARMABI int (getchar)(void);
X    extern __declspec(__nothrow) int (getchar)(void);
N#endif
N   /*
N    * is equivalent to getc with the argument stdin.
N    * Returns: the next character from the input stream pointed to by stdin.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and getchar returns EOF. If a read error occurs, the error
N    *          indicator is set and getchar returns EOF.
N    */
Nextern _ARMABI char *gets(char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *gets(char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * reads characters from the input stream pointed to by stdin into the array
N    * pointed to by s, until end-of-file is encountered or a new-line character
N    * is read. Any new-line character is discarded, and a null character is
N    * written immediately after the last character read into the array.
N    * Returns: s if successful. If end-of-file is encountered and no characters
N    *          have been read into the array, the contents of the array remain
N    *          unchanged and a null pointer is returned. If a read error occurs
N    *          during the operation, the array contents are indeterminate and a
N    *          null pointer is returned.
N    */
Nextern _ARMABI int putc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int putc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * is equivalent to fputc except that it may be implemented as aan unsafe
N    * macro (stream may be evaluated more than once, so the argument should
N    * never be an expression with side-effects).
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and putc returns EOF.
N    */
N#ifdef __cplusplus
S    inline int putchar(int __c) { return putc(__c, stdout); }
N#else
N    #define putchar(c) putc(c, stdout)
N    extern _ARMABI int (putchar)(int /*c*/);
X    extern __declspec(__nothrow) int (putchar)(int  );
N#endif
N   /*
N    * is equivalent to putc with the second argument stdout.
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and putc returns EOF.
N    */
Nextern _ARMABI int puts(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int puts(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * writes the string pointed to by s to the stream pointed to by stdout, and
N    * appends a new-line character to the output. The terminating null
N    * character is not written.
N    * Returns: EOF if a write error occurs; otherwise it returns a nonnegative
N    *          value.
N    */
Nextern _ARMABI int ungetc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int ungetc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * pushes the character specified by c (converted to an unsigned char) back
N    * onto the input stream pointed to by stream. The character will be
N    * returned by the next read on that stream. An intervening call to the
N    * fflush function or to a file positioning function (fseek, fsetpos,
N    * rewind) discards any pushed-back characters. The extern _ARMABIal storage
N    * corresponding to the stream is unchanged.
N    * One character pushback is guaranteed. If the unget function is called too
N    * many times on the same stream without an intervening read or file
N    * positioning operation on that stream, the operation may fail.
N    * If the value of c equals that of the macro EOF, the operation fails and
N    * the input stream is unchanged.
N    * A successful call to the ungetc function clears the end-of-file
N    * indicator. The value of the file position indicator after reading or
N    * discarding all pushed-back characters shall be the same as it was before
N    * the characters were pushed back. For a text stream, the value of the file
N    * position indicator after a successful call to the ungetc function is
N    * unspecified until all pushed-back characters are read or discarded. For a
N    * binary stream, the file position indicator is decremented by each
N    * successful call to the ungetc function; if its value was zero before a
N    * call, it is indeterminate after the call.
N    * Returns: the character pushed back after conversion, or EOF if the
N    *          operation fails.
N    */
N
Nextern _ARMABI size_t fread(void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t fread(void * __restrict  ,
N                    size_t /*size*/, size_t /*nmemb*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,4)));
N   /*
N    * reads into the array pointed to by ptr, up to nmemb members whose size is
N    * specified by size, from the stream pointed to by stream. The file
N    * position indicator (if defined) is advanced by the number of characters
N    * successfully read. If an error occurs, the resulting value of the file
N    * position indicator is indeterminate. If a partial member is read, its
N    * value is indeterminate. The ferror or feof function shall be used to
N    * distinguish between a read error and end-of-file.
N    * Returns: the number of members successfully read, which may be less than
N    *          nmemb if a read error or end-of-file is encountered. If size or
N    *          nmemb is zero, fread returns zero and the contents of the array
N    *          and the state of the stream remain unchanged.
N    */
N
Nextern _ARMABI size_t __fread_bytes_avail(void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t __fread_bytes_avail(void * __restrict  ,
N                    size_t /*count*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,3)));
N   /*
N    * reads into the array pointed to by ptr, up to count characters from the
N    * stream pointed to by stream. The file position indicator (if defined)
N    * is advanced by the number of characters successfully read. If an error
N    * occurs, the resulting value of the file position indicator is
N    * indeterminate. The ferror or feof function shall be used to
N    * distinguish between a read error and end-of-file.  The call will block
N    * only if no characters are available.
N    * Returns: the number of characters successfully read, which may be less than
N    *          count. If count is zero, __fread_bytes_avail returns zero and
N    *          the contents of the array and the state of the stream remain
N    *          unchanged.
N    */
N
Nextern _ARMABI size_t fwrite(const void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t fwrite(const void * __restrict  ,
N                    size_t /*size*/, size_t /*nmemb*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,4)));
N   /*
N    * writes, from the array pointed to by ptr up to nmemb members whose size
N    * is specified by size, to the stream pointed to by stream. The file
N    * position indicator (if defined) is advanced by the number of characters
N    * successfully written. If an error occurs, the resulting value of the file
N    * position indicator is indeterminate.
N    * Returns: the number of members successfully written, which will be less
N    *          than nmemb only if a write error is encountered.
N    */
N
Nextern _ARMABI int fgetpos(FILE * __restrict /*stream*/, fpos_t * __restrict /*pos*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fgetpos(FILE * __restrict  , fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * stores the current value of the file position indicator for the stream
N    * pointed to by stream in the object pointed to by pos. The value stored
N    * contains unspecified information usable by the fsetpos function for
N    * repositioning the stream to its position at the time  of the call to the
N    * fgetpos function.
N    * Returns: zero, if successful. Otherwise nonzero is returned and the
N    *          integer expression errno is set to an implementation-defined
N    *          nonzero value.
N    */
Nextern _ARMABI int fseek(FILE * /*stream*/, long int /*offset*/, int /*whence*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fseek(FILE *  , long int  , int  ) __attribute__((__nonnull__(1)));
N   /*
N    * sets the file position indicator for the stream pointed to by stream.
N    * For a binary stream, the new position is at the signed number of
N    * characters specified by offset away from the point specified by whence.
N    * The specified point is the beginning of the file for SEEK_SET, the
N    * current position in the file for SEEK_CUR, or end-of-file for SEEK_END.
N    * A binary stream need not meaningfully support fseek calls with a whence
N    * value of SEEK_END.
N    * For a text stream, either offset shall be zero, or offset shall be a
N    * value returned by an earlier call to the ftell function on the same
N    * stream and whence shall be SEEK_SET.
N    * The fseek function clears the end-of-file indicator and undoes any
N    * effects of the ungetc function on the same stream. After an fseek call,
N    * the next operation on an update stream may be either input or output.
N    * Returns: nonzero only for a request that cannot be satisfied.
N    */
Nextern _ARMABI int fsetpos(FILE * __restrict /*stream*/, const fpos_t * __restrict /*pos*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fsetpos(FILE * __restrict  , const fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * sets  the file position indicator for the stream pointed to by stream
N    * according to the value of the object pointed to by pos, which shall be a
N    * value returned by an earlier call to the fgetpos function on the same
N    * stream.
N    * The fsetpos function clears the end-of-file indicator and undoes any
N    * effects of the ungetc function on the same stream. After an fsetpos call,
N    * the next operation on an update stream may be either input or output.
N    * Returns: zero, if successful. Otherwise nonzero is returned and the
N    *          integer expression errno is set to an implementation-defined
N    *          nonzero value.
N    */
Nextern _ARMABI long int ftell(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long int ftell(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * obtains the current value of the file position indicator for the stream
N    * pointed to by stream. For a binary stream, the value is the number of
N    * characters from the beginning of the file. For a text stream, the file
N    * position indicator contains unspecified information, usable by the fseek
N    * function for returning the file position indicator to its position at the
N    * time of the ftell call; the difference between two such return values is
N    * not necessarily a meaningful measure of the number of characters written
N    * or read.
N    * Returns: if successful, the current value of the file position indicator.
N    *          On failure, the ftell function returns -1L and sets the integer
N    *          expression errno to an implementation-defined nonzero value.
N    */
Nextern _ARMABI void rewind(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void rewind(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * sets the file position indicator for the stream pointed to by stream to
N    * the beginning of the file. It is equivalent to
N    *          (void)fseek(stream, 0L, SEEK_SET)
N    * except that the error indicator for the stream is also cleared.
N    * Returns: no value.
N    */
N
Nextern _ARMABI void clearerr(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void clearerr(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * clears the end-of-file and error indicators for the stream pointed to by
N    * stream. These indicators are cleared only when the file is opened or by
N    * an explicit call to the clearerr function or to the rewind function.
N    * Returns: no value.
N    */
N
Nextern _ARMABI int feof(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int feof(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * tests the end-of-file indicator for the stream pointed to by stream.
N    * Returns: nonzero iff the end-of-file indicator is set for stream.
N    */
Nextern _ARMABI int ferror(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int ferror(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * tests the error indicator for the stream pointed to by stream.
N    * Returns: nonzero iff the error indicator is set for stream.
N    */
Nextern _ARMABI void perror(const char * /*s*/);
Xextern __declspec(__nothrow) void perror(const char *  );
N   /*
N    * maps the error number  in the integer expression errno to an error
N    * message. It writes a sequence of characters to the standard error stream
N    * thus: first (if s is not a null pointer and the character pointed to by
N    * s is not the null character), the string pointed to by s followed by a
N    * colon and a space; then an appropriate error message string followed by
N    * a new-line character. The contents of the error message strings are the
N    * same as those returned by the strerror function with argument errno,
N    * which are implementation-defined.
N    * Returns: no value.
N    */
N
Nextern _ARMABI int _fisatty(FILE * /*stream*/ ) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _fisatty(FILE *   ) __attribute__((__nonnull__(1)));
N    /* Returns 1 if the stream is tty (stdin), 0 otherwise. Not ANSI compliant.
N     */
N
Nextern _ARMABI void __use_no_semihosting_swi(void);
Xextern __declspec(__nothrow) void __use_no_semihosting_swi(void);
Nextern _ARMABI void __use_no_semihosting(void);
Xextern __declspec(__nothrow) void __use_no_semihosting(void);
N    /*
N     * Referencing either of these symbols will cause a link-time
N     * error if any library functions that use semihosting SWI
N     * calls are also present in the link, i.e. you define it if
N     * you want to make sure you haven't accidentally used any such
N     * SWIs.
N     */
N
N    #ifdef __cplusplus
S        }  /* extern "C" */
S      }  /* namespace std */
N    #endif
N  #endif /* __STDIO_DECLS */
N
N  #if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X  #if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S    #define _AEABI_PORTABLE
N  #endif
N
N  #if defined(__cplusplus) && !defined(__STDIO_NO_EXPORTS)
X  #if 0L && !0L
S    using ::std::size_t;
S    using ::std::fpos_t;
S    using ::std::FILE;
S    using ::std::remove;
S    using ::std::rename;
S    using ::std::tmpfile;
S    using ::std::tmpnam;
S    using ::std::fclose;
S    using ::std::fflush;
S    using ::std::fopen;
S    using ::std::freopen;
S    using ::std::setbuf;
S    using ::std::setvbuf;
S    using ::std::fprintf;
S    using ::std::_fprintf;
S    using ::std::printf;
S    using ::std::_printf;
S    using ::std::sprintf;
S    using ::std::_sprintf;
S    #if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
S      using ::std::snprintf;
S      using ::std::vsnprintf;
S      using ::std::vfscanf;
S      using ::std::vscanf;
S      using ::std::vsscanf;
S    #endif
S    using ::std::_snprintf;
S    using ::std::_vsnprintf;
S#if !defined(__STRICT_ANSI__)
S    using ::std::asprintf;
S    using ::std::vasprintf;
S#endif
S    using ::std::__ARM_asprintf;
S    using ::std::__ARM_vasprintf;
S    using ::std::__ARM_vsnprintf;
S    using ::std::__ARM_snprintf;
S    using ::std::__ARM_vsscanf;
S    using ::std::fscanf;
S    using ::std::_fscanf;
S    using ::std::scanf;
S    using ::std::_scanf;
S    using ::std::sscanf;
S    using ::std::_sscanf;
S    using ::std::_vfscanf;
S    using ::std::_vscanf;
S    using ::std::_vsscanf;
S    using ::std::vprintf;
S    using ::std::_vprintf;
S    using ::std::vfprintf;
S    using ::std::_vfprintf;
S    using ::std::vsprintf;
S    using ::std::_vsprintf;
S    using ::std::fgetc;
S    using ::std::fgets;
S    using ::std::fputc;
S    using ::std::fputs;
S    using ::std::getc;
S    using ::std::getchar;
S    using ::std::gets;
S    using ::std::putc;
S    using ::std::putchar;
S    using ::std::puts;
S    using ::std::ungetc;
S    using ::std::fread;
S    using ::std::__fread_bytes_avail;
S    using ::std::fwrite;
S    using ::std::fgetpos;
S    using ::std::fseek;
S    using ::std::fsetpos;
S    using ::std::ftell;
S    using ::std::rewind;
S    using ::std::clearerr;
S    using ::std::feof;
S    using ::std::ferror;
S    using ::std::perror;
S    using ::std::_fisatty;
S    using ::std::__use_no_semihosting_swi;
S    using ::std::__use_no_semihosting;
N  #endif
N
N#endif /* ndef __stdio_h */
N
N/* end of stdio.h */
N
L 6 ".\Inc\Pixart_Sensor.h" 2
N#include "Main.h"
L 1 ".\Inc\Main.h" 1
N/*----------------------------------------------------------------------------
N *      Name:    MAIN.H
N *      Purpose: USB HID Demo Definitions
N *      Version: V1.20
N *----------------------------------------------------------------------------
N *      This software is supplied "AS IS" without any warranties, express,
N *      implied or statutory, including but not limited to the implied
N *      warranties of fitness for purpose, satisfactory quality and
N *      noninfringement. Keil extends you a royalty-free right to reproduce
N *      and distribute executable files created using this software for use
N *      on NXP Semiconductors LPC microcontroller devices only. Nothing else 
N *      gives you the right to use this software.
N *
N * Copyright (c) 2009 Keil - An ARM Company. All rights reserved.
N *---------------------------------------------------------------------------*/
N#ifndef __MAIN_H__
N#define __MAIN_H__
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#include "Type.h"
N#include "usbcfg.h"
L 1 ".\Inc\usbcfg.h" 1
N/*----------------------------------------------------------------------------
N *      U S B  -  K e r n e l
N *----------------------------------------------------------------------------
N * Name:    usbcfg.h
N * Purpose: USB Custom Configuration
N * Version: V1.20
N *----------------------------------------------------------------------------
N *      This software is supplied "AS IS" without any warranties, express,
N *      implied or statutory, including but not limited to the implied
N *      warranties of fitness for purpose, satisfactory quality and
N *      noninfringement. Keil extends you a royalty-free right to reproduce
N *      and distribute executable files created using this software for use
N *      on NXP Semiconductors LPC family microcontroller devices only. Nothing 
N *      else gives you the right to use this software.
N *
N * Copyright (c) 2009 Keil - An ARM Company. All rights reserved.
N *----------------------------------------------------------------------------
N * History:
N *          V1.20 Added vendor specific support
N *          V1.00 Initial Version
N *----------------------------------------------------------------------------*/
N
N#ifndef __USBCFG_H__
N#define __USBCFG_H__
N
N
N//*** <<< Use Configuration Wizard in Context Menu >>> ***
N
N
N/*
N// <h> USB Configuration
N//   <o0> USB Power
N//        <i> Default Power Setting
N//        <0=> Bus-powered
N//        <1=> Self-powered
N//   <o1> Max Number of Interfaces <1-256>
N//   <o2> Max Number of Endpoints  <1-32>
N//   <o3> Max Setup Packet Size
N//        <8=> 8 Bytes <16=> 16 Bytes <32=> 32 Bytes <64=> 64 Bytes
N//   <o4> Max Endpoint 0 Packet Size
N//        <8=> 8 Bytes <16=> 16 Bytes <32=> 32 Bytes <64=> 64 Bytes
N//   <o5> Maximum non-isochronous packet size  <1-64>
N//   <o6> Maximum isochronous packet size  <1-1023>
N
N// </h>
N*/
N
N#define USB_POWER 0
N#define USB_IF_NUM 1
N#define USB_EP_NUM 4 // 10 dennis
N#define USB_SETUP_PACKET_SIZE 8
N#define USB_MAX_PACKET0 64
N#define USB_MAX_NON_ISO_SIZE 64
N#define USB_MAX_ISO_SIZE 1023
N#define USB_LOGIC_EP_NUM 5
N
N
N#if 1 // dennis 6/5/2014
N	#define USB_PACKET_SIZE 0x12
N#else
S	#define USB_PACKET_SIZE 8
N#endif	  
N
N/*
N// <h> Miscellaneous USB support
N//     <o0.0> Power Down USB Wake-up
N//     <o1.0> Remote Wake-up enable
N//     <o2.0> Use double-buffered endpoints
N//     <o3.0> Link Power Management Support
N//     <o4.0> Isochronous communications
N//     <o5.0> Use Debug
N// </h>
N*/
N
N/* If REMOTE_WAKEUP_ENABLE is set to 1, set POWERDOWN_MODE_USB_WAKEUP flag to 0.
N   Don't turn on both flags at the same time. */
N#define POWERDOWN_MODE_USB_WAKEUP   0
N#define REMOTE_WAKEUP_ENABLE        0
N#define USE_DOUBLE_BUFFER           0
N#define LPM_SUPPORT                 0	/* Link Power Management */
N#define USB_ISO_COMMUNICATION       0
N
N/*
N// <h> USB Event Handlers
N//   <h> Device Events
N//     <o0.0> Power Event
N//     <o1.0> Reset Event
N//     <o2.0> Suspend Event
N//     <o3.0> Resume Event
N//     <o4.0> Remote Wakeup Event
N//     <o5.0> Start of Frame Event
N//     <o6.0> Error Event
N//   </h>
N//   <h> Endpoint Events
N//     <o7.0>  Endpoint 0 Event
N//     <o7.1>  Endpoint 1 Event
N//     <o7.2>  Endpoint 2 Event
N//     <o7.3>  Endpoint 3 Event
N//     <o7.4>  Endpoint 4 Event
N//   </h>
N//   <h> USB Core Events
N//     <o8.0>  Set Configuration Event
N//     <o9.0>  Set Interface Event
N//     <o10.0> Set/Clear Feature Event
N//   </h>
N// </h>
N*/
N
N#define USB_POWER_EVENT     0
N#define USB_RESET_EVENT     1
N#define USB_SUSPEND_EVENT   1
N#define USB_RESUME_EVENT    1
N#define USB_WAKEUP_EVENT    0
N#define USB_SOF_EVENT       0
N#define USB_ERROR_EVENT     0
N#define USB_EP_EVENT 0x0003
N#define USB_CONFIGURE_EVENT 1
N#define USB_INTERFACE_EVENT 0
N#define USB_FEATURE_EVENT   0
N#define USB_FIQ_EVENT		0
N
N
N/*
N// <e0> USB Class Support
N//   <i> enables USB Class specific Requests
N//   <e1> Human Interface Device (HID)
N//     <o2> Interface Number <0-255>
N//   </e>
N//   <e3> Mass Storage
N//     <o4> Interface Number <0-255>
N//   </e>
N//   <e5> Audio Device
N//     <o6> Control Interface Number <0-255>
N//     <o7> Streaming Interface 1 Number <0-255>
N//     <o8> Streaming Interface 2 Number <0-255>
N//   </e>
N//   <e9> Communication Device
N//     <o10> Control Interface Number <0-255>
N//     <o11> Bulk Interface Number <0-255>
N//     <o12> Max Communication Device Buffer Size
N//        <8=> 8 Bytes <16=> 16 Bytes <32=> 32 Bytes <64=> 64 Bytes 
N//   </e>
N// </e>
N*/
N
N#define USB_CLASS 1
N#define USB_HID 1
N#define USB_HID_IF_NUM 0
N
N/*
N// <e0> USB Vendor Support
N//   <i> enables USB Vendor specific Requests
N// </e>
N*/
N#define USB_VENDOR 0
N#endif  /* __USBCFG_H__ */
N
L 25 ".\Inc\Main.h" 2
N//#include "Pixart_Sensor.h"
N
N#ifdef _MAIN_C_
S#define INTERFACE
N#else
N#define INTERFACE extern
N#endif
N
N#define _DEMO_ONLY_ 0
N
N#define EP1_IN BIT0
N#define EP1_OUT BIT1
N#define EP2_IN BIT2
N#define EP2_OUT BIT3
N#define EP3_IN BIT4
N#define EP3_OUT BIT5
N#define EP4_IN BIT6
N#define EP4_OUT BIT7
N
N#define MISC_EVENT (BIT3|BIT2)
N
N
Ntypedef enum _GIndex_
N{
N    GIdx0 = 0,
N    GIdx1,
N    GIdx2,
N    GIdx3,
N    GIdx4,
N    GIdx5,
N    GIdx6,
N    GIdx7,
N    GIdx8,
N    GIdxLen =  GIdx8,
N}GIndex;
N
N#define MAIN_FLAG_MOUSE_REPORT_READY	BIT0	
N#define MAIN_FLAG_MOUSE_BUTTON_EVENT	BIT1	
N#define MAIN_FLAG_MOUSE_QIE_EVENT		BIT2
N//#define MAIN_FLAG_MOUSE_EVENT	BIT3
N#define MAIN_FLAG_MOUSE_EVENT			BIT3
N//#define MAIN_FLAG_MOUSE_FRAME_CAPTURE_EVENT BIT4
N
N/* HID Demo Variables */
Ntypedef struct _LPC11Uxx_MAIN_SETTING_
N{
N	U8 InReport[USB_PACKET_SIZE];
X	U8 InReport[0x12];
N	U8 OutReport[USB_PACKET_SIZE];
X	U8 OutReport[0x12];
N	U8 EPInOutReq;
N	U8 InReportSize;
N	U16 MouseEvent;
N}LPC11Uxx_MAIN_SETTING;
N
NINTERFACE LPC11Uxx_MAIN_SETTING g_Main_Setting;
Xextern LPC11Uxx_MAIN_SETTING g_Main_Setting;
N
N
N/* HID Demo Functions */
NINTERFACE void nsAPI_Main_GetInReport(void);
Xextern void nsAPI_Main_GetInReport(void);
NINTERFACE void SetOutReport(void);
Xextern void SetOutReport(void);
NINTERFACE void nsAPI_Main_MouseEventHandle(void);
Xextern void nsAPI_Main_MouseEventHandle(void);
NINTERFACE void nsAPI_Main_GetInMouseButtonReport(U16 *PreButtonEvent,U16 *u16ButtonStatus,U16 *KeycodeTblIdx);
Xextern void nsAPI_Main_GetInMouseButtonReport(U16 *PreButtonEvent,U16 *u16ButtonStatus,U16 *KeycodeTblIdx);
NINTERFACE void nsAPI_Main_GetInMouseQIEReport(S8 s8Temp);
Xextern void nsAPI_Main_GetInMouseQIEReport(S8 s8Temp);
NINTERFACE void nsAPI_Main_Clr_MouseEvent(void);
Xextern void nsAPI_Main_Clr_MouseEvent(void);
NINTERFACE void Mapp_Main_Init(void);
Xextern void Mapp_Main_Init(void);
N
N#undef INTERFACE
N#ifdef __cplusplus
S}
N#endif
N#endif //__MAIN_H__
L 7 ".\Inc\Pixart_Sensor.h" 2
N#include "srom.h"
L 1 ".\Inc\srom.h" 1
N#include "Type.h"
N
Nextern U8 SROM[];
Nextern const U16 sromTableSize;
N
L 8 ".\Inc\Pixart_Sensor.h" 2
N#include "hiduser.h"
L 1 ".\Inc\hiduser.h" 1
N/*----------------------------------------------------------------------------
N *      U S B  -  K e r n e l
N *----------------------------------------------------------------------------
N *      Name:    HIDUSER.H
N *      Purpose: HID Custom User Definitions
N *      Version: V1.20
N *----------------------------------------------------------------------------
N *      This software is supplied "AS IS" without any warranties, express,
N *      implied or statutory, including but not limited to the implied
N *      warranties of fitness for purpose, satisfactory quality and
N *      noninfringement. Keil extends you a royalty-free right to reproduce
N *      and distribute executable files created using this software for use
N *      on NXP Semiconductors LPC microcontroller devices only. Nothing else 
N *      gives you the right to use this software.
N *
N * Copyright (c) 2009 Keil - An ARM Company. All rights reserved.
N *---------------------------------------------------------------------------*/
N
N#ifndef __HIDUSER_H__
N#define __HIDUSER_H__
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#include "Type.h"
N
N#ifdef  __HIDUSER_C__
S#define INTERFACE
N#else
N#define INTERFACE extern
N#endif
N
N
N/* HID Number of Reports */
N#define HID_REPORT_NUM 1
N
N/* HID In/Out Endpoint Address */
N#define HID_EP1_IN 0x81
N#define HID_EP1_OUT 0x01
N#define HID_EP2_IN 0x82
N#define HID_EP2_OUT 0x02
N#define HID_EP3_IN 0x83
N#define HID_EP3_OUT 0x03
N#define HID_EP4_IN 0x84
N#define HID_EP4_OUT 0x04
N
N
N/* HID Global Variables */
Nextern uint8_t HID_Protocol;
Nextern uint8_t HID_IdleTime[HID_REPORT_NUM];
Xextern uint8_t HID_IdleTime[1];
N
N/* HID Requests Callback Functions */
NINTERFACE uint32_t HID_GetReport   (void);
Xextern uint32_t HID_GetReport   (void);
NINTERFACE uint32_t HID_SetReport   (void);
Xextern uint32_t HID_SetReport   (void);
NINTERFACE uint32_t HID_GetIdle     (void);
Xextern uint32_t HID_GetIdle     (void);
NINTERFACE uint32_t HID_SetIdle     (void);
Xextern uint32_t HID_SetIdle     (void);
NINTERFACE uint32_t HID_GetProtocol (void);
Xextern uint32_t HID_GetProtocol (void);
NINTERFACE uint32_t HID_SetProtocol (void);
Xextern uint32_t HID_SetProtocol (void);
N
N#undef INTERFACE
N#ifdef __cplusplus
S}
N#endif
N#endif  /* __HIDUSER_H__ */
L 9 ".\Inc\Pixart_Sensor.h" 2
N#include "Keytbl.h"
L 1 ".\Inc\Keytbl.h" 1
N#ifndef __KEYTBL_H__ 
N#define __KEYTBL_H__
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#include "Type.h"
N#include "Main.h"
N
N#ifdef  __KEYTBL_C__
S#define INTERFACE
N#else
N#define INTERFACE extern
N#endif
N
N/*Key define */
N#define MouseTableSize 254
N#define KeyboardTableYSize 160
N#define KeyboardTableXSize 3
N
NINTERFACE const U8 u8MouseKeyTable[MouseTableSize];
Xextern const U8 u8MouseKeyTable[254];
NINTERFACE const U8 u8KeyboardKeyTable[KeyboardTableYSize][KeyboardTableXSize];
Xextern const U8 u8KeyboardKeyTable[160][3];
N
N
N#undef INTERFACE
N#ifdef __cplusplus
S}
N#endif
N#endif /* end __GPIO_H */
N
L 10 ".\Inc\Pixart_Sensor.h" 2
N#include "ssp.h"
L 1 ".\Inc\ssp.h" 1
N#ifndef __SSP_H__
N#define __SSP_H__
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#include "Type.h"
N#include "Gpio.h"
L 1 ".\Inc\Gpio.h" 1
N/****************************************************************************
N *   $Id:: gpio.h 6172 2011-01-13 18:22:51Z usb00423                        $
N *   Project: NXP LPC11xx software example
N *
N *   Description:
N *     This file contains definition and prototype for GPIO.
N *
N ****************************************************************************
N * Software that is described herein is for illustrative purposes only
N * which provides customers with programming information regarding the
N * products. This software is supplied "AS IS" without any warranties.
N * NXP Semiconductors assumes no responsibility or liability for the
N * use of the software, conveys no license or title under any patent,
N * copyright, or mask work right to the product. NXP Semiconductors
N * reserves the right to make changes in the software without
N * notification. NXP Semiconductors also make no representation or
N * warranty that such application will be suitable for the specified
N * use without further testing or modification.
N****************************************************************************/
N#ifndef __GPIO_H__ 
N#define __GPIO_H__
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#include "Type.h"
N
N#ifdef  __GPIO_C__
N#define INTERFACE
N#else
S#define INTERFACE extern
N#endif
N
N#define PORT0 0
N#define PORT1 1
N
N#define GROUP0 0
N#define GROUP1 1
N
N#define GPIOIN 0
N#define GPIOOUT 1
N
N#define GPIO_SCANKEY_NULL 0
N#define GPIO_SCANKEY_PR BIT0
N#define GPIO_SCANKEY_PH BIT1
N#define GPIO_SCANKEY_RELEASE BIT2
N
N#define GPIO0_PR (0xFFFFFFFF)
N//#define GPIO1_PR (BIT20|BIT19|BIT15|BIT14|BIT13) //ori
N#define GPIO1_PR (BIT31|BIT28|BIT27|BIT26|BIT25)
N
Ntypedef enum _QIEStatusIndex_
N{   
N    QIE_STOP = 0x00,
N    QIE_FORWARD = 0x01,
N    QIE_BACKWARD = 0xFF,    
N    QIE_SAME = 0xAA  
N}QIEStatusIndex;
N
N
Ntypedef struct _LPC11Uxx_Gpio_Setting_
N{
N	U16 ButtonStatus; 
N	U16 ButtonEvent;	
N	U16 ButtonEventCount;	
N	U16 PreButtonEvent;	
N	U16 KeycodeTblIdx; 
N	U8  PreQIEStatus;
N}LPC11Uxx_Gpio_Setting;
N
N
NINTERFACE LPC11Uxx_Gpio_Setting g_GpioButtonEvent;
X LPC11Uxx_Gpio_Setting g_GpioButtonEvent;
N
N
N
NINTERFACE void FLEX_INT0_IRQHandler(void);
X void FLEX_INT0_IRQHandler(void);
NINTERFACE void FLEX_INT1_IRQHandler(void);
X void FLEX_INT1_IRQHandler(void);
NINTERFACE void FLEX_INT2_IRQHandler(void);
X void FLEX_INT2_IRQHandler(void);
NINTERFACE void FLEX_INT3_IRQHandler(void);
X void FLEX_INT3_IRQHandler(void);
NINTERFACE void FLEX_INT4_IRQHandler(void);
X void FLEX_INT4_IRQHandler(void);
NINTERFACE void FLEX_INT5_IRQHandler(void);
X void FLEX_INT5_IRQHandler(void);
NINTERFACE void FLEX_INT6_IRQHandler(void);
X void FLEX_INT6_IRQHandler(void);
NINTERFACE void FLEX_INT7_IRQHandler(void);
X void FLEX_INT7_IRQHandler(void);
NINTERFACE void GINT0_IRQHandler(void);
X void GINT0_IRQHandler(void);
NINTERFACE void GINT1_IRQHandler(void);
X void GINT1_IRQHandler(void);
NINTERFACE void nsAPI_GPIO_Init( void );
X void nsAPI_GPIO_Init( void );
NINTERFACE void NDrv_GPIO_SetBitValue(U32 portNum, U32 bitPosi, U32 bitVal );
X void NDrv_GPIO_SetBitValue(U32 portNum, U32 bitPosi, U32 bitVal );
NINTERFACE RetU32 nsAPI_GPIO_GetPinValue( U8 portNum, U32 bitPosi);
X RetU32 nsAPI_GPIO_GetPinValue( U8 portNum, U32 bitPosi);
NINTERFACE void NDrv_GPIO_SetDir( U32 portNum, U32 bitPosi, U32 dir );
X void NDrv_GPIO_SetDir( U32 portNum, U32 bitPosi, U32 dir );
NINTERFACE void nsAPI_GPIO_LEDSetting(U8 uPort, U32 uPosition, U8 uValue);
X void nsAPI_GPIO_LEDSetting(U8 uPort, U32 uPosition, U8 uValue);
NINTERFACE RetU8 nsAPI_GPIO_ScanButton(void);
X RetU8 nsAPI_GPIO_ScanButton(void);
NINTERFACE void nsAPI_GPIO_MouseButtonMonitor(void);
X void nsAPI_GPIO_MouseButtonMonitor(void);
NINTERFACE RetU16 nsAPI_GPIO_ChangingIndex(U16 u16Index);
X RetU16 nsAPI_GPIO_ChangingIndex(U16 u16Index);
NINTERFACE U8 nsAPI_GPIO_Get_QIE(void);
X U8 nsAPI_GPIO_Get_QIE(void);
NINTERFACE void nsAPI_GPIO_QIE_Monitor(void);
X void nsAPI_GPIO_QIE_Monitor(void);
NINTERFACE void nsAPI_GPIO_Macrokey_Monitor(void);
X void nsAPI_GPIO_Macrokey_Monitor(void);
N
N#undef INTERFACE
N#ifdef __cplusplus
S}
N#endif
N#endif /* end __GPIO_H */
N
L 10 ".\Inc\ssp.h" 2
N
N#ifdef  __SSP_C__
S#define INTERFACE
N#else
N#define INTERFACE extern
N#endif
N
N#if 0
S#define _DEBUG_SSP_(x) x
N#else
N#define _DEBUG_SSP_(x) 
N#endif
N
N
N/* SSP Clock div (0..255) */
N#define SCB_CLKDIV_DISABLE (0x00000000)
N#define SCB_CLKDIV_DIV1 (0x00000001)
N#define SCB_CLKDIV_DIV2 (0x00000002)
N#define SCB_CLKDIV_DIV3 (0x00000003)
N#define SCB_CLKDIV_DIV4 (0x00000004)
N#define SCB_CLKDIV_DIV5 (0x00000005)
N#define SCB_CLKDIV_DIV6 (0x00000006)
N#define SCB_CLKDIV_DIV7 (0x00000007)
N#define SCB_CLKDIV_DIV8 (0x00000008)
N#define SCB_CLKDIV_DIV9 (0x00000009)
N#define SCB_CLKDIV_DIV10 (0x0000000A)
N#define SCB_CLKDIV_DIV11 (0x0000000B)
N#define SCB_CLKDIV_DIV12 (0x0000000C)
N#define SCB_CLKDIV_DIV13 (0x0000000D)
N#define SCB_CLKDIV_DIV14 (0x0000000E)
N#define SCB_CLKDIV_DIV15 (0x0000000F)
N#define SCB_CLKDIV_DIV20 (0x00000014)
N#define SCB_CLKDIV_DIV25 (0x00000019)
N#define SCB_CLKDIV_DIV30 (0x0000001E)
N#define SCB_CLKDIV_DIV35 (0x00000033)
N#define SCB_CLKDIV_DIV40 (0x00000028)
N#define SCB_CLKDIV_DIV45 (0x0000002D)
N#define SCB_CLKDIV_MASK (0x000000FF)
N
N/* SSP Serial Clock Rate Values */
N#define SSP_SCR_1 (0x00000100)
N#define SSP_SCR_2 (0x00000200)
N#define SSP_SCR_3 (0x00000300)
N#define SSP_SCR_4 (0x00000400)
N#define SSP_SCR_5 (0x00000500)
N#define SSP_SCR_6 (0x00000600)
N#define SSP_SCR_7 (0x00000700)
N#define SSP_SCR_8 (0x00000800)
N#define SSP_SCR_9 (0x00000900)
N#define SSP_SCR_10 (0x00000A00)
N#define SSP_SCR_11 (0x00000B00)
N#define SSP_SCR_12 (0x00000C00)
N#define SSP_SCR_13 (0x00000D00)
N#define SSP_SCR_14 (0x00000E00)
N#define SSP_SCR_15 (0x00000F00)
N#define SSP_SCR_16 (0x00001000)
N#define SSP_SCR_23 (0x00001700)
N#define SSP_SCR_47 (0x00003F00)
N
N
N
N/*  Current status of the SSP controller.  */
N#define SSP_SR_TFE_MASK (0x00000001) // Transmit FIFO empty
N#define SSP_SR_TFE_EMPTY (0x00000001)
N#define SSP_SR_TFE_NOTEMPTY (0x00000000)
N#define SSP_SR_TNF_MASK (0x00000002) // Transmit FIFO not full
N#define SSP_SR_TNF_NOTFULL (0x00000002)
N#define SSP_SR_TNF_FULL (0x00000000)
N#define SSP_SR_RNE_MASK (0x00000004) // Receive FIFO not empty
N#define SSP_SR_RNE_NOTEMPTY (0x00000004)
N#define SSP_SR_RNE_EMPTY (0x00000000)
N#define SSP_SR_RFF_MASK (0x00000008) // Receive FIFO full
N#define SSP_SR_RFF_FULL (0x00000008)
N#define SSP_SR_RFF_NOTFULL (0x00000000)
N#define SSP_SR_BSY_MASK (0x00000010) // Busy Flag
N#define SSP_SR_BSY_IDLE (0x00000000)
N#define SSP_SR_BSY_BUSY (0x00000010)
N
N/* Control Register 1 */
N#define SSP_CR1_LBM_MASK BIT0 // Loop back mode
N#define SSP_CR1_LBM_NORMAL (0)
N#define SSP_CR1_LBM_INVERTED BIT0 // MISO/MOSI are reversed
N#define SSP_CR1_SSE_MASK BIT1 // SSP enable
N#define SSP_CR1_SSE_DISABLED (0)
N#define SSP_CR1_SSE_ENABLED BIT1
N#define SSP_CR1_MS_MASK BIT2 // Master/Slave Mode
N#define SSP_CR1_MS_MASTER (0)
N#define SSP_CR1_MS_SLAVE BIT2
N#define SSP_CR1_SOD_MASK BIT2 // Slave output disable
N
N
N 
N
NINTERFACE void SSP0_IRQHandler(void); 
Xextern void SSP0_IRQHandler(void); 
NINTERFACE void SSP1_IRQHandler(void); 
Xextern void SSP1_IRQHandler(void); 
NINTERFACE void nsAPI_SSP_Init(void);
Xextern void nsAPI_SSP_Init(void);
NINTERFACE void nsAPI_SSP_Send(U8 *buf, U16 length);
Xextern void nsAPI_SSP_Send(U8 *buf, U16 length);
NINTERFACE void nsAPI_SSP_Receive(U8 *buf, U16 length);
Xextern void nsAPI_SSP_Receive(U8 *buf, U16 length);
N
N 
N#undef INTERFACE
N#ifdef __cplusplus
S}
N#endif
N#endif
L 11 ".\Inc\Pixart_Sensor.h" 2
N#include "uart.h"
L 1 ".\Inc\uart.h" 1
N/****************************************************************************
N *   $Id:: uart.h 6172 2011-01-13 18:22:51Z usb00423                        $
N *   Project: NXP LPC11xx software example
N *
N *   Description:
N *     This file contains definition and prototype for UART configuration.
N *
N ****************************************************************************
N * Software that is described herein is for illustrative purposes only
N * which provides customers with programming information regarding the
N * products. This software is supplied "AS IS" without any warranties.
N * NXP Semiconductors assumes no responsibility or liability for the
N * use of the software, conveys no license or title under any patent,
N * copyright, or mask work right to the product. NXP Semiconductors
N * reserves the right to make changes in the software without
N * notification. NXP Semiconductors also make no representation or
N * warranty that such application will be suitable for the specified
N * use without further testing or modification.
N****************************************************************************/
N#ifndef __UART_H__ 
N#define __UART_H__
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#include "Type.h"
N
N#ifdef __UART_C__
S#define INTERFACE
N#else
N#define INTERFACE extern
N#endif
N
N
N#define RS485_ENABLED 0
N#define TX_INTERRUPT 0/* 0 if TX uses polling, 1 interrupt driven. */
N
N#define IER_RBR BIT0
N#define IER_THRE BIT1
N#define IER_RLS BIT2
N
N#define IIR_PEND (BIT0)
N#define IIR_RLS (BIT1|BIT0)
N#define IIR_RDA (BIT1)
N#define IIR_CTI (BIT2|BIT1)
N#define IIR_THRE (BIT0)
N
N#define LSR_RDR BIT0
N#define LSR_OE BIT1
N#define LSR_PE BIT2
N#define LSR_FE BIT3
N#define LSR_BI BIT4
N#define LSR_THRE BIT5
N#define LSR_TEMT BIT6
N#define LSR_RXFE BIT7
N
N#define UARTBUFSIZE 20
N#define BR 115200
N
N/* RS485 mode definition. */
N#define RS485_NMMEN BIT0
N#define RS485_RXDIS BIT1
N#define RS485_AADEN	BIT2
N#define RS485_SEL BIT3
N#define RS485_DCTRL BIT4
N#define RS485_OINV BIT5
N
Ntypedef struct _LPC11Uxx_Uart_Setting_
N{
N	U32 UartStatus; 
N	U8 UartBuffer[UARTBUFSIZE];
X	U8 UartBuffer[20];
N	U8 UartCount;
N}LPC11Uxx_Uart_Setting;
N
NINTERFACE LPC11Uxx_Uart_Setting g_Uart_Setting;
Xextern LPC11Uxx_Uart_Setting g_Uart_Setting;
N
Nvoid ModemInit( void );
NINTERFACE void nsAPI_UART_Init(uint32_t Baudrate);
Xextern void nsAPI_UART_Init(uint32_t Baudrate);
NINTERFACE void UART_IRQHandler(void);
Xextern void UART_IRQHandler(void);
NINTERFACE void nsAPI_UART_Send(U8 *BufferPtr, U32 Length);
Xextern void nsAPI_UART_Send(U8 *BufferPtr, U32 Length);
NINTERFACE void xprintf(U8 *pFmt,U32 wVal,...);
Xextern void xprintf(U8 *pFmt,U32 wVal,...);
N
N#undef INTERFACE
N#ifdef __cplusplus
S}
N#endif
N#endif /* end __UART_H */
N
L 12 ".\Inc\Pixart_Sensor.h" 2
N#include "I2C.h"
L 1 ".\Inc\I2C.h" 1
N/*****************************************************************************
N *   i2c.h:  Header file for NXP LPC11xx Family Microprocessors
N *
N *   Copyright(C) 2006, NXP Semiconductor
N *   All rights reserved.
N *
N *   History
N *   2006.07.19  ver 1.00    Preliminary version, first Release
N *
N******************************************************************************/
N#ifndef __I2C_H__ 
N#define __I2C_H__
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#include "Type.h"
N
N#ifdef  __I2C_C__
S#define INTERFACE
N#else
N#define INTERFACE extern
N#endif
N
N#if 0
S#define _DEBUG_I2C_(x) x
N#else
N#define _DEBUG_I2C_(x) 
N#endif
N
N#define I2CBUFSIZE 4
N#define MAX_TIMEOUT 0x00FFFFFF
N
N#define AT24C512_ADDR 0xA0
N#define READ_STATUS 0x01
N
N#define I2C_BUS_IDLE 0
N#define I2C_BUS_WRITE 1
N#define I2C_BUS_READ 2
N
N#define I2C_IDLE 0
N#define I2C_DEVICEARD 1
N#define I2C_FWORDARD 2
N#define I2C_SWORDARD 3
N#define I2C_RESTARTED 4
N#define I2C_REPEATED_START 5
N#define DATA_ACK 6
N#define DATA_NACK 7
N
N#define I2CONSET_I2EN BIT6/* I2C Control Set Register */
N#define I2CONSET_AA BIT2
N#define I2CONSET_SI BIT3
N#define I2CONSET_STO BIT4
N#define I2CONSET_STA BIT5
N
N#define I2CONCLR_AAC BIT2/* I2C Control clear Register */
N#define I2CONCLR_SIC BIT3
N#define I2CONCLR_STAC BIT5
N#define I2CONCLR_I2ENC BIT6
N
N#define I2C_SPEED 400000UL//400K
N#define I2SCLH_SCLH (SystemCoreClock / I2C_SPEED) / 2/* I2C SCL Duty Cycle High Reg */
N#define I2SCLL_SCLL I2SCLH_SCLH/* I2C SCL Duty Cycle Low Reg */
N
Ntypedef struct _LPC11Uxx_I2C_Setting_
N{	
N	U8 I2CMasterState;
N	U8 I2CDeviceAdr;
N	U8 I2CBusState;		
N	U8 I2CMasterBuffer[I2CBUFSIZE];
X	U8 I2CMasterBuffer[4];
N	U8 I2CSlaveBuffer[I2CBUFSIZE];
X	U8 I2CSlaveBuffer[4];
N	U8 I2CReadLength;
N	U8 I2CWriteLength;	
N	U8 RdIndex;
N	U8 WrIndex;	
N	U16 I2CWordAdr;
N} LPC11Uxx_I2C_Setting;
N
NINTERFACE LPC11Uxx_I2C_Setting g_I2C_Setting;
Xextern LPC11Uxx_I2C_Setting g_I2C_Setting;
N
NINTERFACE void I2C_IRQHandler(void);
Xextern void I2C_IRQHandler(void);
NINTERFACE void nsAPI_I2C_Init(void);
Xextern void nsAPI_I2C_Init(void);
NINTERFACE void NDrv_API_I2C_Stop(void);
Xextern void NDrv_API_I2C_Stop(void);
NINTERFACE void nsAPI_I2C_Write(void);
Xextern void nsAPI_I2C_Write(void);
NINTERFACE void nsAPI_I2C_Read(void);
Xextern void nsAPI_I2C_Read(void);
NINTERFACE void nsAPI_I2C_Write_Database(U16 u16Adr,U8 *pBuf);
Xextern void nsAPI_I2C_Write_Database(U16 u16Adr,U8 *pBuf);
NINTERFACE RetU8 nsAPI_I2C_Read_Database(U16 u16Adr);
Xextern RetU8 nsAPI_I2C_Read_Database(U16 u16Adr);
N
N#undef INTERFACE
N#ifdef __cplusplus
S}
N#endif
N#endif /* end __I2C_H */
N
L 13 ".\Inc\Pixart_Sensor.h" 2
N#include "Gpio.h"
N#include "uart.h"
N#include "timer16.h"
L 1 ".\Inc\timer16.h" 1
N/****************************************************************************
N *   $Id:: timer16.h 6956 2011-03-23 23:03:25Z usb00423                     $
N *   Project: NXP LPC11xx software example
N *
N *   Description:
N *     This file contains definition and prototype for 16-bit timer 
N *     configuration.
N *
N ****************************************************************************
N * Software that is described herein is for illustrative purposes only
N * which provides customers with programming information regarding the
N * products. This software is supplied "AS IS" without any warranties.
N * NXP Semiconductors assumes no responsibility or liability for the
N * use of the software, conveys no license or title under any patent,
N * copyright, or mask work right to the product. NXP Semiconductors
N * reserves the right to make changes in the software without
N * notification. NXP Semiconductors also make no representation or
N * warranty that such application will be suitable for the specified
N * use without further testing or modification.
N****************************************************************************/
N#ifndef __TIMER16_H__ 
N#define __TIMER16_H__
N
N#ifdef __cplusplus
Sextern "C" {
N#endif 
N
N#include "type.h"
N	
N#ifdef __TIMER16_C__
S#define INTERFACE
N#else
N#define INTERFACE extern
N#endif
N
N
N#define Timer16_0 0
N#define Timer16_1 1
N///* For 16-bit timer, make sure that TIME_INTERVAL should be no
N//greater than 0xFFFF. */
N#define Timer16_IntervalmS 1000UL 
N#define Timer16_MHz_Prescale (SystemCoreClock/1000000UL)
N
Ntypedef struct _LPC11Uxx_Timer16_Setting_
N{
N	U32 Timer16_0_Counter[2];
N	U32 Timer16_1_Counter[2];
N	
N} LPC11Uxx_Timer16_Setting;
N
NINTERFACE LPC11Uxx_Timer16_Setting g_Timer16_Setting;
Xextern LPC11Uxx_Timer16_Setting g_Timer16_Setting;
N
NINTERFACE void TIMER16_0_IRQHandler(void);
Xextern void TIMER16_0_IRQHandler(void);
NINTERFACE void TIMER16_1_IRQHandler(void);
Xextern void TIMER16_1_IRQHandler(void);
NINTERFACE void NDrv_Timer16_Enable(U8 timer_num);
Xextern void NDrv_Timer16_Enable(U8 timer_num);
NINTERFACE void NDrv_Timer16_Disable(U8 timer_num);
Xextern void NDrv_Timer16_Disable(U8 timer_num);
NINTERFACE void NDrv_Timer16_Reset(U8 timer_num);
Xextern void NDrv_Timer16_Reset(U8 timer_num);
NINTERFACE void nsAPI_Timer16_Init(U8 timer_num, U32 timer);
Xextern void nsAPI_Timer16_Init(U8 timer_num, U32 timer);
N
N#undef INTERFACE
N#ifdef __cplusplus
S}
N#endif 
N#endif /* end __TIMER16_H */
N
L 16 ".\Inc\Pixart_Sensor.h" 2
N#include "timer32.h"
L 1 ".\Inc\timer32.h" 1
N/****************************************************************************
N *   $Id:: timer32.h 6956 2011-03-23 23:03:25Z usb00423                     $
N *   Project: NXP LPC11xx software example
N *
N *   Description:
N *     This file contains definition and prototype for 32-bit timer 
N *     configuration.
N *
N ****************************************************************************
N * Software that is described herein is for illustrative purposes only
N * which provides customers with programming information regarding the
N * products. This software is supplied "AS IS" without any warranties.
N * NXP Semiconductors assumes no responsibility or liability for the
N * use of the software, conveys no license or title under any patent,
N * copyright, or mask work right to the product. NXP Semiconductors
N * reserves the right to make changes in the software without
N * notification. NXP Semiconductors also make no representation or
N * warranty that such application will be suitable for the specified
N * use without further testing or modification.
N****************************************************************************/
N#ifndef __TIMER32_H__ 
N#define __TIMER32_H__
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#include "Type.h"
N
N#ifdef  __TIMER32_C__
S#define INTERFACE
N#else
N#define INTERFACE extern
N#endif
N
N#define EMC0	4
N#define EMC1	6
N#define EMC2	8
N#define EMC3	10
N
N#define MATCH0 BIT0
N#define MATCH1 BIT1
N#define MATCH2 BIT2
N#define MATCH3 BIT3
N
N#define Timer32_0 0
N#define Timer32_1 1
N
N
N
N#define BREATHING_FREQ_GAP 100
N#define BREATHING_DELAY_TIMER 40
N#define BREATHING_STEP 2
N
N#define PWM_MATCH_ENABLE (MATCH2|MATCH1|MATCH0)
N#define Timer32_IntervalmS 1000UL 
N#define Timer32_MHz_Prescale (SystemCoreClock/1000000UL)
N
Ntypedef enum _Timer32_LED_Type_
N{
N	LED_NORMAL = 0,
N	LED_BREATHING   
N}Timer32_LED_Type;
N
N
N#define BREATHING_STEP_RESETTING BIT0
N
Ntypedef struct _LPC11Uxx_TIMER32_LED_SETTING_
N{
N	Timer32_LED_Type LEDStatusType;/* 0 -> Normal : 1 -> Breathing */	
N	U8 BreathingStatusType;/*1 -> Inc : 0 -> Dec*/
N	U8 BreathingStep; 
N	U8 BreathingStepStatus; 
N	U32 BreathingDelayCount;
N	U32 CurBreathingFreq;
N	U32 PreBreathingFreq;	
N}LPC11Uxx_TIMER32_LED_SETTING;
N
NINTERFACE LPC11Uxx_TIMER32_LED_SETTING g_Timer32_LED_Setting; 
Xextern LPC11Uxx_TIMER32_LED_SETTING g_Timer32_LED_Setting; 
N
NINTERFACE void TIMER32_0_IRQHandler(void);
Xextern void TIMER32_0_IRQHandler(void);
NINTERFACE void TIMER32_1_IRQHandler(void);
Xextern void TIMER32_1_IRQHandler(void);
NINTERFACE void NDrv_Timer32_Enable(U8 timer_num);
Xextern void NDrv_Timer32_Enable(U8 timer_num);
NINTERFACE void NDrv_Timer32_Disable(U8 timer_num);
Xextern void NDrv_Timer32_Disable(U8 timer_num);
NINTERFACE void NDrv_Timer32_Reset(U8 timer_num);
Xextern void NDrv_Timer32_Reset(U8 timer_num);
NINTERFACE void nsAPI_Timer32_Setting_MatchFunction(uint8_t timer_num, uint8_t match_enable, uint8_t location);
Xextern void nsAPI_Timer32_Setting_MatchFunction(uint8_t timer_num, uint8_t match_enable, uint8_t location);
NINTERFACE void nsAPI_Timer32PWM_Init(U8 timer_num, U32 period, U8 match_enable);
Xextern void nsAPI_Timer32PWM_Init(U8 timer_num, U32 period, U8 match_enable);
NINTERFACE void NDrv_Timer32PWM_ReSettingMatch(U8 timer_num, U32 period);
Xextern void NDrv_Timer32PWM_ReSettingMatch(U8 timer_num, U32 period);
NINTERFACE void NDrv_Timer32PWM_Breathing(void);
Xextern void NDrv_Timer32PWM_Breathing(void);
NINTERFACE RetU32 nsAPI_Timer32PWM_GetCurBreathingFreqValue(void);
Xextern RetU32 nsAPI_Timer32PWM_GetCurBreathingFreqValue(void);
NINTERFACE void nsAPI_Timer32PWM_Breathing_ReSetting(U8 u8Breathing);
Xextern void nsAPI_Timer32PWM_Breathing_ReSetting(U8 u8Breathing);
Nextern void init_timer32(U32 timer );
N
N#undef INTERFACE
N#ifdef __cplusplus
S}
N#endif
N#endif /* end __TIMER32_H */
N
L 17 ".\Inc\Pixart_Sensor.h" 2
N#include "hid.h"
L 1 ".\Inc\hid.h" 1
N/*----------------------------------------------------------------------------
N *      U S B  -  K e r n e l
N *----------------------------------------------------------------------------
N *      Name:    HID.H
N *      Purpose: USB HID (Human Interface Device) Definitions
N *      Version: V1.20
N *----------------------------------------------------------------------------
N *      This software is supplied "AS IS" without any warranties, express,
N *      implied or statutory, including but not limited to the implied
N *      warranties of fitness for purpose, satisfactory quality and
N *      noninfringement. Keil extends you a royalty-free right to reproduce
N *      and distribute executable files created using this software for use
N *      on NXP Semiconductors LPC microcontroller devices only. Nothing else 
N *      gives you the right to use this software.
N *
N * Copyright (c) 2009 Keil - An ARM Company. All rights reserved.
N *---------------------------------------------------------------------------*/
N
N#ifndef __HID_H__
N#define __HID_H__
N
N
N/* HID Subclass Codes */
N#define HID_SUBCLASS_NONE 0x00
N#define HID_SUBCLASS_BOOT 0x01
N/* HID Protocol Codes */
N#define HID_PROTOCOL_NONE 0x00
N#define HID_PROTOCOL_KEYBOARD 0x01
N#define HID_PROTOCOL_MOUSE 0x02
N/* HID Descriptor Types */
N#define HID_HID_DESCRIPTOR_TYPE 0x21
N#define HID_REPORT_DESCRIPTOR_TYPE 0x22
N#define HID_PHYSICAL_DESCRIPTOR_TYPE 0x23
N/* HID Descriptor */
Ntypedef __packed struct _HID_DESCRIPTOR_
N{
N	uint8_t  bLength;
N	uint8_t  bDescriptorType;
N	uint16_t bcdHID;
N	uint8_t  bCountryCode;
N	uint8_t  bNumDescriptors;
N	/* Array of one or more descriptors */
N	__packed struct _HID_DESCRIPTOR_LIST_
N	{
N		uint8_t  bDescriptorType;
N		uint16_t wDescriptorLength;
N	} DescriptorList[1];
N} HID_DESCRIPTOR;
N
N
N/* HID Request Codes */
N#define HID_REQUEST_GET_REPORT          0x01
N#define HID_REQUEST_GET_IDLE            0x02
N#define HID_REQUEST_GET_PROTOCOL        0x03
N#define HID_REQUEST_SET_REPORT          0x09
N#define HID_REQUEST_SET_IDLE            0x0A
N#define HID_REQUEST_SET_PROTOCOL        0x0B
N/* HID Report Types */
N#define HID_REPORT_INPUT                0x01
N#define HID_REPORT_OUTPUT               0x02
N#define HID_REPORT_FEATURE              0x03
N/* Usage Pages */
N#define HID_USAGE_PAGE_UNDEFINED        0x00
N#define HID_USAGE_PAGE_GENERIC          0x01
N#define HID_USAGE_PAGE_SIMULATION       0x02
N#define HID_USAGE_PAGE_VR               0x03
N#define HID_USAGE_PAGE_SPORT            0x04
N#define HID_USAGE_PAGE_GAME             0x05
N#define HID_USAGE_PAGE_DEV_CONTROLS     0x06
N#define HID_USAGE_PAGE_KEYBOARD         0x07
N#define HID_USAGE_PAGE_LED              0x08
N#define HID_USAGE_PAGE_BUTTON           0x09
N#define HID_USAGE_PAGE_ORDINAL          0x0A
N#define HID_USAGE_PAGE_TELEPHONY        0x0B
N#define HID_USAGE_PAGE_CONSUMER         0x0C
N#define HID_USAGE_PAGE_DIGITIZER        0x0D
N#define HID_USAGE_PAGE_UNICODE          0x10
N#define HID_USAGE_PAGE_ALPHANUMERIC     0x14
N/* ... */
N/* Generic Desktop Page (0x01) */
N#define HID_USAGE_GENERIC_POINTER               0x01
N#define HID_USAGE_GENERIC_MOUSE                 0x02
N#define HID_USAGE_GENERIC_JOYSTICK              0x04
N#define HID_USAGE_GENERIC_GAMEPAD               0x05
N#define HID_USAGE_GENERIC_KEYBOARD              0x06
N#define HID_USAGE_GENERIC_KEYPAD                0x07
N#define HID_USAGE_GENERIC_X                     0x30
N#define HID_USAGE_GENERIC_Y                     0x31
N#define HID_USAGE_GENERIC_Z                     0x32
N#define HID_USAGE_GENERIC_RX                    0x33
N#define HID_USAGE_GENERIC_RY                    0x34
N#define HID_USAGE_GENERIC_RZ                    0x35
N#define HID_USAGE_GENERIC_SLIDER                0x36
N#define HID_USAGE_GENERIC_DIAL                  0x37
N#define HID_USAGE_GENERIC_WHEEL                 0x38
N#define HID_USAGE_GENERIC_HATSWITCH             0x39
N#define HID_USAGE_GENERIC_COUNTED_BUFFER        0x3A
N#define HID_USAGE_GENERIC_BYTE_COUNT            0x3B
N#define HID_USAGE_GENERIC_MOTION_WAKEUP         0x3C
N#define HID_USAGE_GENERIC_VX                    0x40
N#define HID_USAGE_GENERIC_VY                    0x41
N#define HID_USAGE_GENERIC_VZ                    0x42
N#define HID_USAGE_GENERIC_VBRX                  0x43
N#define HID_USAGE_GENERIC_VBRY                  0x44
N#define HID_USAGE_GENERIC_VBRZ                  0x45
N#define HID_USAGE_GENERIC_VNO                   0x46
N#define HID_USAGE_GENERIC_SYSTEM_CTL            0x80
N#define HID_USAGE_GENERIC_SYSCTL_POWER          0x81
N#define HID_USAGE_GENERIC_SYSCTL_SLEEP          0x82
N#define HID_USAGE_GENERIC_SYSCTL_WAKE           0x83
N#define HID_USAGE_GENERIC_SYSCTL_CONTEXT_MENU   0x84
N#define HID_USAGE_GENERIC_SYSCTL_MAIN_MENU      0x85
N#define HID_USAGE_GENERIC_SYSCTL_APP_MENU       0x86
N#define HID_USAGE_GENERIC_SYSCTL_HELP_MENU      0x87
N#define HID_USAGE_GENERIC_SYSCTL_MENU_EXIT      0x88
N#define HID_USAGE_GENERIC_SYSCTL_MENU_SELECT    0x89
N#define HID_USAGE_GENERIC_SYSCTL_MENU_RIGHT     0x8A
N#define HID_USAGE_GENERIC_SYSCTL_MENU_LEFT      0x8B
N#define HID_USAGE_GENERIC_SYSCTL_MENU_UP        0x8C
N#define HID_USAGE_GENERIC_SYSCTL_MENU_DOWN      0x8D
N/* ... */
N/* Simulation Controls Page (0x02) */
N/* ... */
N#define HID_USAGE_SIMULATION_RUDDER             0xBA
N#define HID_USAGE_SIMULATION_THROTTLE           0xBB
N/* ... */
N
N/* Virtual Reality Controls Page (0x03) */
N/* ... */
N
N/* Sport Controls Page (0x04) */
N/* ... */
N
N/* Game Controls Page (0x05) */
N/* ... */
N
N/* Generic Device Controls Page (0x06) */
N/* ... */
N
N/* Keyboard/Keypad Page (0x07) */
N
N/* Error "keys" */
N#define HID_USAGE_KEYBOARD_NOEVENT              0x00
N#define HID_USAGE_KEYBOARD_ROLLOVER             0x01
N#define HID_USAGE_KEYBOARD_POSTFAIL             0x02
N#define HID_USAGE_KEYBOARD_UNDEFINED            0x03
N
N/* Letters */
N#define HID_USAGE_KEYBOARD_aA                   0x04
N#define HID_USAGE_KEYBOARD_zZ                   0x1D
N
N/* Numbers */
N#define HID_USAGE_KEYBOARD_ONE                  0x1E
N#define HID_USAGE_KEYBOARD_ZERO                 0x27
N
N#define HID_USAGE_KEYBOARD_RETURN               0x28
N#define HID_USAGE_KEYBOARD_ESCAPE               0x29
N#define HID_USAGE_KEYBOARD_DELETE               0x2A
N
N/* Funtion keys */
N#define HID_USAGE_KEYBOARD_F1                   0x3A
N#define HID_USAGE_KEYBOARD_F12                  0x45
N
N#define HID_USAGE_KEYBOARD_PRINT_SCREEN         0x46
N
N/* Modifier Keys */
N#define HID_USAGE_KEYBOARD_LCTRL                0xE0
N#define HID_USAGE_KEYBOARD_LSHFT                0xE1
N#define HID_USAGE_KEYBOARD_LALT                 0xE2
N#define HID_USAGE_KEYBOARD_LGUI                 0xE3
N#define HID_USAGE_KEYBOARD_RCTRL                0xE4
N#define HID_USAGE_KEYBOARD_RSHFT                0xE5
N#define HID_USAGE_KEYBOARD_RALT                 0xE6
N#define HID_USAGE_KEYBOARD_RGUI                 0xE7
N#define HID_USAGE_KEYBOARD_SCROLL_LOCK          0x47
N#define HID_USAGE_KEYBOARD_NUM_LOCK             0x53
N#define HID_USAGE_KEYBOARD_CAPS_LOCK            0x39
N/* ... */
N/* LED Page (0x08) */
N#define HID_USAGE_LED_NUM_LOCK                  0x01
N#define HID_USAGE_LED_CAPS_LOCK                 0x02
N#define HID_USAGE_LED_SCROLL_LOCK               0x03
N#define HID_USAGE_LED_COMPOSE                   0x04
N#define HID_USAGE_LED_KANA                      0x05
N#define HID_USAGE_LED_POWER                     0x06
N#define HID_USAGE_LED_SHIFT                     0x07
N#define HID_USAGE_LED_DO_NOT_DISTURB            0x08
N#define HID_USAGE_LED_MUTE                      0x09
N#define HID_USAGE_LED_TONE_ENABLE               0x0A
N#define HID_USAGE_LED_HIGH_CUT_FILTER           0x0B
N#define HID_USAGE_LED_LOW_CUT_FILTER            0x0C
N#define HID_USAGE_LED_EQUALIZER_ENABLE          0x0D
N#define HID_USAGE_LED_SOUND_FIELD_ON            0x0E
N#define HID_USAGE_LED_SURROUND_FIELD_ON         0x0F
N#define HID_USAGE_LED_REPEAT                    0x10
N#define HID_USAGE_LED_STEREO                    0x11
N#define HID_USAGE_LED_SAMPLING_RATE_DETECT      0x12
N#define HID_USAGE_LED_SPINNING                  0x13
N#define HID_USAGE_LED_CAV                       0x14
N#define HID_USAGE_LED_CLV                       0x15
N#define HID_USAGE_LED_RECORDING_FORMAT_DET      0x16
N#define HID_USAGE_LED_OFF_HOOK                  0x17
N#define HID_USAGE_LED_RING                      0x18
N#define HID_USAGE_LED_MESSAGE_WAITING           0x19
N#define HID_USAGE_LED_DATA_MODE                 0x1A
N#define HID_USAGE_LED_BATTERY_OPERATION         0x1B
N#define HID_USAGE_LED_BATTERY_OK                0x1C
N#define HID_USAGE_LED_BATTERY_LOW               0x1D
N#define HID_USAGE_LED_SPEAKER                   0x1E
N#define HID_USAGE_LED_HEAD_SET                  0x1F
N#define HID_USAGE_LED_HOLD                      0x20
N#define HID_USAGE_LED_MICROPHONE                0x21
N#define HID_USAGE_LED_COVERAGE                  0x22
N#define HID_USAGE_LED_NIGHT_MODE                0x23
N#define HID_USAGE_LED_SEND_CALLS                0x24
N#define HID_USAGE_LED_CALL_PICKUP               0x25
N#define HID_USAGE_LED_CONFERENCE                0x26
N#define HID_USAGE_LED_STAND_BY                  0x27
N#define HID_USAGE_LED_CAMERA_ON                 0x28
N#define HID_USAGE_LED_CAMERA_OFF                0x29
N#define HID_USAGE_LED_ON_LINE                   0x2A
N#define HID_USAGE_LED_OFF_LINE                  0x2B
N#define HID_USAGE_LED_BUSY                      0x2C
N#define HID_USAGE_LED_READY                     0x2D
N#define HID_USAGE_LED_PAPER_OUT                 0x2E
N#define HID_USAGE_LED_PAPER_JAM                 0x2F
N#define HID_USAGE_LED_REMOTE                    0x30
N#define HID_USAGE_LED_FORWARD                   0x31
N#define HID_USAGE_LED_REVERSE                   0x32
N#define HID_USAGE_LED_STOP                      0x33
N#define HID_USAGE_LED_REWIND                    0x34
N#define HID_USAGE_LED_FAST_FORWARD              0x35
N#define HID_USAGE_LED_PLAY                      0x36
N#define HID_USAGE_LED_PAUSE                     0x37
N#define HID_USAGE_LED_RECORD                    0x38
N#define HID_USAGE_LED_ERROR                     0x39
N#define HID_USAGE_LED_SELECTED_INDICATOR 0x3A
N#define HID_USAGE_LED_IN_USE_INDICATOR 0x3B
N#define HID_USAGE_LED_MULTI_MODE_INDICATOR 0x3C
N#define HID_USAGE_LED_INDICATOR_ON 0x3D
N#define HID_USAGE_LED_INDICATOR_FLASH 0x3E
N#define HID_USAGE_LED_INDICATOR_SLOW_BLINK 0x3F
N#define HID_USAGE_LED_INDICATOR_FAST_BLINK 0x40
N#define HID_USAGE_LED_INDICATOR_OFF 0x41
N#define HID_USAGE_LED_FLASH_ON_TIME 0x42
N#define HID_USAGE_LED_SLOW_BLINK_ON_TIME 0x43
N#define HID_USAGE_LED_SLOW_BLINK_OFF_TIME 0x44
N#define HID_USAGE_LED_FAST_BLINK_ON_TIME 0x45
N#define HID_USAGE_LED_FAST_BLINK_OFF_TIME 0x46
N#define HID_USAGE_LED_INDICATOR_COLOR 0x47
N#define HID_USAGE_LED_RED 0x48
N#define HID_USAGE_LED_GREEN 0x49
N#define HID_USAGE_LED_AMBER 0x4A
N#define HID_USAGE_LED_GENERIC_INDICATOR 0x4B
N/* Button Page (0x09) */
N/* There is no need to label these usages. */
N/* Ordinal Page (0x0A) */
N/* There is no need to label these usages. */
N/* Telephony Device Page (0x0B) */
N#define HID_USAGE_TELEPHONY_PHONE 0x01
N#define HID_USAGE_TELEPHONY_ANSWERING_MACHINE 0x02
N#define HID_USAGE_TELEPHONY_MESSAGE_CONTROLS 0x03
N#define HID_USAGE_TELEPHONY_HANDSET 0x04
N#define HID_USAGE_TELEPHONY_HEADSET 0x05
N#define HID_USAGE_TELEPHONY_KEYPAD 0x06
N#define HID_USAGE_TELEPHONY_PROGRAMMABLE_BUTTON 0x07
N/* ... */
N/* Consumer Page (0x0C) */
N#define HID_USAGE_CONSUMER_CONTROL 0x01
N/* ... */
N/* and others ... */
N/* HID Report Item Macros */
N/* Main Items */
N#define HID_Input(x) 0x81,x
N#define HID_Output(x) 0x91,x
N#define HID_Feature(x) 0xB1,x
N#define HID_Collection(x) 0xA1,x
N#define HID_EndCollection 0xC0
N
N/* Data (Input, Output, Feature) */
N#define HID_Data               0<<0
N#define HID_Constant           1<<0
N#define HID_Array              0<<1
N#define HID_Variable           1<<1
N#define HID_Absolute           0<<2
N#define HID_Relative           1<<2
N#define HID_NoWrap             0<<3
N#define HID_Wrap               1<<3
N#define HID_Linear             0<<4
N#define HID_NonLinear          1<<4
N#define HID_PreferredState     0<<5
N#define HID_NoPreferred        1<<5
N#define HID_NoNullPosition     0<<6
N#define HID_NullState          1<<6
N#define HID_NonVolatile        0<<7
N#define HID_Volatile           1<<7
N
N/* Collection Data */
N#define HID_Physical           0x00
N#define HID_Application        0x01
N#define HID_Logical            0x02
N#define HID_Report             0x03
N#define HID_NamedArray         0x04
N#define HID_UsageSwitch        0x05
N#define HID_UsageModifier      0x06
N
N/* Global Items */
N#define HID_UsagePage(x)       0x05,x
N#define HID_UsagePageVendor(x) 0x06,x,0xFF
N#define HID_LogicalMin(x)      0x15,x
N#define HID_LogicalMinS(x)     0x16,(x&0xFF),((x>>8)&0xFF)
N#define HID_LogicalMinL(x)     0x17,(x&0xFF),((x>>8)&0xFF),((x>>16)&0xFF),((x>>24)&0xFF)
N#define HID_LogicalMax(x)      0x25,x
N#define HID_LogicalMaxS(x)     0x26,(x&0xFF),((x>>8)&0xFF)
N#define HID_LogicalMaxL(x)     0x27,(x&0xFF),((x>>8)&0xFF),((x>>16)&0xFF),((x>>24)&0xFF)
N#define HID_PhysicalMin(x)     0x35,x
N#define HID_PhysicalMinS(x)    0x36,(x&0xFF),((x>>8)&0xFF)
N#define HID_PhysicalMinL(x)    0x37,(x&0xFF),((x>>8)&0xFF),((x>>16)&0xFF),((x>>24)&0xFF)
N#define HID_PhysicalMax(x)     0x45,x
N#define HID_PhysicalMaxS(x)    0x46,(x&0xFF),((x>>8)&0xFF)
N#define HID_PhysicalMaxL(x)    0x47,(x&0xFF),((x>>8)&0xFF),((x>>16)&0xFF),((x>>24)&0xFF)
N#define HID_UnitExponent(x)    0x55,x
N#define HID_Unit(x)            0x65,x
N#define HID_UnitS(x)           0x66,(x&0xFF),((x>>8)&0xFF)
N#define HID_UnitL(x)           0x67,(x&0xFF),((x>>8)&0xFF),((x>>16)&0xFF),((x>>24)&0xFF)
N#define HID_ReportSize(x)      0x75,x
N#define HID_ReportID(x)        0x85,x
N#define HID_ReportCount(x)     0x95,x
N#define HID_Push               0xA0
N#define HID_Pop                0xB0
N
N/* Local Items */
N#define HID_Usage(x)           0x09,x
N#define HID_UsageMin(x)        0x19,x
N#define HID_UsageMax(x)        0x29,x
N#endif  /* __HID_H__ */
N
L 18 ".\Inc\Pixart_Sensor.h" 2
N#include "usb.h"
L 1 ".\Inc\usb.h" 1
N/*----------------------------------------------------------------------------
N *      U S B  -  K e r n e l
N *----------------------------------------------------------------------------
N * Name:    usb.h
N * Purpose: USB Definitions
N * Version: V1.20
N *----------------------------------------------------------------------------
N *      This software is supplied "AS IS" without any warranties, express,
N *      implied or statutory, including but not limited to the implied
N *      warranties of fitness for purpose, satisfactory quality and
N *      noninfringement. Keil extends you a royalty-free right to reproduce
N *      and distribute executable files created using this software for use
N *      on NXP Semiconductors LPC family microcontroller devices only. Nothing 
N *      else gives you the right to use this software.
N *
N * Copyright (c) 2009 Keil - An ARM Company. All rights reserved.
N *---------------------------------------------------------------------------*/
N
N#ifndef __USB_H__
N#define __USB_H__
N
N#include "Type.h"
N
N#define ALIGNED(n) __align(n)
N
Ntypedef __packed union
N{
N	U16 W;
N	__packed struct
N	{
N		U8 L;
N		U8 H;
N	} WB;
N} WORD_BYTE;
N
N/* bmRequestType.Dir */
N#define REQUEST_HOST_TO_DEVICE 0
N#define REQUEST_DEVICE_TO_HOST 1
N/* bmRequestType.Type */
N#define REQUEST_STANDARD 0
N#define REQUEST_CLASS 1
N#define REQUEST_VENDOR 2
N#define REQUEST_RESERVED 3
N/* bmRequestType.Recipient */
N#define REQUEST_TO_DEVICE 0
N#define REQUEST_TO_INTERFACE 1
N#define REQUEST_TO_ENDPOINT 2
N#define REQUEST_TO_OTHER 3
N
N/* bmRequestType Definition */
Ntypedef __packed union _REQUEST_TYPE_
N{
N	__packed struct _BM_
N	{
N		uint8_t Recipient : 5;
N		uint8_t Type : 2;
N		uint8_t Dir : 1;
N	} BM;
N	uint8_t B;
N} REQUEST_TYPE;
N
N/* USB Standard Request Codes */
N#define USB_REQUEST_GET_STATUS 0
N#define USB_REQUEST_CLEAR_FEATURE 1
N#define USB_REQUEST_SET_FEATURE 3
N#define USB_REQUEST_SET_ADDRESS 5
N#define USB_REQUEST_GET_DESCRIPTOR 6
N#define USB_REQUEST_SET_DESCRIPTOR 7
N#define USB_REQUEST_GET_CONFIGURATION 8
N#define USB_REQUEST_SET_CONFIGURATION 9
N#define USB_REQUEST_GET_INTERFACE 10
N#define USB_REQUEST_SET_INTERFACE 11
N#define USB_REQUEST_SYNC_FRAME 12
N/* USB GET_STATUS Bit Values */
N#define USB_GETSTATUS_SELF_POWERED BIT0
N#define USB_GETSTATUS_REMOTE_WAKEUP BIT1
N#define USB_GETSTATUS_ENDPOINT_STALL BIT0
N/* USB Standard Feature selectors */
N#define USB_FEATURE_ENDPOINT_STALL 0
N#define USB_FEATURE_REMOTE_WAKEUP BIT0
N
N/* USB Default Control Pipe Setup Packet */
Ntypedef __packed struct _USB_SETUP_PACKET_ 
N{
N	REQUEST_TYPE bmRequestType;
N	U8 bRequest;
N	WORD_BYTE wValue;
N	WORD_BYTE wIndex;
N	U16 wLength;
N} USB_SETUP_PACKET;
N
N
N/* USB Descriptor Types */
N#define USB_DEVICE_DESCRIPTOR_TYPE 1
N#define USB_CONFIGURATION_DESCRIPTOR_TYPE 2
N#define USB_STRING_DESCRIPTOR_TYPE 3
N#define USB_INTERFACE_DESCRIPTOR_TYPE 4
N#define USB_ENDPOINT_DESCRIPTOR_TYPE 5
N#define USB_DEVICE_QUALIFIER_DESCRIPTOR_TYPE 6
N#define USB_OTHER_SPEED_CONFIG_DESCRIPTOR_TYPE 7
N#define USB_INTERFACE_POWER_DESCRIPTOR_TYPE 8
N#define USB_OTG_DESCRIPTOR_TYPE 9
N#define USB_DEBUG_DESCRIPTOR_TYPE 10
N#define USB_INTERFACE_ASSOCIATION_DESCRIPTOR_TYPE 11 
N/* Wireless USB extension Descriptor Type. */
N#define USB_SECURITY_TYPE 12
N#define USB_KEY_TYPE 13
N#define USB_ENCRIPTION_TYPE 14
N#define USB_BOS_TYPE 15
N#define USB_DEVICE_CAPABILITY_TYPE 16
N#define USB_WIRELESS_ENDPOINT_COMPANION_TYPE 17
N
N/* USB Device Classes */
N#define USB_DEVICE_CLASS_RESERVED 0x00
N#define USB_DEVICE_CLASS_AUDIO 0x01
N#define USB_DEVICE_CLASS_COMMUNICATIONS 0x02
N#define USB_DEVICE_CLASS_HUMAN_INTERFACE 0x03
N#define USB_DEVICE_CLASS_MONITOR 0x04
N#define USB_DEVICE_CLASS_PHYSICAL_INTERFACE 0x05
N#define USB_DEVICE_CLASS_POWER 0x06
N#define USB_DEVICE_CLASS_PRINTER 0x07
N#define USB_DEVICE_CLASS_STORAGE 0x08
N#define USB_DEVICE_CLASS_HUB 0x09
N#define USB_DEVICE_CLASS_MISCELLANEOUS 0xEF
N#define USB_DEVICE_CLASS_VENDOR_SPECIFIC 0xFF
N/* bmAttributes in Configuration Descriptor */
N#define USB_CONFIG_POWERED_MASK 0x40
N#define USB_CONFIG_BUS_POWERED 0x80
N#define USB_CONFIG_SELF_POWERED 0xC0
N#define USB_CONFIG_REMOTE_WAKEUP 0x20
N/* bMaxPower in Configuration Descriptor */
N#define USB_CONFIG_POWER_MA(mA) ((mA)/2)
N/* bEndpointAddress in Endpoint Descriptor */
N#define USB_ENDPOINT_DIRECTION_MASK 0x80
N#define USB_ENDPOINT_OUT(addr) ((addr)|0x00)
N#define USB_ENDPOINT_IN(addr) ((addr)|0x80)
N/* bmAttributes in Endpoint Descriptor */
N#define USB_ENDPOINT_TYPE_MASK 0x03
N#define USB_ENDPOINT_TYPE_CONTROL 0x00
N#define USB_ENDPOINT_TYPE_ISOCHRONOUS 0x01
N#define USB_ENDPOINT_TYPE_BULK 0x02
N#define USB_ENDPOINT_TYPE_INTERRUPT 0x03
N#define USB_ENDPOINT_SYNC_MASK 0x0C
N#define USB_ENDPOINT_SYNC_NO_SYNCHRONIZATION 0x00
N#define USB_ENDPOINT_SYNC_ASYNCHRONOUS 0x04
N#define USB_ENDPOINT_SYNC_ADAPTIVE 0x08
N#define USB_ENDPOINT_SYNC_SYNCHRONOUS 0x0C
N#define USB_ENDPOINT_USAGE_MASK 0x30
N#define USB_ENDPOINT_USAGE_DATA 0x00
N#define USB_ENDPOINT_USAGE_FEEDBACK 0x10
N#define USB_ENDPOINT_USAGE_IMPLICIT_FEEDBACK 0x20
N#define USB_ENDPOINT_USAGE_RESERVED 0x30
N/* USB Standard Device Descriptor */
Ntypedef __packed struct _USB_DEVICE_DESCRIPTOR_
N{
N	uint8_t  bLength;
N	uint8_t  bDescriptorType;
N	uint16_t  bcdUSB;
N	uint8_t  bDeviceClass;
N	uint8_t  bDeviceSubClass;
N	uint8_t  bDeviceProtocol;
N	uint8_t  bMaxPacketSize0;
N	uint16_t  idVendor;
N	uint16_t  idProduct;
N	uint16_t  bcdDevice;
N	uint8_t  iManufacturer;
N	uint8_t  iProduct;
N	uint8_t  iSerialNumber;
N	uint8_t  bNumConfigurations;
N} USB_DEVICE_DESCRIPTOR;
N
N/* USB 2.0 Device Qualifier Descriptor */
Ntypedef __packed struct _USB_DEVICE_QUALIFIER_DESCRIPTOR_
N{
N	uint8_t  bLength;
N	uint8_t  bDescriptorType;
N	uint16_t  bcdUSB;
N	uint8_t  bDeviceClass;
N	uint8_t  bDeviceSubClass;
N	uint8_t  bDeviceProtocol;
N	uint8_t  bMaxPacketSize0;
N	uint8_t  bNumConfigurations;
N	uint8_t  bReserved;
N} USB_DEVICE_QUALIFIER_DESCRIPTOR;
N
N/* USB Standard Configuration Descriptor */
Ntypedef __packed struct _USB_CONFIGURATION_DESCRIPTOR_
N{
N	uint8_t  bLength;
N	uint8_t  bDescriptorType;
N	uint16_t  wTotalLength;
N	uint8_t  bNumInterfaces;
N	uint8_t  bConfigurationValue;
N	uint8_t  iConfiguration;
N	uint8_t  bmAttributes;
N	uint8_t  bMaxPower;
N} USB_CONFIGURATION_DESCRIPTOR;
N
N/* USB Standard Interface Descriptor */
Ntypedef __packed struct _USB_INTERFACE_DESCRIPTOR_
N{
N	uint8_t  bLength;
N	uint8_t  bDescriptorType;
N	uint8_t  bInterfaceNumber;
N	uint8_t  bAlternateSetting;
N	uint8_t  bNumEndpoints;
N	uint8_t  bInterfaceClass;
N	uint8_t  bInterfaceSubClass;
N	uint8_t  bInterfaceProtocol;
N	uint8_t  iInterface;
N} USB_INTERFACE_DESCRIPTOR;
N
N/* USB Standard Endpoint Descriptor */
Ntypedef __packed struct _USB_ENDPOINT_DESCRIPTOR_
N{
N	uint8_t  bLength;
N	uint8_t  bDescriptorType;
N	uint8_t  bEndpointAddress;
N	uint8_t  bmAttributes;
N	uint16_t  wMaxPacketSize;
N	uint8_t  bInterval;
N} USB_ENDPOINT_DESCRIPTOR;
N
N/* USB String Descriptor */
Ntypedef __packed struct _USB_STRING_DESCRIPTOR_
N{
N	uint8_t  bLength;
N	uint8_t  bDescriptorType;
N	uint16_t  bString/*[]*/;
N} USB_STRING_DESCRIPTOR;
N
N/* USB Common Descriptor */
Ntypedef __packed struct _USB_COMMON_DESCRIPTOR_
N{
N	uint8_t  bLength;
N	uint8_t  bDescriptorType;
N} USB_COMMON_DESCRIPTOR;
N
N/* USB BOS Descriptor. */
Ntypedef __packed struct _USB_BOS_DESCRIPTOR_
N{
N	uint8_t  bLength;
N	uint8_t  bDescriptorType;
N	uint16_t wTotalLength;
N	uint8_t  bNumDeviceCaps;
N} USB_BOS_DESCRIPTOR;
N
N/* USB Super Speed Device Capability Descriptor. */
Ntypedef __packed struct _USB_SS_DEVICE_CAPABLITY_DESCRIPTOR_
N{
N	uint8_t  bLength;
N	uint8_t  bDescriptorType;
N	uint8_t  bDeviceCapabilityType;
N	uint8_t  bAttributes;
N	uint16_t wSpeedsSupported;
N	uint8_t  bFunctionalitySupport;
N	uint8_t  bU1DevExitLat;
N	uint16_t bU2DevExitLat;
N} USB_SS_DEVICE_CAPABILITY_DESCRIPTOR;
N
N/* USB Device Capability Descriptor, USB 2.0 extension for LPM. */
Ntypedef __packed struct _USB_DEVICE_CAPABLITY_DESCRIPTOR_
N{
N	uint8_t  bLength;
N	uint8_t  bDescriptorType;
N	uint8_t  bDeviceCapabilityType;
N	uint32_t bmAttributes;
N} USB_DEVICE_CAPABILITY_DESCRIPTOR;
N#endif  /* __USB_H__ */
N
L 19 ".\Inc\Pixart_Sensor.h" 2
N#include "usbdesc.h"
L 1 ".\Inc\usbdesc.h" 1
N/*----------------------------------------------------------------------------
N *      U S B  -  K e r n e l
N *----------------------------------------------------------------------------
N * Name:    usbdesc.h
N * Purpose: USB Descriptors Definitions
N * Version: V1.20
N *----------------------------------------------------------------------------
N *      This software is supplied "AS IS" without any warranties, express,
N *      implied or statutory, including but not limited to the implied
N *      warranties of fitness for purpose, satisfactory quality and
N *      noninfringement. Keil extends you a royalty-free right to reproduce
N *      and distribute executable files created using this software for use
N *      on NXP Semiconductors LPC family microcontroller devices only. Nothing
N *      else gives you the right to use this software.
N *
N * Copyright (c) 2009 Keil - An ARM Company. All rights reserved.
N *---------------------------------------------------------------------------*/
N
N#ifndef __USBDESC_H__
N#define __USBDESC_H__
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#include "Type.h"
N
N#ifdef  __UART_C__
S#define INTERFACE
N#else
N#define INTERFACE extern
N#endif
N
N#define WBVAL(x) ((x) & 0xFF),(((x) >> 8) & 0xFF)
N
N#define USB_DEVICE_DESC_SIZE (sizeof(USB_DEVICE_DESCRIPTOR))
N#define USB_CONFIGUARTION_DESC_SIZE (sizeof(USB_CONFIGURATION_DESCRIPTOR))
N#define USB_INTERFACE_DESC_SIZE (sizeof(USB_INTERFACE_DESCRIPTOR))
N#define USB_ENDPOINT_DESC_SIZE (sizeof(USB_ENDPOINT_DESCRIPTOR))
N#define USB_BOS_DESC_SIZE (sizeof(USB_BOS_DESCRIPTOR))
N#define USB_SS_DEVICE_CAPABILITY_SIZE (sizeof(USB_SS_DEVICE_CAPABILITY_DESCRIPTOR))
N#define USB_DEVICE_CAPABILITY_SIZE (sizeof(USB_DEVICE_CAPABILITY_DESCRIPTOR))
N
N#define HID_DESC_OFFSET 0x0012
N#define HID_DESC_SIZE (sizeof(HID_DESCRIPTOR))
N#define HID_REPORT_DESC_MOUSE_SIZE (sizeof(HID_ReportDescriptorMouse))
N
N
NINTERFACE const U8 USB_DeviceDescriptor[];
Xextern const U8 USB_DeviceDescriptor[];
NINTERFACE const U8 USB_ConfigDescriptor[];
Xextern const U8 USB_ConfigDescriptor[];
NINTERFACE const U8 USB_StringDescriptor[];
Xextern const U8 USB_StringDescriptor[];
NINTERFACE const U8 USB_BOSDescriptor[];
Xextern const U8 USB_BOSDescriptor[];
N
NINTERFACE const U8 HID_ReportDescriptorMouse[];
Xextern const U8 HID_ReportDescriptorMouse[];
NINTERFACE const U16 HID_ReportDescMouseSize;
Xextern const U16 HID_ReportDescMouseSize;
N
N
N#undef INTERFACE
N#ifdef __cplusplus
S}
N#endif
N#endif  /* __USBDESC_H__ */
L 20 ".\Inc\Pixart_Sensor.h" 2
N#include "usbuser.h"
L 1 ".\Inc\usbuser.h" 1
N/*----------------------------------------------------------------------------
N *      U S B  -  K e r n e l
N *----------------------------------------------------------------------------
N * Name:    usbuser.h
N * Purpose: USB Custom User Definitions
N * Version: V1.20
N *----------------------------------------------------------------------------
N *      This software is supplied "AS IS" without any warranties, express,
N *      implied or statutory, including but not limited to the implied
N *      warranties of fitness for purpose, satisfactory quality and
N *      noninfringement. Keil extends you a royalty-free right to reproduce
N *      and distribute executable files created using this software for use
N *      on NXP Semiconductors LPC family microcontroller devices only. Nothing 
N *      else gives you the right to use this software.
N *
N * Copyright (c) 2009 Keil - An ARM Company. All rights reserved.
N *---------------------------------------------------------------------------*/
N
N#ifndef __USBUSER_H__
N#define __USBUSER_H__
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#include "Type.h"
N
N#ifdef  _USBUSER_C_
S#define INTERFACE
N#else
N#define INTERFACE extern
N#endif
N
N/* USB Device Events Callback Functions */
NINTERFACE void USB_Power_Event(U32 power);
Xextern void USB_Power_Event(U32 power);
NINTERFACE void USB_Reset_Event(void);
Xextern void USB_Reset_Event(void);
NINTERFACE void USB_Suspend_Event(void);
Xextern void USB_Suspend_Event(void);
NINTERFACE void USB_Resume_Event(void);
Xextern void USB_Resume_Event(void);
NINTERFACE void USB_WakeUp_Event(void);
Xextern void USB_WakeUp_Event(void);
NINTERFACE void USB_SOF_Event(void);
Xextern void USB_SOF_Event(void);
NINTERFACE void USB_Error_Event(U32 error);
Xextern void USB_Error_Event(U32 error);
N
N/* USB Endpoint Callback Events */
N#define USB_EVT_SETUP 1/* Setup Packet */
N#define USB_EVT_OUT 2/* OUT Packet */
N#define USB_EVT_IN 3/* IN Packet */
N#define USB_EVT_OUT_NAK 4   /* OUT Packet - Not Acknowledged */
N#define USB_EVT_IN_NAK 5   /* IN Packet - Not Acknowledged */
N#define USB_EVT_OUT_STALL 6/* OUT Packet - Stalled */
N#define USB_EVT_IN_STALL 7/*  IN Packet - Stalled */
N
N/* USB Endpoint Events Callback Pointers */
NINTERFACE void (* const USB_P_EP[USB_LOGIC_EP_NUM])(U32 event);
Xextern void (* const USB_P_EP[5])(U32 event);
N
N/* USB Endpoint Events Callback Functions */
NINTERFACE void nsAPI_USB_EndPoint0(U32 event);
Xextern void nsAPI_USB_EndPoint0(U32 event);
NINTERFACE void nsAPI_USB_EndPoint1(U32 event);
Xextern void nsAPI_USB_EndPoint1(U32 event);
NINTERFACE void nsAPI_USB_EndPoint2(U32 event);
Xextern void nsAPI_USB_EndPoint2(U32 event);
NINTERFACE void nsAPI_USB_EndPoint3(U32 event);
Xextern void nsAPI_USB_EndPoint3(U32 event);
NINTERFACE void nsAPI_USB_EndPoint4(U32 event);
Xextern void nsAPI_USB_EndPoint4(U32 event);
NINTERFACE void nsAPI_USB_EndPointClr(void);
Xextern void nsAPI_USB_EndPointClr(void);
N/* USB Core Events Callback Functions */
NINTERFACE void nsAPI_USB_Configure_Event(void);
Xextern void nsAPI_USB_Configure_Event(void);
NINTERFACE void USB_Interface_Event(void);
Xextern void USB_Interface_Event(void);
NINTERFACE void USB_Feature_Event(void);
Xextern void USB_Feature_Event(void);
N
N#undef INTERFACE
N#ifdef __cplusplus
S}
N#endif
N#endif  /* __USBUSER_H__ */
L 21 ".\Inc\Pixart_Sensor.h" 2
N#include "usbcfg.h"
N#include "usbhw.h"
L 1 ".\Inc\usbhw.h" 1
N/****************************************************************************
N *   $Id:: usbhw.h 6446 2011-02-12 03:00:16Z usb00423                        $
N *   Project: NXP LPC11Uxx USB example
N *
N *   Description:
N *     This file contains LPC11Uxx USB H/W layer definitions, data structure,
N *     and USB hardware API prototyping.
N *
N ****************************************************************************
N * Software that is described herein is for illustrative purposes only
N * which provides customers with programming information regarding the
N * products. This software is supplied "AS IS" without any warranties.
N * NXP Semiconductors assumes no responsibility or liability for the
N * use of the software, conveys no license or title under any patent,
N * copyright, or mask work right to the product. NXP Semiconductors
N * reserves the right to make changes in the software without
N * notification. NXP Semiconductors also make no representation or
N * warranty that such application will be suitable for the specified
N * use without further testing or modification.
N****************************************************************************/
N#ifndef __USBHW_H__
N#define __USBHW_H__
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#include "Type.h"
N#include "Usb.h"
N#include "usbcfg.h"
N
N#ifdef  __USBHW_C__
S#define INTERFACE
N#else
N#define INTERFACE extern
N#endif
N
N
Ntypedef struct _EP_LIST
N{
N	U32 buf_ptr;
N	U32 buf_length;
N} EP_LIST;
N
Ntypedef struct _LPC11Uxx_USBHW_SETTING_
N{
N	/* The BufferUsed flag is to deal with double buffer situation, This is a bit mask
N	flag for non-zero EPs. If BufferUsed bit is set, buffer 0 is used, switch to buffer 1.
N	If BufferUsed flag is not set, buffer 0 can be used. */
N	volatile U32 BufferUsed;
N
N	/* The ActiveFlag is to deal with STALL situation, if STALL happens during
N	WriteEP(), don't set the ACTIVE bit in EPList CommandStatus immediately but
N	this flag only, ACTIVE bit will be set after ClearStallEP() that data is ready
N	to be sent. This is a bit mask flag for non-zero EPs. */
N	volatile U32 EPActiveFlag;
N
N	/* EP buffer address and length default setting */
N	volatile EP_LIST EPList[USB_EP_NUM*2];/* Consider double buffer for non zero EPs */
X	volatile EP_LIST EPList[4*2]; 
N}LPC11Uxx_USBHW_SETTING;
N
NINTERFACE LPC11Uxx_USBHW_SETTING g_USBHW_Setting;
Xextern LPC11Uxx_USBHW_SETTING g_USBHW_Setting;
N
N#define USB_EPLIST_ADDR 0x10001800
N#define USB_EPDATA_ADDR (USB_EPLIST_ADDR + 0x100)
N#define USB_EPDATA_PAGE (USB_EPDATA_ADDR&0xFFC00000)/* Bit 22~31 is the page */
N#define USB_RAM_LIMIT 0x800/* maximum USB RAM size is 2K */
N
N#if 0
S/* Be careful if ISO communication is used that it could allocate more than 64 bytes. */
S#define USB_EP0DATA_OUT		(USB_EPDATA_ADDR + 0x00)
S#define USB_SETUP_BUF		(USB_EPDATA_ADDR + 0x40)
S#define USB_EP0DATA_IN		(USB_EPDATA_ADDR + 0x80)
S
S#define USB_EP1DATA_OUT0	(USB_EPDATA_ADDR + 0x100)		/* INT/BULK EPs, max EP 64 bytes */
S#define USB_EP1DATA_OUT1	(USB_EPDATA_ADDR + 0x140)
S#define USB_EP1DATA_IN0		(USB_EPDATA_ADDR + 0x180)
S#define USB_EP1DATA_IN1		(USB_EPDATA_ADDR + 0x1C0)
S
S#define USB_EP2DATA_OUT0	(USB_EPDATA_ADDR + 0x200)
S#define USB_EP2DATA_OUT1	(USB_EPDATA_ADDR + 0x240)
S#define USB_EP2DATA_IN0		(USB_EPDATA_ADDR + 0x280)
S#define USB_EP2DATA_IN1		(USB_EPDATA_ADDR + 0x2C0)
S
S#define USB_EP3DATA_OUT0	(USB_EPDATA_ADDR + 0x300)
S#define USB_EP3DATA_OUT1	(USB_EPDATA_ADDR + 0x340)
S#define USB_EP3DATA_IN0		(USB_EPDATA_ADDR + 0x380)
S#define USB_EP3DATA_IN1		(USB_EPDATA_ADDR + 0x3C0)
S
S#define USB_EP4DATA_OUT0	(USB_EPDATA_ADDR + 0x400)
S#define USB_EP4DATA_OUT1	(USB_EPDATA_ADDR + 0x440)
S#define USB_EP4DATA_IN0		(USB_EPDATA_ADDR + 0x480)
S#define USB_EP4DATA_IN1		(USB_EPDATA_ADDR + 0x4C0)
N#endif
N
N#define BUF_ACTIVE BIT31
N#define EP_DISABLED BIT30
N#define EP_STALL BIT29
N#define EP_RESET BIT28
N#define EP_ISO_TYPE BIT26
N
N/* USB Device Command Status */
N#define USB_EN BIT7/* Device Enable */
N#define USB_SETUP_RCVD BIT8/* SETUP token received */
N#define USB_PLL_ON BIT9/* PLL is always ON */
N#define USB_LPM BIT11/* LPM is supported */
N#define USB_IntOnNAK_AO BIT12/* Device Interrupt on NAK BULK OUT */
N#define USB_IntOnNAK_AI BIT13/* Device Interrupt on NAK BULK IN */
N#define USB_IntOnNAK_CO BIT14/* Device Interrupt on NAK CTRL OUT */
N#define USB_IntOnNAK_CI BIT15/* Device Interrupt on NAK CTRL IN */
N#define USB_DCON BIT16/* Device connect */
N#define USB_DSUS BIT17/* Device Suspend */
N#define USB_LPM_SUS BIT19/* LPM suspend */
N#define USB_REMOTE_WAKE BIT20/* LPM Remote Wakeup */
N#define USB_DCON_C BIT24/* Device connection change */
N#define USB_DSUS_C BIT25/* Device SUSPEND change */
N#define USB_DRESET_C BIT26/* Device RESET */
N#define USB_VBUS_DBOUNCE BIT28/* Device VBUS detect */
N
N/* Device Interrupt Bit Definitions */
N#define EP0_INT BIT0
N#define EP1_INT BIT1
N#define EP2_INT BIT2
N#define EP3_INT BIT3
N#define EP4_INT BIT4
N#define EP5_INT BIT5
N#define EP6_INT BIT6
N#define EP7_INT BIT7
N#define EP8_INT BIT8
N#define EP9_INT BIT9
N#define FRAME_INT BIT30
N#define DEV_STAT_INT (0x80000000)
N
N/* Rx & Tx Packet Length Definitions */
N#define PKT_LNGTH_MASK 0x000003FF
N
N/* Error Status Register Definitions */
N#define ERR_NOERROR 0x00
N#define ERR_PID_ENCODE 0x01
N#define ERR_UNKNOWN_PID 0x02
N#define ERR_UNEXPECT_PKT 0x03
N#define ERR_TCRC 0x04
N#define ERR_DCRC 0x05
N#define ERR_TIMEOUT 0x06
N#define ERR_BABBIE 0x07
N#define ERR_EOF_PKT 0x08
N#define ERR_TX_RX_NAK 0x09
N#define ERR_SENT_STALL 0x0A
N#define ERR_BUF_OVERRUN 0x0B
N#define ERR_SENT_EPT_PKT 0x0C
N#define ERR_BIT_STUFF 0x0D
N#define ERR_SYNC 0x0E
N#define ERR_TOGGLE_BIT 0x0F
N
N/* USB Hardware Functions */
NINTERFACE void NDrv_USB_IOClkConfig(void);
Xextern void NDrv_USB_IOClkConfig(void);
NINTERFACE void nsAPI_USB_Init(void);
Xextern void nsAPI_USB_Init(void);
NINTERFACE void NDrv_USB_EPInit(void);
Xextern void NDrv_USB_EPInit(void);
NINTERFACE void NDrv_USB_Connect(U8 con);
Xextern void NDrv_USB_Connect(U8 con);
NINTERFACE void NDrv_USB_Reset(void);
Xextern void NDrv_USB_Reset(void);
NINTERFACE void USB_Suspend(void);
Xextern void USB_Suspend(void);
NINTERFACE void USB_Resume(void);
Xextern void USB_Resume(void);
NINTERFACE void USB_WakeUp(void);
Xextern void USB_WakeUp(void);
NINTERFACE void NDrv_USB_WakeUpCfg(U8 cfg);
Xextern void NDrv_USB_WakeUpCfg(U8 cfg);
NINTERFACE void nsAPI_USB_SetAddress(U32 adr);
Xextern void nsAPI_USB_SetAddress(U32 adr);
NINTERFACE void NDrv_USB_Configure(U8 cfg);
Xextern void NDrv_USB_Configure(U8 cfg);
N//INTERFACE void  nsAPI_USB_ConfigEP(USB_ENDPOINT_DESCRIPTOR *pEPD);
N//INTERFACE void  USB_DirCtrlEP  (uint32_t dir);
NINTERFACE void  nsAPI_USB_EnableEP(U32 EPNum);
Xextern void  nsAPI_USB_EnableEP(U32 EPNum);
NINTERFACE void  nsAPI_USB_DisableEP(U32 EPNum);
Xextern void  nsAPI_USB_DisableEP(U32 EPNum);
NINTERFACE void  nsAPI_USB_ResetEP(U32 EPNum);
Xextern void  nsAPI_USB_ResetEP(U32 EPNum);
NINTERFACE void  nsAPI_USB_SetStallEP(U32 EPNum);
Xextern void  nsAPI_USB_SetStallEP(U32 EPNum);
NINTERFACE void  nsAPI_USB_ClrStallEP(U32 EPNum);
Xextern void  nsAPI_USB_ClrStallEP(U32 EPNum);
N//INTERFACE void  USB_ClearEPBuf (uint32_t EPNum);
NINTERFACE void nsAPI_USB_ReadSetupEP(U32 EPNum, U8 *pData);
Xextern void nsAPI_USB_ReadSetupEP(U32 EPNum, U8 *pData);
NINTERFACE RetU32 nsAPI_USB_ReadEP(U32 EPNum, U8 *pData);
Xextern RetU32 nsAPI_USB_ReadEP(U32 EPNum, U8 *pData);
NINTERFACE RetU32 nsAPI_USB_WriteEP(U32 EPNum, U8 *pData, U32 cnt);
Xextern RetU32 nsAPI_USB_WriteEP(U32 EPNum, U8 *pData, U32 cnt);
NINTERFACE void  USB_IRQHandler (void);
Xextern void  USB_IRQHandler (void);
NINTERFACE void  USBWakeup_IRQHandler(void);
Xextern void  USBWakeup_IRQHandler(void);
NINTERFACE void RemoteWakeupEvent ( void );
Xextern void RemoteWakeupEvent ( void );
NINTERFACE void wnDrv_Usb_ClrGetReqStatus(U32 EPNum);
Xextern void wnDrv_Usb_ClrGetReqStatus(U32 EPNum);
NINTERFACE Boolean wnDrv_Usb_EP_Status(U32 EPNum);
Xextern Boolean wnDrv_Usb_EP_Status(U32 EPNum);
N
N#undef INTERFACE
N#ifdef __cplusplus
S}
N#endif
N#endif  /* __USBHW_H__ */
L 23 ".\Inc\Pixart_Sensor.h" 2
N#include "usbcore.h"
L 1 ".\Inc\usbcore.h" 1
N/*----------------------------------------------------------------------------
N *      U S B  -  K e r n e l
N *----------------------------------------------------------------------------
N * Name:    usbcore.h
N * Purpose: USB Core Definitions
N * Version: V1.20
N *----------------------------------------------------------------------------
N *      This software is supplied "AS IS" without any warranties, express,
N *      implied or statutory, including but not limited to the implied
N *      warranties of fitness for purpose, satisfactory quality and
N *      noninfringement. Keil extends you a royalty-free right to reproduce
N *      and distribute executable files created using this software for use
N *      on NXP Semiconductors LPC family microcontroller devices only. Nothing 
N *      else gives you the right to use this software.
N *
N * Copyright (c) 2009 Keil - An ARM Company. All rights reserved.
N *---------------------------------------------------------------------------*/
N
N#ifndef __USBCORE_H__
N#define __USBCORE_H__
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#include "Type.h"
N
N#ifdef  __USBCORE_C__
S#define INTERFACE
N#else
N#define INTERFACE extern
N#endif
N
N/* USB Endpoint Data Structure */
Ntypedef struct _USB_EP_DATA_
N{
N	U8  *pData;
N	U16 Count;
N} USB_EP_DATA;
N
Ntypedef struct _LPC11Uxx_USBCORE_SETTING_
N{
N	U16 USB_DeviceStatus;
N	U8 USB_NumInterfaces;
N	U8 USB_DeviceAddress;
N	U8 USB_Configuration;	
N	U8 USB_AltSetting[USB_IF_NUM];/* USB Core Global Variables */
X	U8 USB_AltSetting[1]; 
N	U8 EP0Buf[USB_MAX_PACKET0];/* USB Endpoint 0 Buffer */
X	U8 EP0Buf[64]; 
N	U32 USB_EndPointMask;
N	U32 USB_EndPointHalt;
N	U32 USB_EndPointStall;/* EP must stay stalled */
N	USB_EP_DATA EP0Data;/* USB Endpoint 0 Data Info */
N	USB_SETUP_PACKET SetupPacket;/* USB Setup Packet */
N}LPC11Uxx_USBCORE_SETTING;
N
N
NINTERFACE LPC11Uxx_USBCORE_SETTING g_USBCore_Setting; 
Xextern LPC11Uxx_USBCORE_SETTING g_USBCore_Setting; 
N
N/* USB Core Functions */
NINTERFACE void nsAPI_USB_ResetCore(void);
Xextern void nsAPI_USB_ResetCore(void);
NINTERFACE __inline Boolean nsAPI_USB_ReqGetStatus(void);
Xextern __inline Boolean nsAPI_USB_ReqGetStatus(void);
NINTERFACE __inline Boolean nsAPI_USB_ReqGetDescriptor(void);
Xextern __inline Boolean nsAPI_USB_ReqGetDescriptor(void);
NINTERFACE __inline Boolean nsAPI_USB_ReqSetAddress(void);
Xextern __inline Boolean nsAPI_USB_ReqSetAddress(void);
NINTERFACE __inline Boolean nsAPI_USB_ReqGetInterface(void);
Xextern __inline Boolean nsAPI_USB_ReqGetInterface(void);
NINTERFACE __inline Boolean nsAPI_USB_ReqSetInterface(void);
Xextern __inline Boolean nsAPI_USB_ReqSetInterface(void);
NINTERFACE __inline Boolean nsAPI_USB_ReqSetConfiguration(void);
Xextern __inline Boolean nsAPI_USB_ReqSetConfiguration(void);
NINTERFACE __inline Boolean nsAPI_USB_ReqGetConfiguration(void);
Xextern __inline Boolean nsAPI_USB_ReqGetConfiguration(void);
NINTERFACE void nsAPI_USB_DataOutStage(void);
Xextern void nsAPI_USB_DataOutStage(void);
NINTERFACE void nsAPI_USB_StatusOutStage(void);
Xextern void nsAPI_USB_StatusOutStage(void);
NINTERFACE void nsAPI_USB_SetupStage(void);
Xextern void nsAPI_USB_SetupStage(void);
NINTERFACE void nsAPI_USBCore_Stall_i(void);
Xextern void nsAPI_USBCore_Stall_i(void);
N
N
N#undef INTERFACE
N#ifdef __cplusplus
S}
N#endif
N#endif  /* __USBCORE_H__ */
L 24 ".\Inc\Pixart_Sensor.h" 2
N#include "string.h"
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\string.h" 1
N/* string.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.11 */
N/* Copyright (C) Codemist Ltd., 1988-1993.                        */
N/* Copyright 1991-1993 ARM Limited. All rights reserved.          */
N/* version 0.04 */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N */
N
N/*
N * string.h declares one type and several functions, and defines one macro
N * useful for manipulating character arrays and other objects treated as
N * character arrays. Various methods are used for determining the lengths of
N * the arrays, but in all cases a char * or void * argument points to the
N * initial (lowest addresses) character of the array. If an array is written
N * beyond the end of an object, the behaviour is undefined.
N */
N
N#ifndef __string_h
N#define __string_h
N#define __ARMCLIB_VERSION 5060044
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STRING_DECLS
N  #define __STRING_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S        namespace std {
S        #define __CLIBNS std::
S        extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
Nextern _ARMABI void *memcpy(void * __restrict /*s1*/,
Xextern __declspec(__nothrow) void *memcpy(void * __restrict  ,
N                    const void * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI void *memmove(void * /*s1*/,
Xextern __declspec(__nothrow) void *memmove(void *  ,
N                    const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. Copying takes place as if the n characters from the
N    * object pointed to by s2 are first copied into a temporary array of n
N    * characters that does not overlap the objects pointed to by s1 and s2,
N    * and then the n characters from the temporary array are copied into the
N    * object pointed to by s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strcpy(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcpy(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string pointed to by s2 (including the terminating nul
N    * character) into the array pointed to by s1. If copying takes place
N    * between objects that overlap, the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncpy(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncpy(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies not more than n characters (characters that follow a null
N    * character are not copied) from the array pointed to by s2 into the array
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
N
Nextern _ARMABI char *strcat(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcat(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends a copy of the string pointed to by s2 (including the terminating
N    * null character) to the end of the string pointed to by s1. The initial
N    * character of s2 overwrites the null character at the end of s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncat(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncat(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends not more than n characters (a null character and characters that
N    * follow it are not appended) from the array pointed to by s2 to the end of
N    * the string pointed to by s1. The initial character of s2 overwrites the
N    * null character at the end of s1. A terminating null character is always
N    * appended to the result.
N    * Returns: the value of s1.
N    */
N
N/*
N * The sign of a nonzero value returned by the comparison functions is
N * determined by the sign of the difference between the values of the first
N * pair of characters (both interpreted as unsigned char) that differ in the
N * objects being compared.
N */
N
Nextern _ARMABI int memcmp(const void * /*s1*/, const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int memcmp(const void *  , const void *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the first n characters of the object pointed to by s1 to the
N    * first n characters of the object pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the object pointed to by s1 is greater than, equal to, or
N    *          less than the object pointed to by s2.
N    */
Nextern _ARMABI int strcmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcasecmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcasecmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2,
N    * case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncasecmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncasecmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2, case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcoll(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcoll(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2, both
N    * interpreted as appropriate to the LC_COLLATE category of the current
N    * locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2 when both are interpreted
N    *          as appropriate to the current locale.
N    */
N
Nextern _ARMABI size_t strxfrm(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) size_t strxfrm(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(2)));
N   /*
N    * transforms the string pointed to by s2 and places the resulting string
N    * into the array pointed to by s1. The transformation function is such that
N    * if the strcmp function is applied to two transformed strings, it returns
N    * a value greater than, equal to or less than zero, corresponding to the
N    * result of the strcoll function applied to the same two original strings.
N    * No more than n characters are placed into the resulting array pointed to
N    * by s1, including the terminating null character. If n is zero, s1 is
N    * permitted to be a null pointer. If copying takes place between objects
N    * that overlap, the behaviour is undefined.
N    * Returns: The length of the transformed string is returned (not including
N    *          the terminating null character). If the value returned is n or
N    *          more, the contents of the array pointed to by s1 are
N    *          indeterminate.
N    */
N
N
N#ifdef __cplusplus
Sextern _ARMABI const void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Sextern "C++" void *memchr(void * __s, int __c, size_t __n) __attribute__((__nonnull__(1)));
Sextern "C++" inline void *memchr(void * __s, int __c, size_t __n)
S    { return const_cast<void *>(memchr(const_cast<const void *>(__s), __c, __n)); }
N#else
Nextern _ARMABI void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memchr(const void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an unsigned char) in the
N    * initial n characters (each interpreted as unsigned char) of the object
N    * pointed to by s.
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the object.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strchr(char * __s, int __c)
S    { return const_cast<char *>(strchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an char) in the string
N    * pointed to by s (including the terminating null character).
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the string.
N    */
N
Nextern _ARMABI size_t strcspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strcspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters not from the string pointed to by
N    * s2. The terminating null character is not considered part of s2.
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strpbrk(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strpbrk(char * __s1, const char * __s2)
S    { return const_cast<char *>(strpbrk(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strpbrk(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of any
N    * character from the string pointed to by s2.
N    * Returns: returns a pointer to the character, or a null pointer if no
N    *          character form s2 occurs in s1.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strrchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strrchr(char * __s, int __c)
S    { return const_cast<char *>(strrchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strrchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the last occurence of c (converted to a char) in the string
N    * pointed to by s. The terminating null character is considered part of
N    * the string.
N    * Returns: returns a pointer to the character, or a null pointer if c does
N    *          not occur in the string.
N    */
N
Nextern _ARMABI size_t strspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters from the string pointed to by S2
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strstr(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strstr(char * __s1, const char * __s2)
S    { return const_cast<char *>(strstr(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strstr(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of the
N    * sequence of characters (excluding the terminating null character) in the
N    * string pointed to by s2.
N    * Returns: a pointer to the located string, or a null pointer if the string
N    *          is not found.
N    */
N
Nextern _ARMABI char *strtok(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) char *strtok(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(2)));
Nextern _ARMABI char *_strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *_strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#ifndef __STRICT_ANSI__
Nextern _ARMABI char *strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#endif
N   /*
N    * A sequence of calls to the strtok function breaks the string pointed to
N    * by s1 into a sequence of tokens, each of which is delimited by a
N    * character from the string pointed to by s2. The first call in the
N    * sequence has s1 as its first argument, and is followed by calls with a
N    * null pointer as their first argument. The separator string pointed to by
N    * s2 may be different from call to call.
N    * The first call in the sequence searches for the first character that is
N    * not contained in the current separator string s2. If no such character
N    * is found, then there are no tokens in s1 and the strtok function returns
N    * a null pointer. If such a character is found, it is the start of the
N    * first token.
N    * The strtok function then searches from there for a character that is
N    * contained in the current separator string. If no such character is found,
N    * the current token extends to the end of the string pointed to by s1, and
N    * subsequent searches for a token will fail. If such a character is found,
N    * it is overwritten by a null character, which terminates the current
N    * token. The strtok function saves a pointer to the following character,
N    * from which the next search for a token will start.
N    * Each subsequent call, with a null pointer as the value for the first
N    * argument, starts searching from the saved pointer and behaves as
N    * described above.
N    * Returns: pointer to the first character of a token, or a null pointer if
N    *          there is no token.
N    *
N    * strtok_r() is a common extension which works exactly like
N    * strtok(), but instead of storing its state in a hidden
N    * library variable, requires the user to pass in a pointer to a
N    * char * variable which will be used instead. Any sequence of
N    * calls to strtok_r() passing the same char ** pointer should
N    * behave exactly like the corresponding sequence of calls to
N    * strtok(). This means that strtok_r() can safely be used in
N    * multi-threaded programs, and also that you can tokenise two
N    * strings in parallel.
N    */
N
Nextern _ARMABI void *memset(void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memset(void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N   /*
N    * copies the value of c (converted to an unsigned char) into each of the
N    * first n charactes of the object pointed to by s.
N    * Returns: the value of s.
N    */
Nextern _ARMABI char *strerror(int /*errnum*/);
Xextern __declspec(__nothrow) char *strerror(int  );
N   /*
N    * maps the error number in errnum to an error message string.
N    * Returns: a pointer to the string, the contents of which are
N    *          implementation-defined. The array pointed to shall not be
N    *          modified by the program, but may be overwritten by a
N    *          subsequent call to the strerror function.
N    */
Nextern _ARMABI size_t strlen(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) size_t strlen(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * computes the length of the string pointed to by s.
N    * Returns: the number of characters that precede the terminating null
N    *          character.
N    */
N
Nextern _ARMABI size_t strlcpy(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcpy(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string src into the string dst, using no more than
N    * len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src. Thus, the operation
N    * succeeded without truncation if and only if ret < len;
N    * otherwise, the value in ret tells you how big to make dst if
N    * you decide to reallocate it. (That value does _not_ include
N    * the NUL.)
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI size_t strlcat(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcat(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * concatenates the string src to the string dst, using no more
N    * than len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src plus the original length
N    * of dst. Thus, the operation succeeded without truncation if
N    * and only if ret < len; otherwise, the value in ret tells you
N    * how big to make dst if you decide to reallocate it. (That
N    * value does _not_ include the NUL.)
N    * 
N    * If no NUL is encountered within the first len bytes of dst,
N    * then the length of dst is considered to have been equal to
N    * len for the purposes of the return value (as if there were a
N    * NUL at dst[len]). Thus, the return value in this case is len
N    * + strlen(src).
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI void _membitcpybl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpybb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
N    /*
N     * Copies or moves a piece of memory from one place to another,
N     * with one-bit granularity. So you can start or finish a copy
N     * part way through a byte, and you can copy between regions
N     * with different alignment within a byte.
N     * 
N     * All these functions have the same prototype: two void *
N     * pointers for destination and source, then two integers
N     * giving the bit offset from those pointers, and finally the
N     * number of bits to copy.
N     * 
N     * Just like memcpy and memmove, the "cpy" functions copy as
N     * fast as they can in the assumption that the memory regions
N     * do not overlap, while the "move" functions cope correctly
N     * with overlap.
N     *
N     * Treating memory as a stream of individual bits requires
N     * defining a convention about what order those bits are
N     * considered to be arranged in. The above functions support
N     * multiple conventions:
N     * 
N     *  - the "bl" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in little-endian fashion, so that the LSB comes
N     *    first. (For example, membitcpybl(a,b,0,7,1) would copy
N     *    the MSB of the byte at b to the LSB of the byte at a.)
N     * 
N     *  - the "bb" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in big-endian fashion, so that the MSB comes
N     *    first.
N     * 
N     *  - the "hl" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in little-endian fashion.
N     * 
N     *  - the "hb" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in big-endian fashion.
N     * 
N     *  - the "wl" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in little-endian fashion.
N     * 
N     *  - the "wb" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in big-endian fashion.
N     */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STRING_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STRING_NO_EXPORTS
S      using ::std::size_t;
S      using ::std::memcpy;
S      using ::std::memmove;
S      using ::std::strcpy;
S      using ::std::strncpy;
S      using ::std::strcat;
S      using ::std::strncat;
S      using ::std::memcmp;
S      using ::std::strcmp;
S      using ::std::strncmp;
S      using ::std::strcasecmp;
S      using ::std::strncasecmp;
S      using ::std::strcoll;
S      using ::std::strxfrm;
S      using ::std::memchr;
S      using ::std::strchr;
S      using ::std::strcspn;
S      using ::std::strpbrk;
S      using ::std::strrchr;
S      using ::std::strspn;
S      using ::std::strstr;
S      using ::std::strtok;
S#ifndef __STRICT_ANSI__
S      using ::std::strtok_r;
S#endif
S      using ::std::_strtok_r;
S      using ::std::memset;
S      using ::std::strerror;
S      using ::std::strlen;
S      using ::std::strlcpy;
S      using ::std::strlcat;
S      using ::std::_membitcpybl;
S      using ::std::_membitcpybb;
S      using ::std::_membitcpyhl;
S      using ::std::_membitcpyhb;
S      using ::std::_membitcpywl;
S      using ::std::_membitcpywb;
S      using ::std::_membitmovebl;
S      using ::std::_membitmovebb;
S      using ::std::_membitmovehl;
S      using ::std::_membitmovehb;
S      using ::std::_membitmovewl;
S      using ::std::_membitmovewb;
S    #endif /* __STRING_NO_EXPORTS */
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of string.h */
N
L 25 ".\Inc\Pixart_Sensor.h" 2
N#include "flash.h"
L 1 ".\Inc\flash.h" 1
N#ifndef _FLASH_H_
N#define _FLASH_H_
N
N#include "Type.h"
N#include "Main.h"
N
N#ifdef _FLASH_C_
S#define INTERFACE
N#else
N#define INTERFACE extern
N#endif
N
N#define _Flash_Debug_(y) //y 
N
N#define Sector_0_Start_Adr 0x00000000
N#define Sector_1_Start_Adr 0x00001000
N#define Sector_2_Start_Adr 0x00002000
N#define Sector_3_Start_Adr 0x00003000
N#define Sector_4_Start_Adr 0x00004000
N#define Sector_5_Start_Adr 0x00005000/*LPC1113*/
N#define Sector_6_Start_Adr 0x00006000
N#define Sector_7_Start_Adr 0x00007000/*LPC1114*/
N
N#define Sector_0_End_Adr 0x00000FFF
N#define Sector_1_End_Adr 0x00001FFF
N#define Sector_2_End_Adr 0x00002FFF
N#define Sector_3_End_Adr 0x00003FFF
N#define Sector_4_End_Adr 0x00004FFF
N#define Sector_5_End_Adr 0x00005FFF/*LPC1113*/
N#define Sector_6_End_Adr 0x00006FFF
N#define Sector_7_End_Adr 0x00007FFF/*LPC1114*/
N
N#define Sector_0 0
N#define Sector_1 1
N#define Sector_2 2
N#define Sector_3 3
N#define Sector_4 4
N#define Sector_5 5/*LPC1113*/
N#define Sector_6 6
N#define Sector_7 7/*LPC1114*/
N
N#define AppCode_StartAdr Sector_3_Start_Adr 
N#define AppCode_StartSector Sector_3
N#define AppCode_EndSector Sector_7
N
N#define AppUpgrade_EndAdr Sector_7_End_Adr
N#define AppUpgrade_ReserveLen 0xFF				//need check
N#define AppUpgrade_Adr (AppUpgrade_EndAdr -AppUpgrade_ReserveLen)
N#define AppUpgrade_FlagAdr AppUpgrade_Adr 
N
N#define R2FBUFSIZE 256
N#define Vectors_Table_Size 0x100 
N
N#define AppID 0x5A5A
N
N#define AppID_Adr 0x00003100
N#define AppVer_Adr 0x00001104
N#define AppNonUpgradeID 0xCA//AC
N#define AppReqUpgradeID 0xAC//CA
N#define BL_NORMAL 0xAA//BB
N#define AP_MAIN_OFFSET	0x001C
N#define ID_SUCCESS 0xFE
N
N
N/* IAP Command Definitions */
N#define	IAP_CMD_PREPARE_SECTORS 		50
N#define	IAP_CMD_COPY_RAM_TO_FLASH 		51
N#define	IAP_CMD_ERASE_SECTORS 			52
N#define	IAP_CMD_BLANK_CHECK_SECTORS		53
N#define	IAP_CMD_READ_PART_ID			54
N#define	IAP_CMD_READ_BOOT_ROM_VERSION 	55
N#define	IAP_CMD_COMPARE 				56
N#define	IAP_CMD_REINVOKE_ISP 			57
N
N/* IAP Command Status Codes */
N#define IAP_STA_CMD_SUCCESS 0
N#define IAP_STA_INVALID_COMMAND 1
N#define IAP_STA_SRC_ADDR_ERROR 2
N#define IAP_STA_DST_ADDR_ERROR 3
N#define IAP_STA_SRC_ADDR_NOT_MAPPED 4
N#define IAP_STA_DST_ADDR_NOT_MAPPED 5
N#define IAP_STA_COUNT_ERROR 6
N#define IAP_STA_INVALID_SECTOR 7
N#define IAP_STA_SECTOR_NOT_BLANK 8
N#define IAP_STA_SECTOR_NOT_PREPARED_FOR_WRITE_OPERATION 9
N#define IAP_STA_COMPARE_ERROR 10
N#define IAP_STA_BUSY 11
N#define IAP_STA_INVALD_PARAM 12
N
N
N#define IAP_CLK (Fcclk /1000)
N
N/* IAP boot ROM location and access function */
N#define IAP_ROM_LOCATION 0x1FFF1FF1UL
N//				(U32 *)	0x1FFF1FF1
N#define IAP_EXECUTE_CMD(a, b) ((void (*)())(IAP_ROM_LOCATION))(a, b) 
N
N
Ntypedef U8 BOOLEAN;
Ntypedef U8 BootLean;
N#define MSEL 0x00000003
N#define Fcclk (__SYS_OSC_CLK*(MSEL+1))
N
Ntypedef enum _BootloaderStatusType_
N{
N	_BL_IDLE_ = 0xA0,	
N	_BL_START_,
N	_BL_READY_,
N	_BL_NEXTLINE,
N	_BL_BUSY_,
N	_BL_COMPLETED_,
N	_BL_BITERROR_,
N	_BL_ERROE_,
N	_BL_SECTION_BL,
N	_BL_SECTION_APP,
N	_BL_EMPTY_ = 0xFF
N}BootloaderStatusType;
N
Ntypedef enum _SIndex_
N{
N    SIDX0 = 0,
N    SIDX1,
N    SIDX2,
N    SIDX3,
N    SIDX4,
N    SIDX5,
N    SIDX6,
N    SIDX7,
N    SIDX8,
N    SIDXLEN = SIDX8,
N}SIndex; 
N
Ntypedef struct _LPC11xx_Bootloader_Setting_
N{  		
N	U8 AddrPoint256;
N	U8 BufOffset;
N	U16 AddrPointOffset;	
N	
N	U8 CopyData2Buf[9];
N	U8 Buf2Flash[R2FBUFSIZE] __attribute__ ((aligned (4)));
X	U8 Buf2Flash[256] __attribute__ ((aligned (4)));
N	
N	BootloaderStatusType pMsg;
N
N}LPC11xx_Bootloader_Setting;
N
N
NINTERFACE volatile LPC11xx_Bootloader_Setting g_BootloaderSetting;
Xextern volatile LPC11xx_Bootloader_Setting g_BootloaderSetting;
NINTERFACE void Write_In_Flash(void);
Xextern void Write_In_Flash(void);
NINTERFACE RetU32 msAPI_Flash_PrepareSec( U32 StartSecNum , U32 EndSecNum ) ;
Xextern RetU32 msAPI_Flash_PrepareSec( U32 StartSecNum , U32 EndSecNum ) ;
NINTERFACE RetU32 msAPI_Flash_CopyRAM2Flash( U32 dst , U32 src , U16 number) ;
Xextern RetU32 msAPI_Flash_CopyRAM2Flash( U32 dst , U32 src , U16 number) ;
NINTERFACE RetU32 msAPI_Flash_EraseSec( U32 StartSecNum , U32 EndSecNum );
Xextern RetU32 msAPI_Flash_EraseSec( U32 StartSecNum , U32 EndSecNum );
N#if 0
SINTERFACE U32 msAPI_Flash_BlankChkSec( U32 StartSecNum , U32 EndSecNum , U32 * pResult ) ;
SINTERFACE U32 msAPI_Flash_ReadParID( U32 * PartID );
SINTERFACE U32 msAPI_Flash_Read_BootVer( U32 * MajorVer , U32 * MinorVer ) ;
SINTERFACE U32 msAPI_Flash_Compare( U32 dst , U32 src , U32 number , U32 *offset );
SINTERFACE void  msAPI_Flash_ReinvokeISP(void) ;
SINTERFACE void msAPI_Flash_Ram_Fill(U8 *u8src_prt,U32 u32Size);
N#endif
NINTERFACE void  nsAPI_Flash_Jump2AppSector(void);
Xextern void  nsAPI_Flash_Jump2AppSector(void);
NINTERFACE void nsAPI_Flash_BootBurn2Flash(void);
Xextern void nsAPI_Flash_BootBurn2Flash(void);
NINTERFACE void nsAPI_Flash_UpgradeID(U16 u16ID);
Xextern void nsAPI_Flash_UpgradeID(U16 u16ID);
NINTERFACE void msAPI_Flash_SlaveTransmitter_Status(U8 S0 ,U8 S1,U8 S2);
Xextern void msAPI_Flash_SlaveTransmitter_Status(U8 S0 ,U8 S1,U8 S2);
N//INTERFACE BinCheckSumStatusType msAPI_Flash_IsCheckSumCorrect(void);
NINTERFACE void nsAPI_Flash_Init(void);
Xextern void nsAPI_Flash_Init(void);
NINTERFACE void nsAPI_Flash_SetBLStatus(BootloaderStatusType BLStatus);
Xextern void nsAPI_Flash_SetBLStatus(BootloaderStatusType BLStatus);
NINTERFACE BootloaderStatusType nsAPI_Flash_GetBLStatus(void);
Xextern BootloaderStatusType nsAPI_Flash_GetBLStatus(void);
NINTERFACE RetU8 _XRead(U32 u32Adr);
Xextern RetU8 _XRead(U32 u32Adr);
NINTERFACE BootLean nsAPI_Flash_AppPresent(void);
Xextern BootLean nsAPI_Flash_AppPresent(void);
NINTERFACE BootLean nsAPI_Flash_IsUpgrade(void);
Xextern BootLean nsAPI_Flash_IsUpgrade(void);
NINTERFACE void nsAPI_Flash_EraseAppSector(void);
Xextern void nsAPI_Flash_EraseAppSector(void);
NINTERFACE void nsAPI_Flash_CopyData2Buf(U8 u8Lenth);
Xextern void nsAPI_Flash_CopyData2Buf(U8 u8Lenth);
N//INTERFACE void nsAPI_Flash_CopyData2Buf(void);
N#undef INTERFACE
N#endif 
L 26 ".\Inc\Pixart_Sensor.h" 2
N#include "stdlib.h"
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdlib.h" 1
N/* stdlib.h: ANSI draft (X3J11 May 88) library header, section 4.10 */
N/* Copyright (C) Codemist Ltd., 1988-1993.                          */
N/* Copyright 1991-1998,2014 ARM Limited. All rights reserved.       */
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N 
N/*
N * stdlib.h declares four types, several general purpose functions,
N * and defines several macros.
N */
N
N#ifndef __stdlib_h
N#define __stdlib_h
N#define __ARMCLIB_VERSION 5060044
N
N#if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X#if 0L || (1L && !0L)
N  /* armclang and non-strict armcc allow 'long long' in system headers */
N  #define __LONGLONG long long
N#else
S  /* strict armcc has '__int64' */
S  #define __LONGLONG __int64
N#endif
N
N#define _ARMABI __declspec(__nothrow)
N#define _ARMABI_PURE __declspec(__nothrow) __attribute__((const))
N#define _ARMABI_NORETURN __declspec(__nothrow) __declspec(__noreturn)
N#define _ARMABI_THROW
N
N  #ifndef __STDLIB_DECLS
N  #define __STDLIB_DECLS
N
N  /*
N   * Some of these declarations are new in C99.  To access them in C++
N   * you can use -D__USE_C99_STDLIB (or -D__USE_C99ALL).
N   */
N  #ifndef __USE_C99_STDLIB
N    #if defined(__USE_C99_ALL) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X    #if 0L || (1L && 199901L <= 199409L) || (0L && 201103L <= __cplusplus)
S      #define __USE_C99_STDLIB 1
N    #endif
N  #endif
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS ::std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
N#ifndef __cplusplus  /* wchar_t is a builtin type for C++ */
N  #if !defined(__STRICT_ANSI__)
X  #if !0L
N   /* unconditional in non-strict C for consistency of debug info */
N   #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X   #if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S    typedef unsigned int wchar_t; /* see <stddef.h> */
N   #else
N    typedef unsigned short wchar_t; /* see <stddef.h> */
N   #endif
N  #elif !defined(__wchar_t)
S    #define __wchar_t 1
S   #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
S    typedef unsigned int wchar_t; /* see <stddef.h> */
S   #else
S    typedef unsigned short wchar_t; /* see <stddef.h> */
S   #endif
N  #endif
N#endif
N
Ntypedef struct div_t { int quot, rem; } div_t;
N   /* type of the value returned by the div function. */
Ntypedef struct ldiv_t { long int quot, rem; } ldiv_t;
N   /* type of the value returned by the ldiv function. */
N#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
X#if !0L || __USE_C99_STDLIB
Ntypedef struct lldiv_t { __LONGLONG quot, rem; } lldiv_t;
Xtypedef struct lldiv_t { long long quot, rem; } lldiv_t;
N   /* type of the value returned by the lldiv function. */
N#endif
N
N#ifdef __EXIT_FAILURE
S#  define EXIT_FAILURE __EXIT_FAILURE
S   /*
S    * an integral expression which may be used as an argument to the exit
S    * function to return unsuccessful termination status to the host
S    * environment.
S    */
N#else
N#  define EXIT_FAILURE 1  /* unixoid */
N#endif
N#define EXIT_SUCCESS 0
N   /*
N    * an integral expression which may be used as an argument to the exit
N    * function to return successful termination status to the host
N    * environment.
N    */
N
N   /*
N    * Defining __USE_ANSI_EXAMPLE_RAND at compile time switches to
N    * the example implementation of rand() and srand() provided in
N    * the ANSI C standard. This implementation is very poor, but is
N    * provided for completeness.
N    */
N#ifdef __USE_ANSI_EXAMPLE_RAND
S#define srand _ANSI_srand
S#define rand _ANSI_rand
S#define RAND_MAX 0x7fff
N#else
N#define RAND_MAX 0x7fffffff
N#endif
N   /*
N    * RAND_MAX: an integral constant expression, the value of which
N    * is the maximum value returned by the rand function.
N    */
Nextern _ARMABI int __aeabi_MB_CUR_MAX(void);
Xextern __declspec(__nothrow) int __aeabi_MB_CUR_MAX(void);
N#define MB_CUR_MAX ( __aeabi_MB_CUR_MAX() )
N   /*
N    * a positive integer expression whose value is the maximum number of bytes
N    * in a multibyte character for the extended character set specified by the
N    * current locale (category LC_CTYPE), and whose value is never greater
N    * than MB_LEN_MAX.
N    */
N
N   /*
N    * If the compiler supports signalling nans as per N965 then it
N    * will define __SUPPORT_SNAN__, in which case a user may define
N    * _WANT_SNAN in order to obtain a compliant version of the strtod
N    * family of functions.
N    */
N#if defined(__SUPPORT_SNAN__) && defined(_WANT_SNAN)
X#if 0L && 0L
S#pragma import(__use_snan)
N#endif
N
Nextern _ARMABI double atof(const char * /*nptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) double atof(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to double
N    * representation.
N    * Returns: the converted value.
N    */
Nextern _ARMABI int atoi(const char * /*nptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int atoi(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to int
N    * representation.
N    * Returns: the converted value.
N    */
Nextern _ARMABI long int atol(const char * /*nptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long int atol(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to long int
N    * representation.
N    * Returns: the converted value.
N    */
N#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
X#if !0L || __USE_C99_STDLIB
Nextern _ARMABI __LONGLONG atoll(const char * /*nptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long long atoll(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to
N    * long long int representation.
N    * Returns: the converted value.
N    */
N#endif
N
Nextern _ARMABI double strtod(const char * __restrict /*nptr*/, char ** __restrict /*endptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) double strtod(const char * __restrict  , char ** __restrict  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to double
N    * representation. First it decomposes the input string into three parts:
N    * an initial, possibly empty, sequence of white-space characters (as
N    * specified by the isspace function), a subject sequence resembling a
N    * floating point constant; and a final string of one or more unrecognised
N    * characters, including the terminating null character of the input string.
N    * Then it attempts to convert the subject sequence to a floating point
N    * number, and returns the result. A pointer to the final string is stored
N    * in the object pointed to by endptr, provided that endptr is not a null
N    * pointer.
N    * Returns: the converted value if any. If no conversion could be performed,
N    *          zero is returned. If the correct value is outside the range of
N    *          representable values, plus or minus HUGE_VAL is returned
N    *          (according to the sign of the value), and the value of the macro
N    *          ERANGE is stored in errno. If the correct value would cause
N    *          underflow, zero is returned and the value of the macro ERANGE is
N    *          stored in errno.
N    */
N#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
X#if !0L || __USE_C99_STDLIB
Nextern _ARMABI float strtof(const char * __restrict /*nptr*/, char ** __restrict /*endptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) float strtof(const char * __restrict  , char ** __restrict  ) __attribute__((__nonnull__(1)));
Nextern _ARMABI long double strtold(const char * __restrict /*nptr*/, char ** __restrict /*endptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long double strtold(const char * __restrict  , char ** __restrict  ) __attribute__((__nonnull__(1)));
N   /*
N    * same as strtod, but return float and long double respectively.
N    */
N#endif
Nextern _ARMABI long int strtol(const char * __restrict /*nptr*/,
Xextern __declspec(__nothrow) long int strtol(const char * __restrict  ,
N                        char ** __restrict /*endptr*/, int /*base*/) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to long int
N    * representation. First it decomposes the input string into three parts:
N    * an initial, possibly empty, sequence of white-space characters (as
N    * specified by the isspace function), a subject sequence resembling an
N    * integer represented in some radix determined by the value of base, and a
N    * final string of one or more unrecognised characters, including the
N    * terminating null character of the input string. Then it attempts to
N    * convert the subject sequence to an integer, and returns the result.
N    * If the value of base is 0, the expected form of the subject sequence is
N    * that of an integer constant (described in ANSI Draft, section 3.1.3.2),
N    * optionally preceded by a '+' or '-' sign, but not including an integer
N    * suffix. If the value of base is between 2 and 36, the expected form of
N    * the subject sequence is a sequence of letters and digits representing an
N    * integer with the radix specified by base, optionally preceded by a plus
N    * or minus sign, but not including an integer suffix. The letters from a
N    * (or A) through z (or Z) are ascribed the values 10 to 35; only letters
N    * whose ascribed values are less than that of the base are permitted. If
N    * the value of base is 16, the characters 0x or 0X may optionally precede
N    * the sequence of letters and digits following the sign if present.
N    * A pointer to the final string is stored in the object
N    * pointed to by endptr, provided that endptr is not a null pointer.
N    * Returns: the converted value if any. If no conversion could be performed,
N    *          zero is returned and nptr is stored in *endptr.
N    *          If the correct value is outside the range of
N    *          representable values, LONG_MAX or LONG_MIN is returned
N    *          (according to the sign of the value), and the value of the
N    *          macro ERANGE is stored in errno.
N    */
Nextern _ARMABI unsigned long int strtoul(const char * __restrict /*nptr*/,
Xextern __declspec(__nothrow) unsigned long int strtoul(const char * __restrict  ,
N                                       char ** __restrict /*endptr*/, int /*base*/) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to unsigned
N    * long int representation. First it decomposes the input string into three
N    * parts: an initial, possibly empty, sequence of white-space characters (as
N    * determined by the isspace function), a subject sequence resembling an
N    * unsigned integer represented in some radix determined by the value of
N    * base, and a final string of one or more unrecognised characters,
N    * including the terminating null character of the input string. Then it
N    * attempts to convert the subject sequence to an unsigned integer, and
N    * returns the result. If the value of base is zero, the expected form of
N    * the subject sequence is that of an integer constant (described in ANSI
N    * Draft, section 3.1.3.2), optionally preceded by a '+' or '-' sign, but
N    * not including an integer suffix. If the value of base is between 2 and
N    * 36, the expected form of the subject sequence is a sequence of letters
N    * and digits representing an integer with the radix specified by base,
N    * optionally preceded by a '+' or '-' sign, but not including an integer
N    * suffix. The letters from a (or A) through z (or Z) stand for the values
N    * 10 to 35; only letters whose ascribed values are less than that of the
N    * base are permitted. If the value of base is 16, the characters 0x or 0X
N    * may optionally precede the sequence of letters and digits following the
N    * sign, if present. A pointer to the final string is stored in the object
N    * pointed to by endptr, provided that endptr is not a null pointer.
N    * Returns: the converted value if any. If no conversion could be performed,
N    *          zero is returned and nptr is stored in *endptr.
N    *          If the correct value is outside the range of
N    *          representable values, ULONG_MAX is returned, and the value of
N    *          the macro ERANGE is stored in errno.
N    */
N
N/* C90 reserves all names beginning with 'str' */
Nextern _ARMABI __LONGLONG strtoll(const char * __restrict /*nptr*/,
Xextern __declspec(__nothrow) long long strtoll(const char * __restrict  ,
N                                  char ** __restrict /*endptr*/, int /*base*/)
N                          __attribute__((__nonnull__(1)));
N   /*
N    * as strtol but returns a long long int value.  If the correct value is
N    * outside the range of representable values,  LLONG_MAX or LLONG_MIN is
N    * returned (according to the sign of the value), and the value of the
N    * macro ERANGE is stored in errno.
N    */
Nextern _ARMABI unsigned __LONGLONG strtoull(const char * __restrict /*nptr*/,
Xextern __declspec(__nothrow) unsigned long long strtoull(const char * __restrict  ,
N                                            char ** __restrict /*endptr*/, int /*base*/)
N                                   __attribute__((__nonnull__(1)));
N   /*
N    * as strtoul but returns an unsigned long long int value.  If the correct
N    * value is outside the range of representable values, ULLONG_MAX is returned,
N    * and the value of the macro ERANGE is stored in errno.
N    */
N
Nextern _ARMABI int rand(void);
Xextern __declspec(__nothrow) int rand(void);
N   /*
N    * Computes a sequence of pseudo-random integers in the range 0 to RAND_MAX.
N    * Uses an additive generator (Mitchell & Moore) of the form:
N    *   Xn = (X[n-24] + X[n-55]) MOD 2^31
N    * This is described in section 3.2.2 of Knuth, vol 2. It's period is
N    * in excess of 2^55 and its randomness properties, though unproven, are
N    * conjectured to be good. Empirical testing since 1958 has shown no flaws.
N    * Returns: a pseudo-random integer.
N    */
Nextern _ARMABI void srand(unsigned int /*seed*/);
Xextern __declspec(__nothrow) void srand(unsigned int  );
N   /*
N    * uses its argument as a seed for a new sequence of pseudo-random numbers
N    * to be returned by subsequent calls to rand. If srand is then called with
N    * the same seed value, the sequence of pseudo-random numbers is repeated.
N    * If rand is called before any calls to srand have been made, the same
N    * sequence is generated as when srand is first called with a seed value
N    * of 1.
N    */
N
Nstruct _rand_state { int __x[57]; };
Nextern _ARMABI int _rand_r(struct _rand_state *);
Xextern __declspec(__nothrow) int _rand_r(struct _rand_state *);
Nextern _ARMABI void _srand_r(struct _rand_state *, unsigned int);
Xextern __declspec(__nothrow) void _srand_r(struct _rand_state *, unsigned int);
Nstruct _ANSI_rand_state { int __x[1]; };
Nextern _ARMABI int _ANSI_rand_r(struct _ANSI_rand_state *);
Xextern __declspec(__nothrow) int _ANSI_rand_r(struct _ANSI_rand_state *);
Nextern _ARMABI void _ANSI_srand_r(struct _ANSI_rand_state *, unsigned int);
Xextern __declspec(__nothrow) void _ANSI_srand_r(struct _ANSI_rand_state *, unsigned int);
N   /*
N    * Re-entrant variants of both flavours of rand, which operate on
N    * an explicitly supplied state buffer.
N    */
N
Nextern _ARMABI void *calloc(size_t /*nmemb*/, size_t /*size*/);
Xextern __declspec(__nothrow) void *calloc(size_t  , size_t  );
N   /*
N    * allocates space for an array of nmemb objects, each of whose size is
N    * 'size'. The space is initialised to all bits zero.
N    * Returns: either a null pointer or a pointer to the allocated space.
N    */
Nextern _ARMABI void free(void * /*ptr*/);
Xextern __declspec(__nothrow) void free(void *  );
N   /*
N    * causes the space pointed to by ptr to be deallocated (i.e., made
N    * available for further allocation). If ptr is a null pointer, no action
N    * occurs. Otherwise, if ptr does not match a pointer earlier returned by
N    * calloc, malloc or realloc or if the space has been deallocated by a call
N    * to free or realloc, the behaviour is undefined.
N    */
Nextern _ARMABI void *malloc(size_t /*size*/);
Xextern __declspec(__nothrow) void *malloc(size_t  );
N   /*
N    * allocates space for an object whose size is specified by 'size' and whose
N    * value is indeterminate.
N    * Returns: either a null pointer or a pointer to the allocated space.
N    */
Nextern _ARMABI void *realloc(void * /*ptr*/, size_t /*size*/);
Xextern __declspec(__nothrow) void *realloc(void *  , size_t  );
N   /*
N    * changes the size of the object pointed to by ptr to the size specified by
N    * size. The contents of the object shall be unchanged up to the lesser of
N    * the new and old sizes. If the new size is larger, the value of the newly
N    * allocated portion of the object is indeterminate. If ptr is a null
N    * pointer, the realloc function behaves like a call to malloc for the
N    * specified size. Otherwise, if ptr does not match a pointer earlier
N    * returned by calloc, malloc or realloc, or if the space has been
N    * deallocated by a call to free or realloc, the behaviour is undefined.
N    * If the space cannot be allocated, the object pointed to by ptr is
N    * unchanged. If size is zero and ptr is not a null pointer, the object it
N    * points to is freed.
N    * Returns: either a null pointer or a pointer to the possibly moved
N    *          allocated space.
N    */
N#if !defined(__STRICT_ANSI__)
X#if !0L
Nextern _ARMABI int posix_memalign(void ** /*ret*/, size_t /*alignment*/, size_t /*size*/);
Xextern __declspec(__nothrow) int posix_memalign(void **  , size_t  , size_t  );
N   /*
N    * allocates space for an object of size 'size', aligned to a
N    * multiple of 'alignment' (which must be a power of two and at
N    * least 4).
N    *
N    * On success, a pointer to the allocated object is stored in
N    * *ret, and zero is returned. On failure, the return value is
N    * either ENOMEM (allocation failed because no suitable piece of
N    * memory was available) or EINVAL (the 'alignment' parameter was
N    * invalid).
N    */
N#endif
Ntypedef int (*__heapprt)(void *, char const *, ...);
Nextern _ARMABI void __heapstats(int (* /*dprint*/)(void * /*param*/,
Xextern __declspec(__nothrow) void __heapstats(int (*  )(void *  ,
N                                           char const * /*format*/, ...),
N                        void * /*param*/) __attribute__((__nonnull__(1)));
N   /*
N    * reports current heap statistics (eg. number of free blocks in
N    * the free-list). Output is as implementation-defined free-form
N    * text, provided via the dprint function. `param' gives an
N    * extra data word to pass to dprint. You can call
N    * __heapstats(fprintf,stdout) by casting fprintf to the above
N    * function type; the typedef `__heapprt' is provided for this
N    * purpose.
N    *
N    * `dprint' will not be called while the heap is being examined,
N    * so it can allocate memory itself without trouble.
N    */
Nextern _ARMABI int __heapvalid(int (* /*dprint*/)(void * /*param*/,
Xextern __declspec(__nothrow) int __heapvalid(int (*  )(void *  ,
N                                           char const * /*format*/, ...),
N                       void * /*param*/, int /*verbose*/) __attribute__((__nonnull__(1)));
N   /*
N    * performs a consistency check on the heap. Errors are reported
N    * through dprint, like __heapstats. If `verbose' is nonzero,
N    * full diagnostic information on the heap state is printed out.
N    *
N    * This routine probably won't work if the heap isn't a
N    * contiguous chunk (for example, if __user_heap_extend has been
N    * overridden).
N    *
N    * `dprint' may be called while the heap is being examined or
N    * even in an invalid state, so it must perform no memory
N    * allocation. In particular, if `dprint' calls (or is) a stdio
N    * function, the stream it outputs to must already have either
N    * been written to or been setvbuf'ed, or else the system will
N    * allocate buffer space for it on the first call to dprint.
N    */
Nextern _ARMABI_NORETURN void abort(void);
Xextern __declspec(__nothrow) __declspec(__noreturn) void abort(void);
N   /*
N    * causes abnormal program termination to occur, unless the signal SIGABRT
N    * is being caught and the signal handler does not return. Whether open
N    * output streams are flushed or open streams are closed or temporary
N    * files removed is implementation-defined.
N    * An implementation-defined form of the status 'unsuccessful termination'
N    * is returned to the host environment by means of a call to
N    * raise(SIGABRT).
N    */
N
Nextern _ARMABI int atexit(void (* /*func*/)(void)) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int atexit(void (*  )(void)) __attribute__((__nonnull__(1)));
N   /*
N    * registers the function pointed to by func, to be called without its
N    * arguments at normal program termination. It is possible to register at
N    * least 32 functions.
N    * Returns: zero if the registration succeeds, nonzero if it fails.
N    */
N#if defined(__EDG__) && !defined(__GNUC__)
X#if 1L && !0L
N#define __LANGUAGE_LINKAGE_CHANGES_FUNCTION_TYPE
N#endif
N#if defined(__cplusplus) && defined(__LANGUAGE_LINKAGE_CHANGES_FUNCTION_TYPE) 
X#if 0L && 1L 
S    /* atexit that takes a ptr to a function with C++ linkage 
S     * but not in GNU mode  
S     */
S    typedef void (* __C_exitfuncptr)();
S    extern "C++"
S    inline int atexit(void (* __func)()) {
S      return atexit((__C_exitfuncptr)__func);
S    }
N#endif
N
N
Nextern _ARMABI_NORETURN void exit(int /*status*/);
Xextern __declspec(__nothrow) __declspec(__noreturn) void exit(int  );
N   /*
N    * causes normal program termination to occur. If more than one call to the
N    * exit function is executed by a program, the behaviour is undefined.
N    * First, all functions registered by the atexit function are called, in the
N    * reverse order of their registration.
N    * Next, all open output streams are flushed, all open streams are closed,
N    * and all files created by the tmpfile function are removed.
N    * Finally, control is returned to the host environment. If the value of
N    * status is zero or EXIT_SUCCESS, an implementation-defined form of the
N    * status 'successful termination' is returned. If the value of status is
N    * EXIT_FAILURE, an implementation-defined form of the status
N    * 'unsuccessful termination' is returned. Otherwise the status returned
N    * is implementation-defined.
N    */
N
Nextern _ARMABI_NORETURN void _Exit(int /*status*/);
Xextern __declspec(__nothrow) __declspec(__noreturn) void _Exit(int  );
N   /*
N    * causes normal program termination to occur. No functions registered
N    * by the atexit function are called.
N    * In this implementation, all open output streams are flushed, all
N    * open streams are closed, and all files created by the tmpfile function
N    * are removed.
N    * Control is returned to the host environment. The status returned to
N    * the host environment is determined in the same way as for 'exit'.
N    */     
N
Nextern _ARMABI char *getenv(const char * /*name*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *getenv(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * searches the environment list, provided by the host environment, for a
N    * string that matches the string pointed to by name. The set of environment
N    * names and the method for altering the environment list are
N    * implementation-defined.
N    * Returns: a pointer to a string associated with the matched list member.
N    *          The array pointed to shall not be modified by the program, but
N    *          may be overwritten by a subsequent call to the getenv function.
N    *          If the specified name cannot be found, a null pointer is
N    *          returned.
N    */
N
Nextern _ARMABI int  system(const char * /*string*/);
Xextern __declspec(__nothrow) int  system(const char *  );
N   /*
N    * passes the string pointed to by string to the host environment to be
N    * executed by a command processor in an implementation-defined manner.
N    * A null pointer may be used for string, to inquire whether a command
N    * processor exists.
N    *
N    * Returns: If the argument is a null pointer, the system function returns
N    *          non-zero only if a command processor is available. If the
N    *          argument is not a null pointer, the system function returns an
N    *          implementation-defined value.
N    */
N
Nextern _ARMABI_THROW void *bsearch(const void * /*key*/, const void * /*base*/,
Xextern  void *bsearch(const void *  , const void *  ,
N              size_t /*nmemb*/, size_t /*size*/,
N              int (* /*compar*/)(const void *, const void *)) __attribute__((__nonnull__(1,2,5)));
N   /*
N    * searches an array of nmemb objects, the initial member of which is
N    * pointed to by base, for a member that matches the object pointed to by
N    * key. The size of each member of the array is specified by size.
N    * The contents of the array shall be in ascending sorted order according to
N    * a comparison function pointed to by compar, which is called with two
N    * arguments that point to the key object and to an array member, in that
N    * order. The function shall return an integer less than, equal to, or
N    * greater than zero if the key object is considered, respectively, to be
N    * less than, to match, or to be greater than the array member.
N    * Returns: a pointer to a matching member of the array, or a null pointer
N    *          if no match is found. If two members compare as equal, which
N    *          member is matched is unspecified.
N    */
N#if defined(__cplusplus) && defined(__LANGUAGE_LINKAGE_CHANGES_FUNCTION_TYPE)
X#if 0L && 1L
S    /* bsearch that takes a ptr to a function with C++ linkage 
S     * but not in GNU mode
S     */
S    typedef int (* __C_compareprocptr)(const void *, const void *);
S    extern "C++"
S    void *bsearch(const void * __key, const void * __base,
S              size_t __nmemb, size_t __size,
S              int (* __compar)(const void *, const void *)) __attribute__((__nonnull__(1,2,5)));
S    extern "C++"
S    inline void *bsearch(const void * __key, const void * __base,
S              size_t __nmemb, size_t __size,
S              int (* __compar)(const void *, const void *)) {
S      return bsearch(__key, __base, __nmemb, __size, (__C_compareprocptr)__compar);
S    }
N#endif
N
N
Nextern _ARMABI_THROW void qsort(void * /*base*/, size_t /*nmemb*/, size_t /*size*/,
Xextern  void qsort(void *  , size_t  , size_t  ,
N           int (* /*compar*/)(const void *, const void *)) __attribute__((__nonnull__(1,4)));
N   /*
N    * sorts an array of nmemb objects, the initial member of which is pointed
N    * to by base. The size of each object is specified by size.
N    * The contents of the array shall be in ascending order according to a
N    * comparison function pointed to by compar, which is called with two
N    * arguments that point to the objects being compared. The function shall
N    * return an integer less than, equal to, or greater than zero if the first
N    * argument is considered to be respectively less than, equal to, or greater
N    * than the second. If two members compare as equal, their order in the
N    * sorted array is unspecified.
N    */
N
N#if defined(__cplusplus) && defined(__LANGUAGE_LINKAGE_CHANGES_FUNCTION_TYPE)
X#if 0L && 1L
S    /* qsort that takes a ptr to a function with C++ linkage 
S     * but not in GNU mode
S     */    
S    extern "C++"
S    void qsort(void * __base, size_t __nmemb, size_t __size,
S               int (* __compar)(const void *, const void *)) __attribute__((__nonnull__(1,4)));
S    extern "C++"
S    inline void qsort(void * __base, size_t __nmemb, size_t __size,
S                      int (* __compar)(const void *, const void *)) {
S      qsort(__base, __nmemb, __size, (__C_compareprocptr)__compar);
S    }
N#endif
N
Nextern _ARMABI_PURE int abs(int /*j*/);
Xextern __declspec(__nothrow) __attribute__((const)) int abs(int  );
N   /*
N    * computes the absolute value of an integer j. If the result cannot be
N    * represented, the behaviour is undefined.
N    * Returns: the absolute value.
N    */
N
Nextern _ARMABI_PURE div_t div(int /*numer*/, int /*denom*/);
Xextern __declspec(__nothrow) __attribute__((const)) div_t div(int  , int  );
N   /*
N    * computes the quotient and remainder of the division of the numerator
N    * numer by the denominator denom. If the division is inexact, the resulting
N    * quotient is the integer of lesser magnitude that is the nearest to the
N    * algebraic quotient. If the result cannot be represented, the behaviour is
N    * undefined; otherwise, quot * denom + rem shall equal numer.
N    * Returns: a structure of type div_t, comprising both the quotient and the
N    *          remainder. the structure shall contain the following members,
N    *          in either order.
N    *          int quot; int rem;
N    */
Nextern _ARMABI_PURE long int labs(long int /*j*/);
Xextern __declspec(__nothrow) __attribute__((const)) long int labs(long int  );
N   /*
N    * computes the absolute value of an long integer j. If the result cannot be
N    * represented, the behaviour is undefined.
N    * Returns: the absolute value.
N    */
N#ifdef __cplusplus
S   extern "C++" inline _ARMABI_PURE long abs(long int x) { return labs(x); }
N#endif
N
Nextern _ARMABI_PURE ldiv_t ldiv(long int /*numer*/, long int /*denom*/);
Xextern __declspec(__nothrow) __attribute__((const)) ldiv_t ldiv(long int  , long int  );
N   /*
N    * computes the quotient and remainder of the division of the numerator
N    * numer by the denominator denom. If the division is inexact, the sign of
N    * the resulting quotient is that of the algebraic quotient, and the
N    * magnitude of the resulting quotient is the largest integer less than the
N    * magnitude of the algebraic quotient. If the result cannot be represented,
N    * the behaviour is undefined; otherwise, quot * denom + rem shall equal
N    * numer.
N    * Returns: a structure of type ldiv_t, comprising both the quotient and the
N    *          remainder. the structure shall contain the following members,
N    *          in either order.
N    *          long int quot; long int rem;
N    */
N#ifdef __cplusplus
S   extern "C++" inline _ARMABI_PURE ldiv_t div(long int __numer, long int __denom) {
S       return ldiv(__numer, __denom);
S   }
N#endif
N
N#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
X#if !0L || __USE_C99_STDLIB
Nextern _ARMABI_PURE __LONGLONG llabs(__LONGLONG /*j*/);
Xextern __declspec(__nothrow) __attribute__((const)) long long llabs(long long  );
N   /*
N    * computes the absolute value of a long long integer j. If the
N    * result cannot be represented, the behaviour is undefined.
N    * Returns: the absolute value.
N    */
N#ifdef __cplusplus
S   extern "C++" inline _ARMABI_PURE __LONGLONG abs(__LONGLONG x) { return llabs(x); }
N#endif
N
Nextern _ARMABI_PURE lldiv_t lldiv(__LONGLONG /*numer*/, __LONGLONG /*denom*/);
Xextern __declspec(__nothrow) __attribute__((const)) lldiv_t lldiv(long long  , long long  );
N   /*
N    * computes the quotient and remainder of the division of the numerator
N    * numer by the denominator denom. If the division is inexact, the sign of
N    * the resulting quotient is that of the algebraic quotient, and the
N    * magnitude of the resulting quotient is the largest integer less than the
N    * magnitude of the algebraic quotient. If the result cannot be represented,
N    * the behaviour is undefined; otherwise, quot * denom + rem shall equal
N    * numer.
N    * Returns: a structure of type lldiv_t, comprising both the quotient and the
N    *          remainder. the structure shall contain the following members,
N    *          in either order.
N    *          long long quot; long long rem;
N    */
N#ifdef __cplusplus
S   extern "C++" inline _ARMABI_PURE lldiv_t div(__LONGLONG __numer, __LONGLONG __denom) {
S       return lldiv(__numer, __denom);
S   }
N#endif
N#endif
N
N#if !(__ARM_NO_DEPRECATED_FUNCTIONS)
N/*
N * ARM real-time divide functions for guaranteed performance
N */
Ntypedef struct __sdiv32by16 { int quot, rem; } __sdiv32by16;
Ntypedef struct __udiv32by16 { unsigned int quot, rem; } __udiv32by16;
N   /* used int so that values return in separate regs, although 16-bit */
Ntypedef struct __sdiv64by32 { int rem, quot; } __sdiv64by32;
N
N__value_in_regs extern _ARMABI_PURE __sdiv32by16 __rt_sdiv32by16(
X__value_in_regs extern __declspec(__nothrow) __attribute__((const)) __sdiv32by16 __rt_sdiv32by16(
N     int /*numer*/,
N     short int /*denom*/);
N   /*
N    * Signed divide: (16-bit quot), (16-bit rem) = (32-bit) / (16-bit)
N    */
N__value_in_regs extern _ARMABI_PURE __udiv32by16 __rt_udiv32by16(
X__value_in_regs extern __declspec(__nothrow) __attribute__((const)) __udiv32by16 __rt_udiv32by16(
N     unsigned int /*numer*/,
N     unsigned short /*denom*/);
N   /*
N    * Unsigned divide: (16-bit quot), (16-bit rem) = (32-bit) / (16-bit)
N    */
N__value_in_regs extern _ARMABI_PURE __sdiv64by32 __rt_sdiv64by32(
X__value_in_regs extern __declspec(__nothrow) __attribute__((const)) __sdiv64by32 __rt_sdiv64by32(
N     int /*numer_h*/, unsigned int /*numer_l*/,
N     int /*denom*/);
N   /*
N    * Signed divide: (32-bit quot), (32-bit rem) = (64-bit) / (32-bit)
N    */
N#endif
N
N/*
N * ARM floating-point mask/status function (for both hardfp and softfp)
N */
Nextern _ARMABI unsigned int __fp_status(unsigned int /*mask*/, unsigned int /*flags*/);
Xextern __declspec(__nothrow) unsigned int __fp_status(unsigned int  , unsigned int  );
N   /*
N    * mask and flags are bit-fields which correspond directly to the
N    * floating point status register in the FPE/FPA and fplib.  
N    * __fp_status returns the current value of the status register,
N    * and also sets the writable bits of the word
N    * (the exception control and flag bytes) to:
N    *
N    *     new = (old & ~mask) ^ flags;
N    */
N#define __fpsr_IXE  0x100000
N#define __fpsr_UFE  0x80000
N#define __fpsr_OFE  0x40000
N#define __fpsr_DZE  0x20000
N#define __fpsr_IOE  0x10000
N
N#define __fpsr_IXC  0x10
N#define __fpsr_UFC  0x8
N#define __fpsr_OFC  0x4
N#define __fpsr_DZC  0x2
N#define __fpsr_IOC  0x1
N
N/*
N * Multibyte Character Functions.
N * The behaviour of the multibyte character functions is affected by the
N * LC_CTYPE category of the current locale. For a state-dependent encoding,
N * each function is placed into its initial state by a call for which its
N * character pointer argument, s, is a null pointer. Subsequent calls with s
N * as other than a null pointer cause the internal state of the function to be
N * altered as necessary. A call with s as a null pointer causes these functions
N * to return a nonzero value if encodings have state dependency, and a zero
N * otherwise. After the LC_CTYPE category is changed, the shift state of these
N * functions is indeterminate.
N */
Nextern _ARMABI int mblen(const char * /*s*/, size_t /*n*/);
Xextern __declspec(__nothrow) int mblen(const char *  , size_t  );
N   /*
N    * If s is not a null pointer, the mblen function determines the number of
N    * bytes compromising the multibyte character pointed to by s. Except that
N    * the shift state of the mbtowc function is not affected, it is equivalent
N    * to   mbtowc((wchar_t *)0, s, n);
N    * Returns: If s is a null pointer, the mblen function returns a nonzero or
N    *          zero value, if multibyte character encodings, respectively, do
N    *          or do not have state-dependent encodings. If s is not a null
N    *          pointer, the mblen function either returns a 0 (if s points to a
N    *          null character), or returns the number of bytes that compromise
N    *          the multibyte character (if the next n of fewer bytes form a
N    *          valid multibyte character), or returns -1 (they do not form a
N    *          valid multibyte character).
N    */
Nextern _ARMABI int mbtowc(wchar_t * __restrict /*pwc*/,
Xextern __declspec(__nothrow) int mbtowc(wchar_t * __restrict  ,
N                   const char * __restrict /*s*/, size_t /*n*/);
N   /*
N    * If s is not a null pointer, the mbtowc function determines the number of
N    * bytes that compromise the multibyte character pointed to by s. It then
N    * determines the code for value of type wchar_t that corresponds to that
N    * multibyte character. (The value of the code corresponding to the null
N    * character is zero). If the multibyte character is valid and pwc is not a
N    * null pointer, the mbtowc function stores the code in the object pointed
N    * to by pwc. At most n bytes of the array pointed to by s will be examined.
N    * Returns: If s is a null pointer, the mbtowc function returns a nonzero or
N    *          zero value, if multibyte character encodings, respectively, do
N    *          or do not have state-dependent encodings. If s is not a null
N    *          pointer, the mbtowc function either returns a 0 (if s points to
N    *          a null character), or returns the number of bytes that
N    *          compromise the converted multibyte character (if the next n of
N    *          fewer bytes form a valid multibyte character), or returns -1
N    *          (they do not form a valid multibyte character).
N    */
Nextern _ARMABI int wctomb(char * /*s*/, wchar_t /*wchar*/);
Xextern __declspec(__nothrow) int wctomb(char *  , wchar_t  );
N   /*
N    * determines the number of bytes need to represent the multibyte character
N    * corresponding to the code whose value is wchar (including any change in
N    * shift state). It stores the multibyte character representation in the
N    * array object pointed to by s (if s is not a null pointer). At most
N    * MB_CUR_MAX characters are stored. If the value of wchar is zero, the
N    * wctomb function is left in the initial shift state).
N    * Returns: If s is a null pointer, the wctomb function returns a nonzero or
N    *          zero value, if multibyte character encodings, respectively, do
N    *          or do not have state-dependent encodings. If s is not a null
N    *          pointer, the wctomb function returns a -1 if the value of wchar
N    *          does not correspond to a valid multibyte character, or returns
N    *          the number of bytes that compromise the multibyte character
N    *          corresponding to the value of wchar.
N    */
N
N/*
N * Multibyte String Functions.
N * The behaviour of the multibyte string functions is affected by the LC_CTYPE
N * category of the current locale.
N */
Nextern _ARMABI size_t mbstowcs(wchar_t * __restrict /*pwcs*/,
Xextern __declspec(__nothrow) size_t mbstowcs(wchar_t * __restrict  ,
N                      const char * __restrict /*s*/, size_t /*n*/) __attribute__((__nonnull__(2)));
N   /*
N    * converts a sequence of multibyte character that begins in the initial
N    * shift state from the array pointed to by s into a sequence of
N    * corresponding codes and stores not more than n codes into the array
N    * pointed to by pwcs. No multibyte character that follow a null character
N    * (which is converted into a code with value zero) will be examined or
N    * converted. Each multibyte character is converted as if by a call to
N    * mbtowc function, except that the shift state of the mbtowc function is
N    * not affected. No more than n elements will be modified in the array
N    * pointed to by pwcs. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: If an invalid multibyte character is encountered, the mbstowcs
N    *          function returns (size_t)-1. Otherwise, the mbstowcs function
N    *          returns the number of array elements modified, not including
N    *          a terminating zero code, if any.
N    */
Nextern _ARMABI size_t wcstombs(char * __restrict /*s*/,
Xextern __declspec(__nothrow) size_t wcstombs(char * __restrict  ,
N                      const wchar_t * __restrict /*pwcs*/, size_t /*n*/) __attribute__((__nonnull__(2)));
N   /*
N    * converts a sequence of codes that correspond to multibyte characters
N    * from the array pointed to by pwcs into a sequence of multibyte
N    * characters that begins in the initial shift state and stores these
N    * multibyte characters into the array pointed to by s, stopping if a
N    * multibyte character would exceed the limit of n total bytes or if a
N    * null character is stored. Each code is converted as if by a call to the
N    * wctomb function, except that the shift state of the wctomb function is
N    * not affected. No more than n elements will be modified in the array
N    * pointed to by s. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: If a code is encountered that does not correspond to a valid
N    *          multibyte character, the wcstombs function returns (size_t)-1.
N    *          Otherwise, the wcstombs function returns the number of bytes
N    *          modified, not including a terminating null character, if any.
N    */
N
Nextern _ARMABI void __use_realtime_heap(void);
Xextern __declspec(__nothrow) void __use_realtime_heap(void);
Nextern _ARMABI void __use_realtime_division(void);
Xextern __declspec(__nothrow) void __use_realtime_division(void);
Nextern _ARMABI void __use_two_region_memory(void);
Xextern __declspec(__nothrow) void __use_two_region_memory(void);
Nextern _ARMABI void __use_no_heap(void);
Xextern __declspec(__nothrow) void __use_no_heap(void);
Nextern _ARMABI void __use_no_heap_region(void);
Xextern __declspec(__nothrow) void __use_no_heap_region(void);
N
Nextern _ARMABI char const *__C_library_version_string(void);
Xextern __declspec(__nothrow) char const *__C_library_version_string(void);
Nextern _ARMABI int __C_library_version_number(void);
Xextern __declspec(__nothrow) int __C_library_version_number(void);
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDLIB_DECLS */
N
N  #if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X  #if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S    #define _AEABI_PORTABLE
N  #endif
N
N  #ifdef __cplusplus
S    #ifndef __STDLIB_NO_EXPORTS
S      #if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
S        using ::std::atoll;
S        using ::std::lldiv_t;
S      #endif /* !defined(__STRICT_ANSI__) || __USE_C99_STDLIB */
S      using ::std::div_t;
S      using ::std::ldiv_t;
S      using ::std::atof;
S      using ::std::atoi;
S      using ::std::atol;
S      using ::std::strtod;
S#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
S      using ::std::strtof;
S      using ::std::strtold;
S#endif
S      using ::std::strtol;
S      using ::std::strtoul;
S      using ::std::strtoll;
S      using ::std::strtoull;
S      using ::std::rand;
S      using ::std::srand;
S      using ::std::_rand_state;
S      using ::std::_rand_r;
S      using ::std::_srand_r;
S      using ::std::_ANSI_rand_state;
S      using ::std::_ANSI_rand_r;
S      using ::std::_ANSI_srand_r;
S      using ::std::calloc;
S      using ::std::free;
S      using ::std::malloc;
S      using ::std::realloc;
S#if !defined(__STRICT_ANSI__)
S      using ::std::posix_memalign;
S#endif
S      using ::std::__heapprt;
S      using ::std::__heapstats;
S      using ::std::__heapvalid;
S      using ::std::abort;
S      using ::std::atexit;
S      using ::std::exit;
S      using ::std::_Exit;
S      using ::std::getenv;
S      using ::std::system;
S      using ::std::bsearch;
S      using ::std::qsort;
S      using ::std::abs;
S      using ::std::div;
S      using ::std::labs;
S      using ::std::ldiv;
S      #if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
S        using ::std::llabs;
S        using ::std::lldiv;
S      #endif /* !defined(__STRICT_ANSI__) || __USE_C99_STDLIB */
S#if !(__ARM_NO_DEPRECATED_FUNCTIONS)
S      using ::std::__sdiv32by16;
S      using ::std::__udiv32by16;
S      using ::std::__sdiv64by32;
S      using ::std::__rt_sdiv32by16;
S      using ::std::__rt_udiv32by16;
S      using ::std::__rt_sdiv64by32;
S#endif
S      using ::std::__fp_status;
S      using ::std::mblen;
S      using ::std::mbtowc;
S      using ::std::wctomb;
S      using ::std::mbstowcs;
S      using ::std::wcstombs;
S      using ::std::__use_realtime_heap;
S      using ::std::__use_realtime_division;
S      using ::std::__use_two_region_memory;
S      using ::std::__use_no_heap;
S      using ::std::__use_no_heap_region;
S      using ::std::__C_library_version_string;
S      using ::std::__C_library_version_number;
S      using ::std::size_t;
S      using ::std::__aeabi_MB_CUR_MAX;
S    #endif /* __STDLIB_NO_EXPORTS */
N  #endif /* __cplusplus */
N
N#undef __LONGLONG
N
N#endif /* __stdlib_h */
N
N/* end of stdlib.h */
L 27 ".\Inc\Pixart_Sensor.h" 2
N
Nenum{
N	BUTTON = 0,	//0
N	X_LOW,		//1
N	X_HIGH,		//2
N	Y_LOW,		//3
N	Y_HIGH,		//4
N	WHEEL,		//5
N	MOTION,		//	6
N	SQUAL,		//	7
N	PIXEL_SUM,	//	8
N	MAX_PIXEL,	//	9
N	MIN_PIXEL,	//	10
N	SHUTTER_UPPER,	//11
N	SHUTTER_LOWER,	//12
N};
N
N//********************************************************************************************
N// Operating mode
N#define SSP_FIFOSIZE			8
N#define POLL_RATE_BTN			10
N#define POLL_Z_WHEEL			3
N//#define ENABLE_BURST_DAT_REPORT	// Custom EP1 USB size
N//#define SPI_BURST_ENABLE		// run on spi burst mode
N//#define UGS2_VERSION1			// for first customer/version compliance, 
N#define RUN_ALL_SROM			// 30/12/2014 Dennis:
N								// for first customer/version compliance, 
N								// enable it to run without checking SROM ID
N								// So that user can dump the right SROM later from
N								// other source. Keeping one source firmware which work
N								// for all is better.
N#define SOFT_RESET			    // Using Soft reset power up
N//#define INVERTED				// For older mouse
N//********************************************************************************************
N
N
N//********************************************************************************************
N// Custom EP1 USB size
N#define STANDARD_MOUSE_DAT_SIZE	0x0006	//6 bytes. 1byte: button. 4 bytes:XY16bits 1bytes:Zwheel
N
N#ifdef	ENABLE_BURST_DAT_REPORT
S	#define BURST_DATA_SIZE		0x000C	// Refers to Datasheets on
S	#define EP1_MAX_SIZE		(STANDARD_MOUSE_DAT_SIZE + BURST_DATA_SIZE)
S//	#define USB_PACKET_SIZE		12
N#else
N	#define EP1_MAX_SIZE		STANDARD_MOUSE_DAT_SIZE
N#endif
N//********************************************************************************************
N
N
N//********************************************************************************************
N// Reference Mouse Information for usbcore.c
N//
N// Reference Mouse Default Value
N#define	MOUSE_INFO									0x01
N#define	MOUSE_EVENT_CTRL						0x7f	 
N//#define	MOUSE_FIRMWARE_major 			0x03
N//#define	MOUSE_FIRMWARE_minor 			0x01
N#define	MOUSE_FIRMWARE_major 				0x00
N#define	MOUSE_FIRMWARE_minor 				0x01			//revision 0.1
N#define REFERENCE_MOUSE							0xFF			
N
N
N										// Dennis Updates: 11/08/2014
N										// removed unused code on usbcore.c
N										// added new cpi value
N										// removed some test codes which is useless for today
N										// Updated some macro
N										// rearrange pixart_sensor.h macros
N										// removed bit_x macro, use default bitx
N										// motion_flag -> mouse_event_ctrl
N										// added "BUSY_RW", which I think quite useless..anyhow.
N 										// added #define UGS2_VERSION1 for old code
N										// updated srom.c
N										// clean up usbdesc.c
N// switch cases 
N#define REF_MOUSE_INFO_ADDR											0x00
N#define REF_MOUSE_EVENT_CTRL_ADDR								0x03
N//#define REF_MOUSE_FIRMWARE_MAJOR_ADDR					0x06
N//#define REF_MOUSE_FIRMWARE_MINOR_ADDR					0x07
N#define REF_MOUSE_FIRMWARE_MAJOR_ADDR						0x41
N#define REF_MOUSE_FIRMWARE_MINOR_ADDR						0x42
N#define REF_MOUSE_LED_SW_ADDR										0x08
N#define REF_MOUSE_NCS														0x09
N#define REF_MOUSE_SPI_BURST_FRAME_CAPTURE				0x0A
N#define REF_MOUSE_SPI_BURST_FRAME_CAPTURE_READ	0x0B
N#define REF_MOUSE_SROM_LOAD_CTRL_ADDR						0xFB
N#define REF_MOUSE_RECOGNITION_ADDR							0x47
N#define REF_MOUSE_SROM_WRITE_ADDR								0xFF
N//********************************************************************************************
N
N//********************************************************************************************
N// TCL USER - USB Commands & Control
N#define TCL_CONTROL_0_READ		0xC0
N#define TCL_CONTROL_0_WRITE		0x40
N//********************************************************************************************
N
N//********************************************************************************************
N// SROM flash
N#define START_OF_FLASH_SECTOR	0x00006000UL
N#define END_OF_FLASH_SECTOR		0x00007000UL
N#define BUSY_RW					0x00
N#define FREE					0xAA
N#define READY_TO_FLASH			1
N#define INIT_TCL_FLASH			1
N#define TCL_END_FLASH			2  
N#define REBOOT					4
N#define SROM_ID					SROM[1]
N#define SROMSIZE				sromTableSize	// from srom.c
N#define SROM_BUFFER_SIZE 		256				// RAM bytes allocation flash purpose
N//********************************************************************************************
N#define FRAME_CAPTURE_SIZE		1296
N//********************************************************************************************
N// Sensor motion monitor
N#define ENABLE_MOTION_BIT			BIT0	// If this is 0 turn off motion
N#define ENABLE_BUTTON_SCROLL_BIT	BIT1	// If this is 0 turn off all buttons and scroll
N#define ENABLE_ALWAYS_POLL_BIT		BIT2	// for burst_mode, always poll
N#define ENABLE_NON_BURST_MODE_BIT	BIT3	// enable non burst mode.
N#define ENABLE						1
N#define DISABLE						0
N#define ARR_SIZE					6		// 16 bytes
N#define ESD_POLL_TIME				3000	// 3000ms
N#define SROM_RUN_BIT				BIT6	// observation bit check
N#define MOTION_BIT					BIT7	// Motion bit check
N#define LIFT_BIT					BIT3	// Lift bit check
N
N//********************************************************************************************
N
N//********************************************************************************************
N// DELAYS SPI
N#define TMOT_RST				60 		// 6x1000 = 60ms
N#define TSRAD_MOTBR				35		// 35us
N#define TNCS_SCLK				1 		// 120ns, but 1us min
N#define TSCLK_NCS				1
N#define TSRR					20 		// 20us
N#define TSRAD					10
N//********************************************************************************************
N
N//********************************************************************************************
N// SROM_ID
N#define SROM_ID					SROM[1]
N#define SROMSIZE				sromTableSize
N//Register Address
N#define PRODUCT_ID_REG			0x00
N#define	PRODUCT_REV_REG			0x01
N#define MOTION_REG				0x02	
N#define DELTA_X_L_REG			0x03
N#define DELTA_X_H_REG			0x04
N#define DELTA_Y_L_REG			0x05
N#define DELTA_Y_H_REG			0x06
N#define CONFIG2_REG				0x10
N#define SROM_ENABLE_REG			0x13
N#define OBSERVATION_REG			0x24
N#define SROM_ID_REG				0x2a
N#define POWER_RESET_REG			0x3a
N#define SROM_LOAD_BURST_REG		0x62
N//********************************************************************************************
N#define CHECK_MOTION_PIN()		nsAPI_GPIO_GetPinValue(PORT1,BIT31)
N#define NCS_HIGH()				NDrv_GPIO_SetBitValue(PORT0,2,HIGH) 
N#define NCS_LOW()				NDrv_GPIO_SetBitValue(PORT0,2,LOW)
N#define IS_BIT_SET(REG,MASK)   	((REG & MASK)==MASK)
N//********************************************************************************************
N
N//********************************************************************************************
N// UGS 2 Mouse button configuration.
N#define LEFT_CLICKED			BIT0
N#define RIGHT_CLICKED			BIT1
N#define MID_CLICKED				BIT2
N#define CPI_P_CLICKED			BIT3
N#define CPI_M_CLICKED			BIT4
N#define BUTTON_RIGHT			BIT15// Port1
N#define BUTTON_MID				BIT17// Port0
N#define BUTTON_LEFT				BIT18// Port0
N#define BUTTON_CPI_P			BIT19// Port0
N#define BUTTON_CPI_M			BIT16// Port1
N// UGS 2 Mouse mask button configuration 
N#define BUTTON_MASK				(BIT31|BIT28|BIT27|BIT26|BIT25)
N#define BUTTON_MASK_0			(BIT19|BIT18|BIT17)
N#define BUTTON_MASK_1			(BIT16|BIT15)
N// Z wheel configuration
N#define ZB_WHEEL 				BIT7		// Port0_7
N#define ZA_WHEEL 				BIT28		// Port1_28
N
N// SW1 & SW2 LED UGS2 ROW
N//#define TURN_ON_20R_SW1_LED(MASK) NDrv_GPIO_SetBitValue(PORT0,14,MASK)// Sensor's LED1_P SW2
N//#define TURN_ON_39R_SW2_LED(MASK) NDrv_GPIO_SetBitValue(PORT0,13,MASK)// Sensor's LED1_P SW1
N#define TURN_ON_20R_SW1_LED(MASK) NDrv_GPIO_SetBitValue(PORT0,13,MASK)// GY@03June2016 Connect to correct pin 13
N#define TURN_ON_39R_SW2_LED(MASK) NDrv_GPIO_SetBitValue(PORT0,14,MASK)// GY@03June2016 Connect to correct pin 14
N//********************************************************************************************
N
N//********************************************************************************************
N// CPI value in decimal
N#define CPI_CLICK_DURATION		200	   // 15/10/2014 
N
N#define CPI_LO_0			0x0F		  // 800CPI
N#define CPI_LO_1			0x13		  // 1000CPI
N#define CPI_LO_2			0x3C		  // 3000CPI(default)
N#define CPI_LO_3			0x64		  // 5000CPI
N#define CPI_LO_4			0x91		  // 7200CPI
N#define CPI_LO_5			0xCA		  // 10000CPI
N#define CPI_LO_6			0xA1		  // 16000CPI			//w 4d 90
N#define CPI_LO_7			0xBF		  // 19000CPI			//w 4d 90
N
N// cpi_HI not in used for 337
N#define CPI_HI_0			0x00		  // 800CPI
N#define CPI_HI_1			0x00		  // 1000CPI
N#define CPI_HI_2			0x00		  // 3000CPI(default)
N#define CPI_HI_3			0x00		  // 5000CPI
N#define CPI_HI_4			0x00		  // 7200CPI
N#define CPI_HI_5			0x00		  // 10000CPI
N#define CPI_HI_6			0x00		  // 16000CPI
N#define CPI_HI_7			0x01		  // 19000CPI
N
N//********************************************************************************************
N
N//********************************************************************************************
N//Extern variable
Nextern U8	mouse_event_ctrl;//motion_flag;
Nextern U8	flagOne;
Nextern U8	u8motion,u8Squal,u8PixelSum;
Nextern u16	u16Pixel,u16Shutter;
Nextern s16	s16accuX, s16accuY, report1ms_data_x, report1ms_data_y;;
Nextern U16	poll_tick_btn, poll_usb, poll_id,poll_z_wheel,glitch_prevention, cpi_clicked_flag, poll_motion;
Nextern U8 cpi_p_Cntr, cpi_m_Cntr;
Nextern S8 count_z;
Nextern U16 poll_counter;
N//********************************************************************************************
N
N//********************************************************************************************
N//Extern function prototype
Nextern void nsAPI_SSP_Delay1us(U16 u16DelayTime);
Nextern RetU8 nsAPI_SSP_Sensor_Read(U8 u8Adr);
Nextern void nsAPI_SSP_Sensor_Write(U8 u8Adr,U8 u8Com);
Nextern void nsAPI_SSP_Sensor_LoadSROM(void);
Nextern void nsAPI_Sensor_Hard_Reset(void);
Nextern void nsAPI_SSP_Sensor_Init(void);
Nextern void nsAPI_SSP_Sensor_Monitor(void);
Nextern RetU8 nsAPI_MouseScanButton(void);
Nextern void Z_Wheel(void);
N//********************************************************************************************
N
N
L 25 "Src\gpio.c" 2
N
N/*****************************************************************************
N** Function name:		FLEX_INT0_IRQHandler
N**
N** Descriptions:		Use one GPIO pin as interrupt source
N**
N** parameters:			None
N**
N** Returned value:		None
N**
N*****************************************************************************/
Nvoid FLEX_INT0_IRQHandler(void)
N{
N	while(1){}
N}
N
N/*****************************************************************************
N** Function name:		FLEX_INT1_IRQHandler
N**
N** Descriptions:		Use one GPIO pin as interrupt source
N**
N** parameters:			None
N**
N** Returned value:		None
N**
N*****************************************************************************/
Nvoid FLEX_INT1_IRQHandler(void)
N{
N	while(1){}
N}
N
N/*****************************************************************************
N** Function name:		FLEX_INT2_IRQHandler
N**
N** Descriptions:		Use one GPIO pin as interrupt source
N**
N** parameters:			None
N**
N** Returned value:		None
N**
N*****************************************************************************/
Nvoid FLEX_INT2_IRQHandler(void)
N{
N	while(1){}
N}
N
N/*****************************************************************************
N** Function name:		FLEX_INT3_IRQHandler
N**
N** Descriptions:		Use one GPIO pin as interrupt source
N**
N** parameters:			None
N**
N** Returned value:		None
N**
N*****************************************************************************/
Nvoid FLEX_INT3_IRQHandler(void)
N{
N	while(1){}
N}
N
N/*****************************************************************************
N** Function name:		FLEX_INT4_IRQHandler
N**
N** Descriptions:		Use one GPIO pin as interrupt source
N**
N** parameters:			None
N**
N** Returned value:		None
N**
N*****************************************************************************/
Nvoid FLEX_INT4_IRQHandler(void)
N{
N	while(1){}
N}
N
N/*****************************************************************************
N** Function name:		FLEX_INT5_IRQHandler
N**
N** Descriptions:		Use one GPIO pin as interrupt source
N**
N** parameters:			None
N**
N** Returned value:		None
N**
N*****************************************************************************/
Nvoid FLEX_INT5_IRQHandler(void)
N{
N	while(1){}
N}
N
N/*****************************************************************************
N** Function name:		FLEX_INT6_IRQHandler
N**
N** Descriptions:		Use one GPIO pin as interrupt source
N**
N** parameters:			None
N**
N** Returned value:		None
N**
N*****************************************************************************/
Nvoid FLEX_INT6_IRQHandler(void)
N{
N	while(1){}
N}
N
N/*****************************************************************************
N** Function name:		FLEX_INT7_IRQHandler
N**
N** Descriptions:		Use one GPIO pin as interrupt source
N**
N** parameters:			None
N**
N** Returned value:		None
N**
N*****************************************************************************/
Nvoid FLEX_INT7_IRQHandler(void)
N{
N	while(1){}
N}
N
N/*****************************************************************************
N** Function name:		GINT0_IRQHandler
N**
N** Descriptions:		Use one GPIO pin as interrupt source
N**
N** parameters:			None
N**
N** Returned value:		None
N**
N*****************************************************************************/
Nvoid GINT0_IRQHandler(void)
N{
N
N/*
N    // Falling edge detected
N    if (LPC_GPIO_PIN_INT->FALL & (1 << 0))
N    {
N        // Clear interrupt
N        LPC_GPIO_PIN_INT->FALL = (1 << 0);
N    }
N
N    // Rising edge detected
N    if (LPC_GPIO_PIN_INT->RISE & (1 << 0))
N    {
N        // Clear interrupt
N        LPC_GPIO_PIN_INT->RISE = (1 << 0);
N
N    }
N	*/
N}
N
N/*****************************************************************************
N** Function name:		GINT1_IRQHandler
N**
N** Descriptions:		Use one GPIO pin as interrupt source
N**
N** parameters:			None
N**
N** Returned value:		None
N**
N*****************************************************************************/
Nvoid GINT1_IRQHandler(void)
N{
N	//while(1){}
N}
N
N/*****************************************************************************
N** Function name:		nsAPI_GPIO_Init
N**
N** Descriptions:		Initialize GPIO, install the
N**						GPIO interrupt handler
N**
N** parameters:			None
N**
N** Returned value:		true or false, return false if the VIC table
N**						is full and GPIO interrupt handler can be
N**						installed.
N**
N*****************************************************************************/
Nvoid nsAPI_GPIO_Init( void )
N{
N    g_GpioButtonEvent.ButtonEvent = 0;
N    g_GpioButtonEvent.ButtonEventCount = 0;
N    g_GpioButtonEvent.PreButtonEvent = 0;
N    g_GpioButtonEvent.ButtonStatus = GPIO_SCANKEY_NULL;
X    g_GpioButtonEvent.ButtonStatus = 0;
N    g_GpioButtonEvent.KeycodeTblIdx = 0;
N    g_GpioButtonEvent.PreQIEStatus = QIE_STOP;
N
N    // Enable AHB clock to the GPIO domain.
N    LPC_SYSCON->SYSAHBCLKCTRL |= BIT6;
X    ((LPC_SYSCON_Type *) (0x40048000))->SYSAHBCLKCTRL |= (1 << 6);
N
N    // Enable AHB clock to the FlexInt, GroupedInt domain.
N    LPC_SYSCON->SYSAHBCLKCTRL |= (BIT19| BIT23| BIT24);
X    ((LPC_SYSCON_Type *) (0x40048000))->SYSAHBCLKCTRL |= ((1 << 19)| (1 << 23)| (1 << 24));
N
N	//Dennis: defining the SWD
N	LPC_IOCON->SWDIO_PIO0_15 = 0x00000090;
X	((LPC_IOCON_Type *) (0x40044000))->SWDIO_PIO0_15 = 0x00000090;
N	LPC_IOCON->SWCLK_PIO0_10 = 0x00000090;
X	((LPC_IOCON_Type *) (0x40044000))->SWCLK_PIO0_10 = 0x00000090;
N
N // UGS2 real hardware
N//**************************************
N// Project UGS 2
N// USED GPIO
N// UGS 2
N// DLED 1  PORT 0 _20
N// DLED 2  Port 1 _26
N// DLED 3  Port 1 _27
N// ZB Port 0 _7
N// ZA Port 1 _28
N// MOTION Port 1_31
N// SN_RESET Pin Port 1_21
N// SW3 Port 0 _11
N// SW2 Port 0 _12
N// SW1 Port 0 _13
N// N_OE1 Port 1 _14
N// DIR1 Port 0 _23
N// BUTTON_RIGHT PIO1_15
N// BUTTON_MID PIO0_17
N// BUTTON_LEFT PIO0_18
N// BUTTON_CPI_P PIO0_19
N// BUTTON_CPI_M PIO1_16
N//**************************************
N
N//  EXT_CLK  PORT 0 _14
N//	LPC_IOCON->PIO0_14 &= ~0x07;
N//  LPC_IOCON->PIO0_14 |= BIT4;
N//  NDrv_GPIO_SetDir(PORT0,14,GPIOIN);
N
N	// ZB Port 0 _7
N	LPC_IOCON->PIO0_7 &= ~0x07;
X	((LPC_IOCON_Type *) (0x40044000))->PIO0_7 &= ~0x07;
N    LPC_IOCON->PIO0_7 |= BIT4;
X    ((LPC_IOCON_Type *) (0x40044000))->PIO0_7 |= (1 << 4);
N    NDrv_GPIO_SetDir(PORT0,7,GPIOIN);
X    NDrv_GPIO_SetDir(0,7,0);
N
N	// ZA Port 1 _28
N	LPC_IOCON->PIO1_28 &= ~0x07;
X	((LPC_IOCON_Type *) (0x40044000))->PIO1_28 &= ~0x07;
N    LPC_IOCON->PIO1_28 |= BIT4;
X    ((LPC_IOCON_Type *) (0x40044000))->PIO1_28 |= (1 << 4);
N    NDrv_GPIO_SetDir(PORT1,28,GPIOIN);
X    NDrv_GPIO_SetDir(1,28,0);
N
N	// MISO  PORT 0 _8
N	LPC_IOCON->PIO0_8 &= ~0x07;
X	((LPC_IOCON_Type *) (0x40044000))->PIO0_8 &= ~0x07;
N   // LPC_IOCON->PIO0_8 |= BIT4;
N    NDrv_GPIO_SetDir(PORT0,8,GPIOIN);
X    NDrv_GPIO_SetDir(0,8,0);
N
N	// DLED 1  PORT 0 _20
N	LPC_IOCON->PIO0_20 &= ~0x07;
X	((LPC_IOCON_Type *) (0x40044000))->PIO0_20 &= ~0x07;
N    LPC_IOCON->PIO0_20 |= BIT4;
X    ((LPC_IOCON_Type *) (0x40044000))->PIO0_20 |= (1 << 4);
N    NDrv_GPIO_SetDir(PORT0,20,GPIOOUT);
X    NDrv_GPIO_SetDir(0,20,1);
N
N	// DLED 2  Port 1 _26
N	LPC_IOCON->PIO1_26 &= ~0x07;
X	((LPC_IOCON_Type *) (0x40044000))->PIO1_26 &= ~0x07;
N    LPC_IOCON->PIO1_26 |= BIT4;
X    ((LPC_IOCON_Type *) (0x40044000))->PIO1_26 |= (1 << 4);
N    NDrv_GPIO_SetDir(PORT1,26,GPIOOUT);
X    NDrv_GPIO_SetDir(1,26,1);
N
N	// DLED 3  Port 1 _27
N	LPC_IOCON->PIO1_27 &= ~0x07;
X	((LPC_IOCON_Type *) (0x40044000))->PIO1_27 &= ~0x07;
N    LPC_IOCON->PIO1_27 |= BIT4;
X    ((LPC_IOCON_Type *) (0x40044000))->PIO1_27 |= (1 << 4);
N    NDrv_GPIO_SetDir(PORT1,27,GPIOOUT);
X    NDrv_GPIO_SetDir(1,27,1);
N
N	// MOTION Port 1_31 
N	LPC_IOCON->PIO1_31 &= ~0x07;
X	((LPC_IOCON_Type *) (0x40044000))->PIO1_31 &= ~0x07;
N    LPC_IOCON->PIO1_31 |= BIT4;
X    ((LPC_IOCON_Type *) (0x40044000))->PIO1_31 |= (1 << 4);
N    NDrv_GPIO_SetDir(PORT1,31,GPIOIN);
X    NDrv_GPIO_SetDir(1,31,0);
N
N	// SN_RESET Pin Port 1_21 
N	LPC_IOCON->PIO1_21 &= ~0x07;
X	((LPC_IOCON_Type *) (0x40044000))->PIO1_21 &= ~0x07;
N    LPC_IOCON->PIO1_21 |= BIT4;
X    ((LPC_IOCON_Type *) (0x40044000))->PIO1_21 |= (1 << 4);
N    NDrv_GPIO_SetDir(PORT1,21,GPIOOUT);
X    NDrv_GPIO_SetDir(1,21,1);
N
N	// SW3 Port 0 _11
N	LPC_IOCON->TDI_PIO0_11 &= ~0x07;
X	((LPC_IOCON_Type *) (0x40044000))->TDI_PIO0_11 &= ~0x07;
N    LPC_IOCON->TDI_PIO0_11 |= BIT4;
X    ((LPC_IOCON_Type *) (0x40044000))->TDI_PIO0_11 |= (1 << 4);
N    NDrv_GPIO_SetDir(PORT0,11,GPIOOUT);
X    NDrv_GPIO_SetDir(0,11,1);
N					
N	// SW2 Port 0 _14
N	LPC_IOCON->TRST_PIO0_14 &= ~0x07;
X	((LPC_IOCON_Type *) (0x40044000))->TRST_PIO0_14 &= ~0x07;
N    LPC_IOCON->TRST_PIO0_14 |= BIT4;
X    ((LPC_IOCON_Type *) (0x40044000))->TRST_PIO0_14 |= (1 << 4);
N    NDrv_GPIO_SetDir(PORT0,14,GPIOOUT);
X    NDrv_GPIO_SetDir(0,14,1);
N
N	// SW1 Port 0 _13
N	LPC_IOCON->TDO_PIO0_13 &= ~0x07;
X	((LPC_IOCON_Type *) (0x40044000))->TDO_PIO0_13 &= ~0x07;
N    LPC_IOCON->TDO_PIO0_13 |= BIT4;
X    ((LPC_IOCON_Type *) (0x40044000))->TDO_PIO0_13 |= (1 << 4);
N    NDrv_GPIO_SetDir(PORT0,13,GPIOOUT);
X    NDrv_GPIO_SetDir(0,13,1);
N
N    LPC_IOCON->TDI_PIO0_11 = 0x00000091;     // binary: 00000000_00000000_00000000_10010001 
X    ((LPC_IOCON_Type *) (0x40044000))->TDI_PIO0_11 = 0x00000091;     
N    LPC_IOCON->TMS_PIO0_12 = 0x00000091;     // binary: 00000000_00000000_00000000_10010001 
X    ((LPC_IOCON_Type *) (0x40044000))->TMS_PIO0_12 = 0x00000091;     
N    LPC_IOCON->TDO_PIO0_13 = 0x00000091;     // binary: 00000000_00000000_00000000_10010001 
X    ((LPC_IOCON_Type *) (0x40044000))->TDO_PIO0_13 = 0x00000091;     
N	LPC_IOCON->TRST_PIO0_14 = 0x00000091;
X	((LPC_IOCON_Type *) (0x40044000))->TRST_PIO0_14 = 0x00000091;
N	
N	// N_OE1 Port 1 _14
N	LPC_IOCON->PIO1_14 &= ~0x07;
X	((LPC_IOCON_Type *) (0x40044000))->PIO1_14 &= ~0x07;
N    LPC_IOCON->PIO1_14 |= BIT4;
X    ((LPC_IOCON_Type *) (0x40044000))->PIO1_14 |= (1 << 4);
N    NDrv_GPIO_SetDir(PORT1,14,GPIOOUT);
X    NDrv_GPIO_SetDir(1,14,1);
N
N	// DIR1 Port 0 _23
N//	LPC_IOCON->PIO0_23 &= ~0x07;
N//  LPC_IOCON->PIO0_23 |= BIT4;
N//  NDrv_GPIO_SetDir(PORT0,23,GPIOOUT);
N
N	// BUTTON_RIGHT PIO1_15
N	LPC_IOCON->PIO1_15 &= ~0x07;
X	((LPC_IOCON_Type *) (0x40044000))->PIO1_15 &= ~0x07;
N    LPC_IOCON->PIO1_15 |= BIT4;
X    ((LPC_IOCON_Type *) (0x40044000))->PIO1_15 |= (1 << 4);
N    NDrv_GPIO_SetDir(PORT1,15,GPIOIN);
X    NDrv_GPIO_SetDir(1,15,0);
N
N	// BUTTON_MID PIO0_17
N	LPC_IOCON->PIO0_17 &= ~0x07;
X	((LPC_IOCON_Type *) (0x40044000))->PIO0_17 &= ~0x07;
N    LPC_IOCON->PIO0_17 |= BIT4;
X    ((LPC_IOCON_Type *) (0x40044000))->PIO0_17 |= (1 << 4);
N    NDrv_GPIO_SetDir(PORT0,17,GPIOIN);
X    NDrv_GPIO_SetDir(0,17,0);
N
N	// BUTTON_LEFT PIO0_18
N	LPC_IOCON->PIO0_18 &= ~0x07;
X	((LPC_IOCON_Type *) (0x40044000))->PIO0_18 &= ~0x07;
N    LPC_IOCON->PIO0_18 |= BIT4;
X    ((LPC_IOCON_Type *) (0x40044000))->PIO0_18 |= (1 << 4);
N    NDrv_GPIO_SetDir(PORT0,18,GPIOIN);
X    NDrv_GPIO_SetDir(0,18,0);
N
N	// BUTTON_CPI_P PIO0_19
N	LPC_IOCON->PIO0_19 &= ~0x07;
X	((LPC_IOCON_Type *) (0x40044000))->PIO0_19 &= ~0x07;
N    LPC_IOCON->PIO0_19 |= BIT4;
X    ((LPC_IOCON_Type *) (0x40044000))->PIO0_19 |= (1 << 4);
N    NDrv_GPIO_SetDir(PORT0,19,GPIOIN);
X    NDrv_GPIO_SetDir(0,19,0);
N
N	// BUTTON_CPI_M PIO1_16
N	LPC_IOCON->PIO1_16 &= ~0x07;
X	((LPC_IOCON_Type *) (0x40044000))->PIO1_16 &= ~0x07;
N    LPC_IOCON->PIO1_16 |= BIT4;
X    ((LPC_IOCON_Type *) (0x40044000))->PIO1_16 |= (1 << 4);
N    NDrv_GPIO_SetDir(PORT1,16,GPIOIN);
X    NDrv_GPIO_SetDir(1,16,0);
N
N	// NCS SPI PIO0_2
N	LPC_IOCON->PIO0_2 &= ~0x07;
X	((LPC_IOCON_Type *) (0x40044000))->PIO0_2 &= ~0x07;
N	LPC_IOCON->PIO0_2 |= BIT4;
X	((LPC_IOCON_Type *) (0x40044000))->PIO0_2 |= (1 << 4);
N	NDrv_GPIO_SetDir(PORT0,2,GPIOOUT);
X	NDrv_GPIO_SetDir(0,2,1);
N}
N
N/*****************************************************************************
N** Function name:		NDrv_GPIO_SetBitValue
N**
N** Descriptions:		Set/clear a bit in a specific position
N**
N** parameters:			port num, bit position, bit value
N**
N** Returned value:		None
N**
N*****************************************************************************/
Nvoid NDrv_GPIO_SetBitValue( U32 portNum, U32 bitPosi, U32 bitVal )
N{
N	if(bitVal)
N	LPC_GPIO->SET[portNum] = 1 << bitPosi;
X	((LPC_GPIO_Type *) (0x50000000))->SET[portNum] = 1 << bitPosi;
N	else
N	LPC_GPIO->CLR[portNum] = 1 << bitPosi;
X	((LPC_GPIO_Type *) (0x50000000))->CLR[portNum] = 1 << bitPosi;
N}
N
N/*****************************************************************************
N** Function name:		GPIOGetPinValue
N**
N** Descriptions:		Read Current state of port pin, PIN register value
N**
N** parameters:			port num, bit position
N** Returned value:		None
N**
N*****************************************************************************/
NRetU32 nsAPI_GPIO_GetPinValue( U8 portNum, U32 bitPosi )
N{
N	U32 regVal = 0;
N	
N	if(bitPosi == 0xFF)
N	{
N		regVal = LPC_GPIO->PIN[portNum];
X		regVal = ((LPC_GPIO_Type *) (0x50000000))->PIN[portNum];
N	}
N	else
N	{
N		if(LPC_GPIO->PIN[portNum] &  bitPosi)
X		if(((LPC_GPIO_Type *) (0x50000000))->PIN[portNum] &  bitPosi)
N			regVal = 1;
N	}
N
N	return (regVal);
N}
N
N/*****************************************************************************
N** Function name:		NDrv_GPIO_SetDir
N**
N** Descriptions:		Set the direction in GPIO port
N**
N** parameters:			portNum, bit position, direction (1 out, 0 input)
N**
N** Returned value:		None
N**
N*****************************************************************************/
Nvoid NDrv_GPIO_SetDir(U32 portNum, U32 bitPosi, U32 dir )
N{
N	if(dir)
N	LPC_GPIO->DIR[portNum] |= (1 << bitPosi);
X	((LPC_GPIO_Type *) (0x50000000))->DIR[portNum] |= (1 << bitPosi);
N	else
N	LPC_GPIO->DIR[portNum] &= ~(1 << bitPosi);
X	((LPC_GPIO_Type *) (0x50000000))->DIR[portNum] &= ~(1 << bitPosi);
N}
N
Nvoid nsAPI_GPIO_LEDSetting(U8 uPort, U32 uPosition, U8 uValue)
N{
N	NDrv_GPIO_SetBitValue(uPort,uPosition,uValue);
N}
N
NRetU8 nsAPI_GPIO_ScanButton(void)
N{
N	U8 Ret				= FALSE;
X	U8 Ret				= (0);
N	U32 u32ButtonGPIO1	= 0;
N	u32ButtonGPIO1  	= nsAPI_GPIO_GetPinValue(PORT1,0xFF);
X	u32ButtonGPIO1  	= nsAPI_GPIO_GetPinValue(1,0xFF);
N	u32ButtonGPIO1		&= GPIO1_PR;
X	u32ButtonGPIO1		&= ((1UL << 31)|(1 << 28)|(1 << 27)|(1 << 26)|(1 << 25));
N
N	if( (u32ButtonGPIO1 != GPIO1_PR))
X	if( (u32ButtonGPIO1 != ((1UL << 31)|(1 << 28)|(1 << 27)|(1 << 26)|(1 << 25))))
N	{ 	
N		if( g_GpioButtonEvent.ButtonStatus != GPIO_SCANKEY_PR )
X		if( g_GpioButtonEvent.ButtonStatus != (1 << 0) )
N		{
N			if(!(u32ButtonGPIO1 & BIT13))
X			if(!(u32ButtonGPIO1 & (1 << 13)))
N				g_GpioButtonEvent.ButtonEvent = BIT0;
X				g_GpioButtonEvent.ButtonEvent = (1 << 0);
N			else if(!(u32ButtonGPIO1 & BIT14))
X			else if(!(u32ButtonGPIO1 & (1 << 14)))
N				g_GpioButtonEvent.ButtonEvent = BIT1;
X				g_GpioButtonEvent.ButtonEvent = (1 << 1);
N			else if(!(u32ButtonGPIO1 & BIT15))
X			else if(!(u32ButtonGPIO1 & (1 << 15)))
N				g_GpioButtonEvent.ButtonEvent = BIT2;
X				g_GpioButtonEvent.ButtonEvent = (1 << 2);
N			else if(!(u32ButtonGPIO1 & BIT19))
X			else if(!(u32ButtonGPIO1 & (1 << 19)))
N				g_GpioButtonEvent.ButtonEvent = BIT3;
X				g_GpioButtonEvent.ButtonEvent = (1 << 3);
N			else if(!(u32ButtonGPIO1 & BIT20))
X			else if(!(u32ButtonGPIO1 & (1 << 20)))
N				g_GpioButtonEvent.ButtonEvent = BIT4;
X				g_GpioButtonEvent.ButtonEvent = (1 << 4);
N			else
N			{
N				g_GpioButtonEvent.ButtonEvent = 0;
N				g_Main_Setting.MouseEvent &= ~MAIN_FLAG_MOUSE_BUTTON_EVENT;
X				g_Main_Setting.MouseEvent &= ~(1 << 1);
N			}
N
N			if( g_GpioButtonEvent.ButtonEvent > 0 )
N				Ret = TRUE;
X				Ret = (1);
N		}
N	}
N	else
N	{
N		if( g_GpioButtonEvent.ButtonStatus == GPIO_SCANKEY_PR )
X		if( g_GpioButtonEvent.ButtonStatus == (1 << 0) )
N		{			
N			g_GpioButtonEvent.ButtonEvent = 0;
N		}
N	}
N	return Ret;
N}
N
Nvoid nsAPI_GPIO_MouseButtonMonitor(void)
N{
N	static U16 temp_prev = 0;
N	static U8 same_event_counter = 0;
N	
N	if(nsAPI_MouseScanButton())	 
N	{
N		
N		if( g_GpioButtonEvent.PreButtonEvent != g_GpioButtonEvent.ButtonEvent )
N		{
N			if(temp_prev != g_GpioButtonEvent.ButtonEvent)
N				same_event_counter = 0;
N			else 
N				same_event_counter++;
N
N			temp_prev = g_GpioButtonEvent.ButtonEvent;
N
N			if(same_event_counter>2)
N			{
N				g_GpioButtonEvent.PreButtonEvent	= g_GpioButtonEvent.ButtonEvent;
N				g_GpioButtonEvent.ButtonStatus		= GPIO_SCANKEY_PR;
X				g_GpioButtonEvent.ButtonStatus		= (1 << 0);
N				g_Main_Setting.MouseEvent		   |= MAIN_FLAG_MOUSE_BUTTON_EVENT;
X				g_Main_Setting.MouseEvent		   |= (1 << 1);
N				same_event_counter = 0;
N
N				switch( g_GpioButtonEvent.PreButtonEvent )
N				{
N					case BIT0:
X					case (1 << 0):
N					case BIT1: 
X					case (1 << 1): 
N					case BIT2:
X					case (1 << 2):
N					case BIT3:
X					case (1 << 3):
N					case BIT4:
X					case (1 << 4):
N					g_GpioButtonEvent.KeycodeTblIdx = nsAPI_GPIO_ChangingIndex(g_GpioButtonEvent.PreButtonEvent);
N					nsAPI_Main_GetInMouseButtonReport(	&g_GpioButtonEvent.PreButtonEvent,
N														&g_GpioButtonEvent.ButtonStatus,
N														&g_GpioButtonEvent.KeycodeTblIdx);
N					break;
N	
N					default:
N					break;
N				}
N			}
N		}
N		else
N			same_event_counter = 0;
N	}
N	else
N	{
N		if(g_GpioButtonEvent.PreButtonEvent != g_GpioButtonEvent.ButtonEvent)
N		{
N			g_GpioButtonEvent.ButtonStatus 		= GPIO_SCANKEY_RELEASE;
X			g_GpioButtonEvent.ButtonStatus 		= (1 << 2);
N			g_Main_Setting.MouseEvent		   &= ~MAIN_FLAG_MOUSE_BUTTON_EVENT;
X			g_Main_Setting.MouseEvent		   &= ~(1 << 1);
N			g_GpioButtonEvent.PreButtonEvent 	= g_GpioButtonEvent.ButtonEvent;
N			g_GpioButtonEvent.ButtonEventCount	= 0;
N			g_GpioButtonEvent.KeycodeTblIdx     = g_GpioButtonEvent.PreButtonEvent;
N			nsAPI_Main_GetInMouseButtonReport(	 &g_GpioButtonEvent.PreButtonEvent,
N												 &g_GpioButtonEvent.ButtonStatus,
N												 &g_GpioButtonEvent.KeycodeTblIdx);
N		}
N	}
N}
N
N
NRetU16 nsAPI_GPIO_ChangingIndex(U16 u16Index)
N{
N    U16 u16Ret;
N
N	switch(u16Index)
N	{
N		case BIT0: u16Ret = 0x01;break; //LEFT BUTTON
X		case (1 << 0): u16Ret = 0x01;break; 
N		case BIT1: u16Ret = 0x02;break;	//RIGHT BUTTON
X		case (1 << 1): u16Ret = 0x02;break;	
N		case BIT2: u16Ret = 0x04;break; //MIDDLE BUTTON
X		case (1 << 2): u16Ret = 0x04;break; 
N		case BIT3: u16Ret = 0x08;break; //LEFT BUTTON
X		case (1 << 3): u16Ret = 0x08;break; 
N		case BIT4: u16Ret = 0x10;break; //RIGHT BUTTON
X		case (1 << 4): u16Ret = 0x10;break; 
N		default:
N		u16Ret = 0x00;					//No Press;
N		break;
N	}
N	return u16Ret;
N}
N
NU8 nsAPI_GPIO_Get_QIE(void)
N{
N	U8 u8Ret = QIE_SAME;
N	U32 u32Temp;
N
N	u32Temp = nsAPI_GPIO_GetPinValue(PORT1,0xFF);
X	u32Temp = nsAPI_GPIO_GetPinValue(1,0xFF);
N	u32Temp = ((u32Temp & (BIT22|BIT21)) >> 21) & 0x03;
X	u32Temp = ((u32Temp & ((1 << 22)|(1 << 21))) >> 21) & 0x03;
N
N	if(g_GpioButtonEvent.PreQIEStatus != u32Temp)
N	{
N		switch(g_GpioButtonEvent.PreQIEStatus)
N		{
N			case 0x00:
N			switch(u32Temp)
N			{
N				case 0x00: u8Ret = QIE_STOP;
N				g_GpioButtonEvent.PreQIEStatus = u32Temp;
N				break;
N
N				case 0x01: u8Ret = QIE_FORWARD;
N				g_GpioButtonEvent.PreQIEStatus = u32Temp;
N				break;
N				case 0x02: u8Ret = QIE_BACKWARD;
N				g_GpioButtonEvent.PreQIEStatus = u32Temp;
N				break;
N			}
N			break;
N
N			case 0x01:
N			switch(u32Temp)
N			{
N				case 0x00: u8Ret = QIE_BACKWARD;
N				g_GpioButtonEvent.PreQIEStatus = u32Temp;
N				break;
N
N				case 0x01: u8Ret = QIE_STOP;
N				g_GpioButtonEvent.PreQIEStatus = u32Temp;
N				break;
N
N				case 0x03: u8Ret = QIE_FORWARD;
N				g_GpioButtonEvent.PreQIEStatus = u32Temp;
N				break;
N			}
N			break;
N
N			case 0x02:
N			switch(u32Temp)
N			{
N				case 0x00: u8Ret = QIE_FORWARD;
N				g_GpioButtonEvent.PreQIEStatus = u32Temp;
N				break;
N
N				case 0x02: u8Ret = QIE_STOP;
N				g_GpioButtonEvent.PreQIEStatus = u32Temp;
N				break;
N
N				case 0x03: u8Ret = QIE_BACKWARD;
N				g_GpioButtonEvent.PreQIEStatus = u32Temp;
N				break;
N			}
N			break;
N
N			case 0x03:
N			switch(u32Temp)
N			{
N				case 0x01: u8Ret = QIE_BACKWARD;
N				g_GpioButtonEvent.PreQIEStatus = u32Temp;
N				break;
N
N				case 0x02: u8Ret = QIE_FORWARD;
N				g_GpioButtonEvent.PreQIEStatus = u32Temp;
N				break;
N
N				case 0x03: u8Ret = QIE_STOP;
N				g_GpioButtonEvent.PreQIEStatus = u32Temp;
N				break;
N			}
N			break;
N		}
N	}
N
N	return u8Ret;
N}
N
Nvoid nsAPI_GPIO_QIE_Monitor(void)
N{
N	U8 u8Temp;
N
N	u8Temp = nsAPI_GPIO_Get_QIE();
N
N	if(u8Temp != QIE_SAME)
N	nsAPI_Main_GetInMouseQIEReport(u8Temp);
N
N}
N
Nvoid nsAPI_GPIO_MacroKey_Monitor(void)
N{
N
N
N
N}
