; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\ssp.o --asm_dir=.\Lst\ --list_dir=.\Lst\ --depend=.\obj\ssp.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I.\Inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\INC\NXP\LPC11Uxx -D__MICROLIB -D__UVISION_VERSION=536 -D__DEBUG_FLASH --omf_browse=.\obj\ssp.crf Src\ssp.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SSP0_IRQHandler PROC
;;;24     ****************************************************************************/
;;;25     void SSP0_IRQHandler(void) 
000000  4770              BX       lr
;;;26     {
;;;27     	
;;;28     }
;;;29     
                          ENDP

                  SSP1_IRQHandler PROC
;;;43     *****************************************************************************/
;;;44     void SSP1_IRQHandler(void) 
000002  4770              BX       lr
;;;45     {
;;;46       
;;;47     }
;;;48     
                          ENDP

                  nsAPI_SSP_Init PROC
;;;53     **************************************************************************/
;;;54     void nsAPI_SSP_Init(void)
000004  b570              PUSH     {r4-r6,lr}
;;;55     {  
;;;56     	U8 i, Dummy = Dummy;
000006  bf00              NOP      
;;;57     	
;;;58     	NVIC_DisableIRQ(SSP0_IRQn); 
000008  2014              MOVS     r0,#0x14
00000a  2101              MOVS     r1,#1
00000c  4081              LSLS     r1,r1,r0
00000e  4a3f              LDR      r2,|L1.268|
000010  6011              STR      r1,[r2,#0]
000012  bf00              NOP      
;;;59     	
;;;60     	LPC_SYSCON->PRESETCTRL |= BIT0;	
000014  483e              LDR      r0,|L1.272|
000016  6840              LDR      r0,[r0,#4]
000018  2101              MOVS     r1,#1
00001a  4308              ORRS     r0,r0,r1
00001c  493c              LDR      r1,|L1.272|
00001e  6048              STR      r0,[r1,#4]
;;;61     	LPC_SYSCON->SYSAHBCLKCTRL |= BIT11;			// Enable AHB clock to the SSP domain
000020  483b              LDR      r0,|L1.272|
000022  3080              ADDS     r0,r0,#0x80
000024  6800              LDR      r0,[r0,#0]
000026  14c9              ASRS     r1,r1,#19
000028  4308              ORRS     r0,r0,r1
00002a  4939              LDR      r1,|L1.272|
00002c  3180              ADDS     r1,r1,#0x80
00002e  6008              STR      r0,[r1,#0]
;;;62     //	LPC_SYSCON->SSP0CLKDIV = SCB_CLKDIV_DIV2;	// Divide by 2 for SSPCLKDIV 	//v0.1
;;;63     	LPC_SYSCON->SSP0CLKDIV = SCB_CLKDIV_DIV1;	// 4MHz reporting test for alpha test
000030  2001              MOVS     r0,#1
000032  6148              STR      r0,[r1,#0x14]
;;;64     
;;;65     	// Set P0.8 to SSP MISO 
;;;66     	LPC_IOCON->PIO0_8 &= ~0x07;
000034  4837              LDR      r0,|L1.276|
000036  6a00              LDR      r0,[r0,#0x20]
000038  08c0              LSRS     r0,r0,#3
00003a  00c0              LSLS     r0,r0,#3
00003c  4935              LDR      r1,|L1.276|
00003e  6208              STR      r0,[r1,#0x20]
;;;67     	LPC_IOCON->PIO0_8 |= BIT0;
000040  4608              MOV      r0,r1
000042  6a00              LDR      r0,[r0,#0x20]
000044  2101              MOVS     r1,#1
000046  4308              ORRS     r0,r0,r1
000048  4932              LDR      r1,|L1.276|
00004a  6208              STR      r0,[r1,#0x20]
;;;68     
;;;69     	// Set P0.9 to SSP MOSI 
;;;70     	LPC_IOCON->PIO0_9 &= ~0x07;
00004c  4608              MOV      r0,r1
00004e  6a40              LDR      r0,[r0,#0x24]
000050  08c0              LSRS     r0,r0,#3
000052  00c0              LSLS     r0,r0,#3
000054  6248              STR      r0,[r1,#0x24]
;;;71     	LPC_IOCON->PIO0_9 |= BIT0;
000056  4608              MOV      r0,r1
000058  6a40              LDR      r0,[r0,#0x24]
00005a  2101              MOVS     r1,#1
00005c  4308              ORRS     r0,r0,r1
00005e  492d              LDR      r1,|L1.276|
000060  6248              STR      r0,[r1,#0x24]
;;;72     
;;;73     	// Set 1.29 to SSP SCK (0.6 is used by USB and 0.10 for SWD) 
;;;74     	// No LPC_IOCON SCKLOC register on LPC11U14?
;;;75     	LPC_IOCON->PIO1_29 = BIT0;
000062  2001              MOVS     r0,#1
000064  492b              LDR      r1,|L1.276|
000066  31c0              ADDS     r1,r1,#0xc0
000068  6148              STR      r0,[r1,#0x14]
;;;76     
;;;77     	// Set SSEL0 to GPIO P0.2  
;;;78     	LPC_IOCON->PIO0_2 &= ~0x07;
00006a  482a              LDR      r0,|L1.276|
00006c  6880              LDR      r0,[r0,#8]
00006e  08c0              LSRS     r0,r0,#3
000070  00c0              LSLS     r0,r0,#3
000072  4928              LDR      r1,|L1.276|
000074  6088              STR      r0,[r1,#8]
;;;79     	LPC_IOCON->PIO0_2 |= BIT4;	
000076  4608              MOV      r0,r1
000078  6880              LDR      r0,[r0,#8]
00007a  2110              MOVS     r1,#0x10
00007c  4308              ORRS     r0,r0,r1
00007e  4925              LDR      r1,|L1.276|
000080  6088              STR      r0,[r1,#8]
;;;80     
;;;81     	// Control Register 1 CR0
;;;82     	// (PCLK / (CPSDVSR * [SCR+1])) = (48,000,000 / (2 * [2 + 1])) = 8.0 MHz 
;;;83     	// Data size = bits 3:0) : 0x7, 8-bit
;;;84     	// CPOL = 1(bit 6): SPI controller maintains the bus clock high between frames.
;;;85     	// CPHA = 1(bit 7): SPI controller captures serial data on the second clock
;;;86     	// 					transition of the frame, that is, the transition back to the
;;;87     	// 					inter-frame state of the clock line.
;;;88     	// Clock rate = 5(bits 15:8)
;;;89     	LPC_SSP0->CR0 = ( /*SSP_SCR_11*/ SSP_SCR_2 | BIT7 | BIT6 | (BIT2|BIT1|BIT0) ); 
000082  4825              LDR      r0,|L1.280|
000084  4925              LDR      r1,|L1.284|
000086  6008              STR      r0,[r1,#0]
;;;90     	
;;;91     	// Clock prescale register must be even and at least 2 in master mode 
;;;92     	LPC_SSP0->CPSR = 2;
000088  2002              MOVS     r0,#2
00008a  6108              STR      r0,[r1,#0x10]
;;;93     
;;;94     	// SPI Data Register DR
;;;95     	// Clear the Rx FIFO   
;;;96     	for(i = 0; i < SSP_FIFOSIZE; i++)    
00008c  2400              MOVS     r4,#0
00008e  e004              B        |L1.154|
                  |L1.144|
;;;97     		Dummy = LPC_SSP0->DR;   
000090  4822              LDR      r0,|L1.284|
000092  6880              LDR      r0,[r0,#8]
000094  b2c5              UXTB     r5,r0
000096  1c60              ADDS     r0,r4,#1              ;96
000098  b2c4              UXTB     r4,r0                 ;96
                  |L1.154|
00009a  2c08              CMP      r4,#8                 ;96
00009c  dbf8              BLT      |L1.144|
;;;98     
;;;99     	NVIC_EnableIRQ(SSP0_IRQn); 
00009e  2014              MOVS     r0,#0x14
0000a0  2101              MOVS     r1,#1
0000a2  4081              LSLS     r1,r1,r0
0000a4  4a19              LDR      r2,|L1.268|
0000a6  3a80              SUBS     r2,r2,#0x80
0000a8  6011              STR      r1,[r2,#0]
0000aa  bf00              NOP      
;;;100    
;;;101    	// Control Register 1 CR1
;;;102    	// Enable device and set it to master mode, no loopback 
;;;103    	LPC_SSP0->CR1 = SSP_CR1_SSE_ENABLED | SSP_CR1_MS_MASTER | SSP_CR1_LBM_NORMAL;
0000ac  2002              MOVS     r0,#2
0000ae  491b              LDR      r1,|L1.284|
0000b0  6048              STR      r0,[r1,#4]
;;;104    
;;;105    	NDrv_GPIO_SetBitValue(PORT0,2,HIGH); // Set NCS high
0000b2  2201              MOVS     r2,#1
0000b4  2102              MOVS     r1,#2
0000b6  2000              MOVS     r0,#0
0000b8  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;106    	//nsAPI_SSP_Init();
;;;107    }
0000bc  bd70              POP      {r4-r6,pc}
;;;108    
                          ENDP

                  nsAPI_SSP_Send PROC
;;;119    
;;;120    void nsAPI_SSP_Send(U8 *buf, U16 length)
0000be  b510              PUSH     {r4,lr}
;;;121    {	
0000c0  460a              MOV      r2,r1
;;;122    	U8 Dummy = Dummy;
0000c2  bf00              NOP      
;;;123    
;;;124    	// Move on only if NOT busy and TX FIFO not full. 
;;;125    	while((LPC_SSP0->SR & (SSP_SR_TNF_NOTFULL | SSP_SR_BSY_BUSY)) != SSP_SR_TNF_NOTFULL){}
0000c4  bf00              NOP      
                  |L1.198|
0000c6  4b15              LDR      r3,|L1.284|
0000c8  68db              LDR      r3,[r3,#0xc]
0000ca  2412              MOVS     r4,#0x12
0000cc  4023              ANDS     r3,r3,r4
0000ce  2b02              CMP      r3,#2
0000d0  d1f9              BNE      |L1.198|
;;;126    	LPC_SSP0->DR = *buf;		       
0000d2  7803              LDRB     r3,[r0,#0]
0000d4  4c11              LDR      r4,|L1.284|
0000d6  60a3              STR      r3,[r4,#8]
;;;127    
;;;128    	while((LPC_SSP0->SR & (SSP_SR_BSY_BUSY|SSP_SR_RNE_NOTEMPTY)) != SSP_SR_RNE_NOTEMPTY){}
0000d8  bf00              NOP      
                  |L1.218|
0000da  4b10              LDR      r3,|L1.284|
0000dc  68db              LDR      r3,[r3,#0xc]
0000de  2414              MOVS     r4,#0x14
0000e0  4023              ANDS     r3,r3,r4
0000e2  2b04              CMP      r3,#4
0000e4  d1f9              BNE      |L1.218|
;;;129    	// Whenever a byte is written, MISO FIFO counter increments, Clear FIFO
;;;130    	//on MISO. Otherwise, when sspReceive is called, previous data byte
;;;131    	// is left in the FIFO. 
;;;132    	Dummy = LPC_SSP0->DR;	
0000e6  4b0d              LDR      r3,|L1.284|
0000e8  689b              LDR      r3,[r3,#8]
0000ea  b2d9              UXTB     r1,r3
;;;133    }
0000ec  bd10              POP      {r4,pc}
;;;134    
                          ENDP

                  nsAPI_SSP_Receive PROC
;;;144    *************************************************************************/
;;;145    void nsAPI_SSP_Receive(U8 *buf, U16 length)
0000ee  22ff              MOVS     r2,#0xff
;;;146    {	
;;;147    	// As long as the receive FIFO is not empty, data can be received. 
;;;148    	LPC_SSP0->DR = 0xFF;
0000f0  4b0a              LDR      r3,|L1.284|
0000f2  609a              STR      r2,[r3,#8]
;;;149    
;;;150    	// Wait until the Busy bit is cleared 
;;;151    	while((LPC_SSP0->SR & (SSP_SR_BSY_BUSY|SSP_SR_RNE_NOTEMPTY)) != SSP_SR_RNE_NOTEMPTY ){}
0000f4  bf00              NOP      
                  |L1.246|
0000f6  4a09              LDR      r2,|L1.284|
0000f8  68d2              LDR      r2,[r2,#0xc]
0000fa  2314              MOVS     r3,#0x14
0000fc  401a              ANDS     r2,r2,r3
0000fe  2a04              CMP      r2,#4
000100  d1f9              BNE      |L1.246|
;;;152    	*buf = LPC_SSP0->DR;	
000102  4a06              LDR      r2,|L1.284|
000104  6892              LDR      r2,[r2,#8]
000106  7002              STRB     r2,[r0,#0]
;;;153    }
000108  4770              BX       lr
;;;154    
                          ENDP

00010a  0000              DCW      0x0000
                  |L1.268|
                          DCD      0xe000e180
                  |L1.272|
                          DCD      0x40048000
                  |L1.276|
                          DCD      0x40044000
                  |L1.280|
                          DCD      0x000002c7
                  |L1.284|
                          DCD      0x40040000

;*** Start embedded assembler ***

#line 1 "Src\\ssp.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___5_ssp_c_83790e90____REV16|
#line 112 ".\\Inc\\core_cmInstr.h"
|__asm___5_ssp_c_83790e90____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___5_ssp_c_83790e90____REVSH|
#line 130
|__asm___5_ssp_c_83790e90____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
