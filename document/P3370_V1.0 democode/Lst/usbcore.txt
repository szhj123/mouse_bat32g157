; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\usbcore.o --asm_dir=.\Lst\ --list_dir=.\Lst\ --depend=.\obj\usbcore.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I.\Inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\INC\NXP\LPC11Uxx -D__MICROLIB -D__UVISION_VERSION=536 -D__DEBUG_FLASH --omf_browse=.\obj\usbcore.crf Src\usbcore.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  nsAPI_USB_ResetCore PROC
;;;52     //----------------------------------------------------------------------------
;;;53     void nsAPI_USB_ResetCore (void)
000000  2000              MOVS     r0,#0
;;;54     {
;;;55     	usb_reg_addr = 0;
000002  49fe              LDR      r1,|L1.1020|
000004  7008              STRB     r0,[r1,#0]
;;;56     	usb_reg_data = 0;
000006  49fe              LDR      r1,|L1.1024|
000008  7008              STRB     r0,[r1,#0]
;;;57     	
;;;58     	g_USBCore_Setting.USB_DeviceStatus = USB_POWER;
00000a  49fe              LDR      r1,|L1.1028|
00000c  8008              STRH     r0,[r1,#0]
;;;59     	g_USBCore_Setting.USB_DeviceAddress = 0;
00000e  70c8              STRB     r0,[r1,#3]
;;;60     	g_USBCore_Setting.USB_Configuration = 0;
000010  7108              STRB     r0,[r1,#4]
;;;61     	g_USBCore_Setting.USB_EndPointMask = 0x00010001;
000012  48fd              LDR      r0,|L1.1032|
000014  6488              STR      r0,[r1,#0x48]  ; g_USBCore_Setting
;;;62     	g_USBCore_Setting.USB_EndPointHalt = 0x00000000;
000016  2000              MOVS     r0,#0
000018  64c8              STR      r0,[r1,#0x4c]  ; g_USBCore_Setting
;;;63     	g_USBCore_Setting.USB_EndPointStall = 0x00000000;
00001a  6508              STR      r0,[r1,#0x50]  ; g_USBCore_Setting
;;;64     }
00001c  4770              BX       lr
;;;65     
                          ENDP

                  nsAPI_USB_SetupStage PROC
;;;69     //----------------------------------------------------------------------------
;;;70     void nsAPI_USB_SetupStage(void)
00001e  b510              PUSH     {r4,lr}
;;;71     {
;;;72     	nsAPI_USB_ReadSetupEP(0x00, (U8 *)&g_USBCore_Setting.SetupPacket);
000020  49f8              LDR      r1,|L1.1028|
000022  315c              ADDS     r1,r1,#0x5c
000024  2000              MOVS     r0,#0
000026  f7fffffe          BL       nsAPI_USB_ReadSetupEP
;;;73     }
00002a  bd10              POP      {r4,pc}
;;;74     
                          ENDP

                  nsAPI_USB_DataInStage PROC
;;;78     //----------------------------------------------------------------------------
;;;79     void nsAPI_USB_DataInStage(void)
00002c  b510              PUSH     {r4,lr}
;;;80     {
;;;81     	U32 cnt;
;;;82     
;;;83     	if(g_USBCore_Setting.EP0Data.Count > USB_MAX_PACKET0)
00002e  48f5              LDR      r0,|L1.1028|
000030  3054              ADDS     r0,r0,#0x54
000032  8880              LDRH     r0,[r0,#4]
000034  2840              CMP      r0,#0x40
000036  dd01              BLE      |L1.60|
;;;84     		cnt = USB_MAX_PACKET0;
000038  2440              MOVS     r4,#0x40
00003a  e002              B        |L1.66|
                  |L1.60|
;;;85     	else
;;;86     		cnt = g_USBCore_Setting.EP0Data.Count;
00003c  48f1              LDR      r0,|L1.1028|
00003e  3054              ADDS     r0,r0,#0x54
000040  8884              LDRH     r4,[r0,#4]
                  |L1.66|
;;;87     
;;;88     	cnt = nsAPI_USB_WriteEP(0x80, g_USBCore_Setting.EP0Data.pData, cnt);
000042  48f0              LDR      r0,|L1.1028|
000044  4622              MOV      r2,r4
000046  6d41              LDR      r1,[r0,#0x54]  ; g_USBCore_Setting
000048  2080              MOVS     r0,#0x80
00004a  f7fffffe          BL       nsAPI_USB_WriteEP
00004e  4604              MOV      r4,r0
;;;89     	g_USBCore_Setting.EP0Data.pData += cnt;
000050  48ec              LDR      r0,|L1.1028|
000052  6d40              LDR      r0,[r0,#0x54]  ; g_USBCore_Setting
000054  1900              ADDS     r0,r0,r4
000056  49eb              LDR      r1,|L1.1028|
000058  6548              STR      r0,[r1,#0x54]  ; g_USBCore_Setting
;;;90     	g_USBCore_Setting.EP0Data.Count -= cnt;
00005a  4608              MOV      r0,r1
00005c  3054              ADDS     r0,r0,#0x54
00005e  8880              LDRH     r0,[r0,#4]
000060  1b00              SUBS     r0,r0,r4
000062  b281              UXTH     r1,r0
000064  48e7              LDR      r0,|L1.1028|
000066  3054              ADDS     r0,r0,#0x54
000068  8081              STRH     r1,[r0,#4]
;;;91     }
00006a  bd10              POP      {r4,pc}
;;;92     
                          ENDP

                  nsAPI_USB_DataOutStage PROC
;;;96     //----------------------------------------------------------------------------
;;;97     void nsAPI_USB_DataOutStage(void)
00006c  b510              PUSH     {r4,lr}
;;;98     {
;;;99     	U32 cnt;
;;;100    
;;;101    	cnt = nsAPI_USB_ReadEP(0x00, g_USBCore_Setting.EP0Data.pData);
00006e  48e5              LDR      r0,|L1.1028|
000070  6d41              LDR      r1,[r0,#0x54]  ; g_USBCore_Setting
000072  2000              MOVS     r0,#0
000074  f7fffffe          BL       nsAPI_USB_ReadEP
000078  4604              MOV      r4,r0
;;;102    	g_USBCore_Setting.EP0Data.Count -= cnt;
00007a  48e2              LDR      r0,|L1.1028|
00007c  3054              ADDS     r0,r0,#0x54
00007e  8880              LDRH     r0,[r0,#4]
000080  1b00              SUBS     r0,r0,r4
000082  b281              UXTH     r1,r0
000084  48df              LDR      r0,|L1.1028|
000086  3054              ADDS     r0,r0,#0x54
000088  8081              STRH     r1,[r0,#4]
;;;103    }
00008a  bd10              POP      {r4,pc}
;;;104    
                          ENDP

                  nsAPI_USB_StatusInStage PROC
;;;108    //----------------------------------------------------------------------------
;;;109    void nsAPI_USB_StatusInStage(void)
00008c  b510              PUSH     {r4,lr}
;;;110    {
;;;111    	nsAPI_USB_WriteEP(0x80, NULL, 0);
00008e  2200              MOVS     r2,#0
000090  4611              MOV      r1,r2
000092  2080              MOVS     r0,#0x80
000094  f7fffffe          BL       nsAPI_USB_WriteEP
;;;112    }
000098  bd10              POP      {r4,pc}
;;;113    
                          ENDP

                  nsAPI_USB_StatusOutStage PROC
;;;117    //----------------------------------------------------------------------------
;;;118    void nsAPI_USB_StatusOutStage(void)
00009a  b510              PUSH     {r4,lr}
;;;119    {
;;;120    	nsAPI_USB_ReadEP(0x00, g_USBCore_Setting.EP0Buf);
00009c  49d9              LDR      r1,|L1.1028|
00009e  1d89              ADDS     r1,r1,#6
0000a0  2000              MOVS     r0,#0
0000a2  f7fffffe          BL       nsAPI_USB_ReadEP
;;;121    }
0000a6  bd10              POP      {r4,pc}
;;;122    
                          ENDP

                  nsAPI_USBCore_Stall_i PROC
;;;1260   //----------------------------------------------------------------------------
;;;1261   void nsAPI_USBCore_Stall_i(void)
0000a8  b510              PUSH     {r4,lr}
;;;1262   {
;;;1263   	nsAPI_USB_SetStallEP(0x80);
0000aa  2080              MOVS     r0,#0x80
0000ac  f7fffffe          BL       nsAPI_USB_SetStallEP
;;;1264   	g_USBCore_Setting.EP0Data.Count = 0;
0000b0  2100              MOVS     r1,#0
0000b2  48d4              LDR      r0,|L1.1028|
0000b4  3054              ADDS     r0,r0,#0x54
0000b6  8081              STRH     r1,[r0,#4]
;;;1265   }
0000b8  bd10              POP      {r4,pc}
                          ENDP

                  nsAPI_USB_EndPoint0 PROC
;;;591    //----------------------------------------------------------------------------
;;;592    void nsAPI_USB_EndPoint0(U32 event)
0000ba  b570              PUSH     {r4-r6,lr}
;;;593    {
0000bc  4604              MOV      r4,r0
;;;594    	Boolean bSetupClassOk = FALSE, bOutClassOk = FALSE;
0000be  2500              MOVS     r5,#0
0000c0  2600              MOVS     r6,#0
;;;595    
;;;596    	//----------------------------------------------------------
;;;597    	// USB Params for tickle read write capabilities
;;;598    	//----------------------------------------------------------
;;;599    	
;;;600    	static U8 ready_flash_flag = 0;
;;;601    	static U16 sromCntr = 0;
;;;602    	static U32 flash_sector_address = 0;
;;;603    	static U32 flash_address_offset = 0;
;;;604    /*
;;;605    	static U8 frameCntr = 0;
;;;606    	static U8 tempframe[FRAME_CAPTURE_SIZE] = {0}; //frame capture
;;;607    	*/
;;;608    	//-----------------------------------------------------------
;;;609    
;;;610    	switch(event)
0000c2  2c08              CMP      r4,#8
0000c4  d271              BCS      |L1.426|
0000c6  0063              LSLS     r3,r4,#1
0000c8  447b              ADD      r3,r3,pc
0000ca  889b              LDRH     r3,[r3,#4]
0000cc  005b              LSLS     r3,r3,#1
0000ce  449f              ADD      pc,pc,r3
0000d0  006c0007          DCW      0x006c,0x0007
0000d4  02be030d          DCW      0x02be,0x030d
0000d8  006c006c          DCW      0x006c,0x006c
0000dc  0329032d          DCW      0x0329,0x032d
;;;611    	{
;;;612    		case USB_EVT_SETUP:
;;;613    			nsAPI_USB_SetupStage();
0000e0  f7fffffe          BL       nsAPI_USB_SetupStage
;;;614    			g_USBCore_Setting.EP0Data.Count = g_USBCore_Setting.SetupPacket.wLength;	// number of bytes to transfer
0000e4  48c7              LDR      r0,|L1.1028|
0000e6  305c              ADDS     r0,r0,#0x5c
0000e8  88c1              LDRH     r1,[r0,#6]
0000ea  3808              SUBS     r0,r0,#8
0000ec  8081              STRH     r1,[r0,#4]
;;;615    
;;;616    			switch(g_USBCore_Setting.SetupPacket.bmRequestType.BM.Type)
0000ee  3814              SUBS     r0,r0,#0x14
0000f0  7f00              LDRB     r0,[r0,#0x1c]  ; g_USBCore_Setting
0000f2  0640              LSLS     r0,r0,#25
0000f4  0f80              LSRS     r0,r0,#30
0000f6  2800              CMP      r0,#0
0000f8  d004              BEQ      |L1.260|
0000fa  2801              CMP      r0,#1
0000fc  d074              BEQ      |L1.488|
0000fe  2802              CMP      r0,#2
000100  d173              BNE      |L1.490|
000102  e11c              B        |L1.830|
                  |L1.260|
;;;617    			{		
;;;618    				case REQUEST_STANDARD:
;;;619    					switch(g_USBCore_Setting.SetupPacket.bRequest)
000104  48bf              LDR      r0,|L1.1028|
000106  305c              ADDS     r0,r0,#0x5c
000108  7840              LDRB     r0,[r0,#1]
00010a  0003              MOVS     r3,r0
00010c  f7fffffe          BL       __ARM_common_switch8
000110  0c0711b1          DCB      0x0c,0x07,0x11,0xb1
000114  1cb12743          DCB      0x1c,0xb1,0x27,0x43
000118  4e56717d          DCB      0x4e,0x56,0x71,0x7d
00011c  a7b1              DCB      0xa7,0xb1
;;;620    					{
;;;621    						case USB_REQUEST_GET_STATUS:
;;;622    #if 0
;;;623    							if(!nsAPI_USB_ReqGetStatus())
;;;624    								goto stall_i;
;;;625    							
;;;626    							nsAPI_USB_DataInStage();
;;;627    #else
;;;628    							if(nsAPI_USB_ReqGetStatus())
00011e  f7fffffe          BL       nsAPI_USB_ReqGetStatus
000122  2800              CMP      r0,#0
000124  d002              BEQ      |L1.300|
;;;629    								nsAPI_USB_DataInStage();
000126  f7fffffe          BL       nsAPI_USB_DataInStage
00012a  e001              B        |L1.304|
                  |L1.300|
;;;630    							else
;;;631    								nsAPI_USBCore_Stall_i();
00012c  f7fffffe          BL       nsAPI_USBCore_Stall_i
                  |L1.304|
;;;632    #endif
;;;633    							break;
000130  e0a2              B        |L1.632|
;;;634    
;;;635    						case USB_REQUEST_CLEAR_FEATURE:
;;;636    #if 0
;;;637    							if(!nsAPI_USB_ReqSetClrFeature(0))
;;;638    								goto stall_i;
;;;639    
;;;640    							nsAPI_USB_StatusInStage();
;;;641    #if USB_FEATURE_EVENT
;;;642    							USB_Feature_Event();
;;;643    #endif
;;;644    #else
;;;645    							if(nsAPI_USB_ReqSetClrFeature(0))
000132  2000              MOVS     r0,#0
000134  f7fffffe          BL       nsAPI_USB_ReqSetClrFeature
000138  2800              CMP      r0,#0
00013a  d002              BEQ      |L1.322|
;;;646    							{
;;;647    								nsAPI_USB_StatusInStage();
00013c  f7fffffe          BL       nsAPI_USB_StatusInStage
000140  e001              B        |L1.326|
                  |L1.322|
;;;648    #if USB_FEATURE_EVENT
;;;649    								USB_Feature_Event();
;;;650    #endif
;;;651    							}
;;;652    							else
;;;653    							{
;;;654    								nsAPI_USBCore_Stall_i();
000142  f7fffffe          BL       nsAPI_USBCore_Stall_i
                  |L1.326|
;;;655    							}
;;;656    #endif
;;;657    							break;
000146  e097              B        |L1.632|
;;;658    
;;;659    						case USB_REQUEST_SET_FEATURE:
;;;660    #if 0
;;;661    							if(!nsAPI_USB_ReqSetClrFeature(1))
;;;662    								goto stall_i;
;;;663    							
;;;664    							nsAPI_USB_StatusInStage();
;;;665    #if USB_FEATURE_EVENT
;;;666    							USB_Feature_Event();
;;;667    #endif
;;;668    #else
;;;669    							if(nsAPI_USB_ReqSetClrFeature(1))
000148  2001              MOVS     r0,#1
00014a  f7fffffe          BL       nsAPI_USB_ReqSetClrFeature
00014e  2800              CMP      r0,#0
000150  d002              BEQ      |L1.344|
;;;670    							{
;;;671    								nsAPI_USB_StatusInStage();
000152  f7fffffe          BL       nsAPI_USB_StatusInStage
000156  e001              B        |L1.348|
                  |L1.344|
;;;672    #if USB_FEATURE_EVENT
;;;673    								USB_Feature_Event();
;;;674    #endif
;;;675    							}
;;;676    							else
;;;677    							{
;;;678    								nsAPI_USBCore_Stall_i();
000158  f7fffffe          BL       nsAPI_USBCore_Stall_i
                  |L1.348|
;;;679    							}
;;;680    #endif
;;;681    							break;
00015c  e08c              B        |L1.632|
;;;682    
;;;683    						case USB_REQUEST_SET_ADDRESS:
;;;684    #if 0
;;;685    							if(!nsAPI_USB_ReqSetAddress())
;;;686    								goto stall_i;
;;;687    							
;;;688    							nsAPI_USB_StatusInStage();
;;;689    #else
;;;690    							if(nsAPI_USB_ReqSetAddress())
00015e  bf00              NOP      
000160  48a8              LDR      r0,|L1.1028|
000162  3040              ADDS     r0,r0,#0x40
000164  7f00              LDRB     r0,[r0,#0x1c]  ; g_USBCore_Setting
000166  06c0              LSLS     r0,r0,#27
000168  0ec0              LSRS     r0,r0,#27
00016a  2800              CMP      r0,#0
00016c  d107              BNE      |L1.382|
00016e  48a5              LDR      r0,|L1.1028|
000170  305c              ADDS     r0,r0,#0x5c
000172  7880              LDRB     r0,[r0,#2]
000174  2180              MOVS     r1,#0x80
000176  4308              ORRS     r0,r0,r1
000178  49a2              LDR      r1,|L1.1028|
00017a  70c8              STRB     r0,[r1,#3]
00017c  e001              B        |L1.386|
                  |L1.382|
00017e  2000              MOVS     r0,#0
000180  e001              B        |L1.390|
                  |L1.386|
000182  bf00              NOP      
000184  2001              MOVS     r0,#1
                  |L1.390|
000186  2800              CMP      r0,#0
000188  d002              BEQ      |L1.400|
;;;691    								nsAPI_USB_StatusInStage();
00018a  f7fffffe          BL       nsAPI_USB_StatusInStage
00018e  e001              B        |L1.404|
                  |L1.400|
;;;692    							else
;;;693    								nsAPI_USBCore_Stall_i();
000190  f7fffffe          BL       nsAPI_USBCore_Stall_i
                  |L1.404|
;;;694    #endif
;;;695    							break;
000194  e070              B        |L1.632|
;;;696    
;;;697    						case USB_REQUEST_GET_DESCRIPTOR:
;;;698    #if 0
;;;699    							if(!nsAPI_USB_ReqGetDescriptor())
;;;700    								goto stall_i;
;;;701    				
;;;702    							nsAPI_USB_DataInStage();
;;;703    #else
;;;704    							if(nsAPI_USB_ReqGetDescriptor())
000196  f7fffffe          BL       nsAPI_USB_ReqGetDescriptor
00019a  2800              CMP      r0,#0
00019c  d002              BEQ      |L1.420|
;;;705    								nsAPI_USB_DataInStage();
00019e  f7fffffe          BL       nsAPI_USB_DataInStage
0001a2  e001              B        |L1.424|
                  |L1.420|
;;;706    							else
;;;707    								nsAPI_USBCore_Stall_i();
0001a4  f7fffffe          BL       nsAPI_USBCore_Stall_i
                  |L1.424|
;;;708    #endif
;;;709    							break;
0001a8  e066              B        |L1.632|
                  |L1.426|
0001aa  e24f              B        |L1.1612|
;;;710    
;;;711    						case USB_REQUEST_SET_DESCRIPTOR:
;;;712    							nsAPI_USB_SetStallEP(0x00);
0001ac  2000              MOVS     r0,#0
0001ae  f7fffffe          BL       nsAPI_USB_SetStallEP
;;;713    							g_USBCore_Setting.EP0Data.Count = 0;
0001b2  2100              MOVS     r1,#0
0001b4  4893              LDR      r0,|L1.1028|
0001b6  3054              ADDS     r0,r0,#0x54
0001b8  8081              STRH     r1,[r0,#4]
;;;714    							break;
0001ba  e05d              B        |L1.632|
;;;715    
;;;716    						case USB_REQUEST_GET_CONFIGURATION:
;;;717    #if 0
;;;718    							if(!nsAPI_USB_ReqGetConfiguration())
;;;719    								goto stall_i;
;;;720    							
;;;721    							nsAPI_USB_DataInStage();
;;;722    #else
;;;723    							if(nsAPI_USB_ReqGetConfiguration())
0001bc  bf00              NOP      
0001be  4891              LDR      r0,|L1.1028|
0001c0  3040              ADDS     r0,r0,#0x40
0001c2  7f00              LDRB     r0,[r0,#0x1c]  ; g_USBCore_Setting
0001c4  06c0              LSLS     r0,r0,#27
0001c6  0ec0              LSRS     r0,r0,#27
0001c8  2800              CMP      r0,#0
0001ca  d104              BNE      |L1.470|
0001cc  488d              LDR      r0,|L1.1028|
0001ce  1d00              ADDS     r0,r0,#4
0001d0  1f01              SUBS     r1,r0,#4
0001d2  6548              STR      r0,[r1,#0x54]  ; g_USBCore_Setting
0001d4  e001              B        |L1.474|
                  |L1.470|
0001d6  2000              MOVS     r0,#0
0001d8  e001              B        |L1.478|
                  |L1.474|
0001da  bf00              NOP      
0001dc  2001              MOVS     r0,#1
                  |L1.478|
0001de  2800              CMP      r0,#0
0001e0  d004              BEQ      |L1.492|
;;;724    								nsAPI_USB_DataInStage();
0001e2  f7fffffe          BL       nsAPI_USB_DataInStage
0001e6  e003              B        |L1.496|
                  |L1.488|
0001e8  e048              B        |L1.636|
                  |L1.490|
0001ea  e22a              B        |L1.1602|
                  |L1.492|
;;;725    							else
;;;726    								nsAPI_USBCore_Stall_i();
0001ec  f7fffffe          BL       nsAPI_USBCore_Stall_i
                  |L1.496|
;;;727    #endif
;;;728    							break;
0001f0  e042              B        |L1.632|
;;;729    
;;;730    						case USB_REQUEST_SET_CONFIGURATION:
;;;731    #if 0
;;;732    							if(!nsAPI_USB_ReqSetConfiguration())
;;;733    								goto stall_i;
;;;734    							
;;;735    							nsAPI_USB_StatusInStage();
;;;736    #if USB_CONFIGURE_EVENT
;;;737    							nsAPI_USB_Configure_Event();
;;;738    #endif
;;;739    #else
;;;740    							if(nsAPI_USB_ReqSetConfiguration())
0001f2  f7fffffe          BL       nsAPI_USB_ReqSetConfiguration
0001f6  2800              CMP      r0,#0
0001f8  d004              BEQ      |L1.516|
;;;741    							{
;;;742    								nsAPI_USB_StatusInStage();
0001fa  f7fffffe          BL       nsAPI_USB_StatusInStage
;;;743    #if USB_CONFIGURE_EVENT
;;;744    								nsAPI_USB_Configure_Event();
0001fe  f7fffffe          BL       nsAPI_USB_Configure_Event
000202  e001              B        |L1.520|
                  |L1.516|
;;;745    #endif
;;;746    							}
;;;747    							else
;;;748    							{
;;;749    								nsAPI_USBCore_Stall_i();
000204  f7fffffe          BL       nsAPI_USBCore_Stall_i
                  |L1.520|
;;;750    							}
;;;751    #endif
;;;752    							break;
000208  e036              B        |L1.632|
;;;753    
;;;754    						case USB_REQUEST_GET_INTERFACE:
;;;755    #if 0
;;;756    							if(!nsAPI_USB_ReqGetInterface())
;;;757    								goto stall_i;
;;;758    							
;;;759    							nsAPI_USB_DataInStage();
;;;760    #else
;;;761    							if(nsAPI_USB_ReqGetInterface())
00020a  bf00              NOP      
00020c  487d              LDR      r0,|L1.1028|
00020e  3040              ADDS     r0,r0,#0x40
000210  7f00              LDRB     r0,[r0,#0x1c]  ; g_USBCore_Setting
000212  06c0              LSLS     r0,r0,#27
000214  0ec0              LSRS     r0,r0,#27
000216  2801              CMP      r0,#1
000218  d115              BNE      |L1.582|
00021a  487a              LDR      r0,|L1.1028|
00021c  7900              LDRB     r0,[r0,#4]  ; g_USBCore_Setting
00021e  2800              CMP      r0,#0
000220  d00e              BEQ      |L1.576|
000222  4878              LDR      r0,|L1.1028|
000224  305c              ADDS     r0,r0,#0x5c
000226  7900              LDRB     r0,[r0,#4]
000228  4976              LDR      r1,|L1.1028|
00022a  7889              LDRB     r1,[r1,#2]  ; g_USBCore_Setting
00022c  4288              CMP      r0,r1
00022e  da07              BGE      |L1.576|
000230  4874              LDR      r0,|L1.1028|
000232  305c              ADDS     r0,r0,#0x5c
000234  7901              LDRB     r1,[r0,#4]
000236  3857              SUBS     r0,r0,#0x57
000238  1808              ADDS     r0,r1,r0
00023a  4972              LDR      r1,|L1.1028|
00023c  6548              STR      r0,[r1,#0x54]  ; g_USBCore_Setting
00023e  e001              B        |L1.580|
                  |L1.576|
000240  2000              MOVS     r0,#0
000242  e004              B        |L1.590|
                  |L1.580|
000244  e001              B        |L1.586|
                  |L1.582|
000246  2000              MOVS     r0,#0
000248  e001              B        |L1.590|
                  |L1.586|
00024a  bf00              NOP      
00024c  2001              MOVS     r0,#1
                  |L1.590|
00024e  2800              CMP      r0,#0
000250  d002              BEQ      |L1.600|
;;;762    								nsAPI_USB_DataInStage();
000252  f7fffffe          BL       nsAPI_USB_DataInStage
000256  e001              B        |L1.604|
                  |L1.600|
;;;763    							else
;;;764    								nsAPI_USBCore_Stall_i();
000258  f7fffffe          BL       nsAPI_USBCore_Stall_i
                  |L1.604|
;;;765    #endif
;;;766    							break;
00025c  e00c              B        |L1.632|
;;;767    
;;;768    						case USB_REQUEST_SET_INTERFACE:
;;;769    #if 0
;;;770    							if(!nsAPI_USB_ReqSetInterface())
;;;771    								goto stall_i;
;;;772    
;;;773    							nsAPI_USB_StatusInStage();
;;;774    #if USB_INTERFACE_EVENT
;;;775    							USB_Interface_Event();
;;;776    #endif
;;;777    #else
;;;778    							if(nsAPI_USB_ReqSetInterface())
00025e  f7fffffe          BL       nsAPI_USB_ReqSetInterface
000262  2800              CMP      r0,#0
000264  d002              BEQ      |L1.620|
;;;779    							{
;;;780    								nsAPI_USB_StatusInStage();
000266  f7fffffe          BL       nsAPI_USB_StatusInStage
00026a  e001              B        |L1.624|
                  |L1.620|
;;;781    #if USB_INTERFACE_EVENT
;;;782    								USB_Interface_Event();
;;;783    #endif
;;;784    							}
;;;785    							else
;;;786    							{
;;;787    								nsAPI_USBCore_Stall_i();
00026c  f7fffffe          BL       nsAPI_USBCore_Stall_i
                  |L1.624|
;;;788    							}
;;;789    #endif
;;;790    							break;
000270  e002              B        |L1.632|
;;;791    
;;;792    						default:
;;;793    #if 0
;;;794    							goto stall_i;
;;;795    #else
;;;796    							nsAPI_USBCore_Stall_i();
000272  f7fffffe          BL       nsAPI_USBCore_Stall_i
000276  bf00              NOP                            ;619
                  |L1.632|
000278  bf00              NOP                            ;633
;;;797    #endif
;;;798    					}
;;;799    					break;
00027a  e1e6              B        |L1.1610|
                  |L1.636|
;;;800    
;;;801    #if USB_CLASS
;;;802    				case REQUEST_CLASS:
;;;803    					switch(g_USBCore_Setting.SetupPacket.bmRequestType.BM.Recipient)
00027c  4861              LDR      r0,|L1.1028|
00027e  3040              ADDS     r0,r0,#0x40
000280  7f00              LDRB     r0,[r0,#0x1c]  ; g_USBCore_Setting
000282  06c0              LSLS     r0,r0,#27
000284  0ec0              LSRS     r0,r0,#27
000286  2800              CMP      r0,#0
000288  d004              BEQ      |L1.660|
00028a  2801              CMP      r0,#1
00028c  d003              BEQ      |L1.662|
00028e  2802              CMP      r0,#2
000290  d14d              BNE      |L1.814|
000292  e04d              B        |L1.816|
                  |L1.660|
;;;804    					{
;;;805    						case REQUEST_TO_DEVICE:
;;;806    							goto stall_i;
000294  e1d6              B        |L1.1604|
                  |L1.662|
;;;807    							break;
;;;808    		
;;;809    						case REQUEST_TO_INTERFACE:
;;;810    #if USB_HID
;;;811    							switch(g_USBCore_Setting.SetupPacket.bRequest)
000296  485b              LDR      r0,|L1.1028|
000298  305c              ADDS     r0,r0,#0x5c
00029a  7840              LDRB     r0,[r0,#1]
00029c  0003              MOVS     r3,r0
00029e  f7fffffe          BL       __ARM_common_switch8
0002a2  0c44              DCB      0x0c,0x44
0002a4  071c3044          DCB      0x07,0x1c,0x30,0x44
0002a8  44444444          DCB      0x44,0x44,0x44,0x44
0002ac  12283c44          DCB      0x12,0x28,0x3c,0x44
;;;812    							{
;;;813    								case HID_REQUEST_GET_REPORT:
;;;814    								{
;;;815    									g_USBCore_Setting.EP0Data.pData = g_USBCore_Setting.EP0Buf;
0002b0  4854              LDR      r0,|L1.1028|
0002b2  1d80              ADDS     r0,r0,#6
0002b4  1f81              SUBS     r1,r0,#6
0002b6  6548              STR      r0,[r1,#0x54]  ; g_USBCore_Setting
;;;816    									nsAPI_USB_DataInStage();
0002b8  f7fffffe          BL       nsAPI_USB_DataInStage
;;;817    									bSetupClassOk = TRUE;
0002bc  2501              MOVS     r5,#1
;;;818    								}
;;;819    
;;;820    								wnDrv_Usb_ClrGetReqStatus(0x80); 
0002be  2080              MOVS     r0,#0x80
0002c0  f7fffffe          BL       wnDrv_Usb_ClrGetReqStatus
;;;821    								break;
0002c4  e031              B        |L1.810|
;;;822    
;;;823    								case HID_REQUEST_SET_REPORT:
;;;824    									nsAPI_USB_SetupStage();
0002c6  f7fffffe          BL       nsAPI_USB_SetupStage
;;;825    									nsAPI_USB_StatusInStage();
0002ca  f7fffffe          BL       nsAPI_USB_StatusInStage
;;;826    									g_USBCore_Setting.EP0Data.pData = g_USBCore_Setting.EP0Buf;                             
0002ce  484d              LDR      r0,|L1.1028|
0002d0  1d80              ADDS     r0,r0,#6
0002d2  1f81              SUBS     r1,r0,#6
0002d4  6548              STR      r0,[r1,#0x54]  ; g_USBCore_Setting
;;;827    									bSetupClassOk = TRUE;
0002d6  2501              MOVS     r5,#1
;;;828    									break;
0002d8  e027              B        |L1.810|
;;;829    		
;;;830    								case HID_REQUEST_GET_IDLE:
;;;831    									if(HID_GetIdle())
0002da  f7fffffe          BL       HID_GetIdle
0002de  2800              CMP      r0,#0
0002e0  d006              BEQ      |L1.752|
;;;832    									{
;;;833    										g_USBCore_Setting.EP0Data.pData = g_USBCore_Setting.EP0Buf;	// point to data to be sent
0002e2  4848              LDR      r0,|L1.1028|
0002e4  1d80              ADDS     r0,r0,#6
0002e6  1f81              SUBS     r1,r0,#6
0002e8  6548              STR      r0,[r1,#0x54]  ; g_USBCore_Setting
;;;834    										nsAPI_USB_DataInStage();									// send requested data
0002ea  f7fffffe          BL       nsAPI_USB_DataInStage
;;;835    										bSetupClassOk = TRUE;
0002ee  2501              MOVS     r5,#1
                  |L1.752|
;;;836    									}
;;;837    									break;
0002f0  e01b              B        |L1.810|
;;;838    		
;;;839    								case HID_REQUEST_SET_IDLE:
;;;840    									if(HID_SetIdle())
0002f2  f7fffffe          BL       HID_SetIdle
0002f6  2800              CMP      r0,#0
0002f8  d002              BEQ      |L1.768|
;;;841    									{
;;;842    										nsAPI_USB_StatusInStage();									// send Acknowledge
0002fa  f7fffffe          BL       nsAPI_USB_StatusInStage
;;;843    										bSetupClassOk = TRUE;
0002fe  2501              MOVS     r5,#1
                  |L1.768|
;;;844    									}
;;;845    									break;
000300  e013              B        |L1.810|
;;;846    		
;;;847    								case HID_REQUEST_GET_PROTOCOL:
;;;848    									if(HID_GetProtocol())
000302  f7fffffe          BL       HID_GetProtocol
000306  2800              CMP      r0,#0
000308  d006              BEQ      |L1.792|
;;;849    									{
;;;850    										g_USBCore_Setting.EP0Data.pData = g_USBCore_Setting.EP0Buf;	// point to data to be sent
00030a  483e              LDR      r0,|L1.1028|
00030c  1d80              ADDS     r0,r0,#6
00030e  1f81              SUBS     r1,r0,#6
000310  6548              STR      r0,[r1,#0x54]  ; g_USBCore_Setting
;;;851    										nsAPI_USB_DataInStage();									// send requested data
000312  f7fffffe          BL       nsAPI_USB_DataInStage
;;;852    										bSetupClassOk = TRUE;
000316  2501              MOVS     r5,#1
                  |L1.792|
;;;853    									}
;;;854    									break;
000318  e007              B        |L1.810|
;;;855    		
;;;856    								case HID_REQUEST_SET_PROTOCOL:
;;;857    									if(HID_SetProtocol())
00031a  f7fffffe          BL       HID_SetProtocol
00031e  2800              CMP      r0,#0
000320  d002              BEQ      |L1.808|
;;;858    									{
;;;859    										nsAPI_USB_StatusInStage();									// send Acknowledge
000322  f7fffffe          BL       nsAPI_USB_StatusInStage
;;;860    										bSetupClassOk = TRUE;
000326  2501              MOVS     r5,#1
                  |L1.808|
;;;861    									}
;;;862    									break;
000328  bf00              NOP      
                  |L1.810|
00032a  bf00              NOP                            ;821
;;;863    							}
;;;864    #endif
;;;865    						case REQUEST_TO_ENDPOINT:
00032c  bf00              NOP      
                  |L1.814|
00032e  bf00              NOP      
                  |L1.816|
;;;866    						default:
;;;867    #if 0
;;;868    							goto stall_i;
;;;869    #else
;;;870    							if(!bSetupClassOk)
000330  2d00              CMP      r5,#0
000332  d101              BNE      |L1.824|
;;;871    								nsAPI_USBCore_Stall_i();
000334  f7fffffe          BL       nsAPI_USBCore_Stall_i
                  |L1.824|
000338  bf00              NOP                            ;803
00033a  bf00              NOP                            ;807
;;;872    #endif
;;;873    					}
;;;874    setup_class_ok: // request finished successfully
;;;875    					break;
00033c  e185              B        |L1.1610|
                  |L1.830|
;;;876    #endif
;;;877    
;;;878    				case REQUEST_VENDOR:						 	
;;;879    					switch(g_USBCore_Setting.SetupPacket.bmRequestType.BM.Recipient)
00033e  4831              LDR      r0,|L1.1028|
000340  3040              ADDS     r0,r0,#0x40
000342  7f00              LDRB     r0,[r0,#0x1c]  ; g_USBCore_Setting
000344  06c0              LSLS     r0,r0,#27
000346  0ec0              LSRS     r0,r0,#27
000348  2800              CMP      r0,#0
00034a  d004              BEQ      |L1.854|
00034c  2801              CMP      r0,#1
00034e  d07d              BEQ      |L1.1100|
000350  2802              CMP      r0,#2
000352  d17c              BNE      |L1.1102|
000354  e161              B        |L1.1562|
                  |L1.854|
;;;880    					{
;;;881    						case REQUEST_TO_DEVICE:
;;;882    							if(g_USBCore_Setting.SetupPacket.bmRequestType.B == TCL_CONTROL_0_READ)		// read
000356  482b              LDR      r0,|L1.1028|
000358  3040              ADDS     r0,r0,#0x40
00035a  7f00              LDRB     r0,[r0,#0x1c]  ; g_USBCore_Setting
00035c  28c0              CMP      r0,#0xc0
00035e  d15c              BNE      |L1.1050|
;;;883    							{
;;;884    								usb_reg_addr = g_USBCore_Setting.SetupPacket.wIndex.WB.L;	// get the register address
000360  4828              LDR      r0,|L1.1028|
000362  305c              ADDS     r0,r0,#0x5c
000364  7900              LDRB     r0,[r0,#4]
000366  4925              LDR      r1,|L1.1020|
000368  7008              STRB     r0,[r1,#0]
;;;885    								
;;;886    								if(g_USBCore_Setting.SetupPacket.bRequest == 0x04)			// mcu register
00036a  4826              LDR      r0,|L1.1028|
00036c  305c              ADDS     r0,r0,#0x5c
00036e  7840              LDRB     r0,[r0,#1]
000370  2804              CMP      r0,#4
000372  d12f              BNE      |L1.980|
;;;887    								{  
;;;888    									
;;;889    									switch(usb_reg_addr)
000374  4608              MOV      r0,r1
000376  7800              LDRB     r0,[r0,#0]  ; usb_reg_addr
000378  2842              CMP      r0,#0x42
00037a  d019              BEQ      |L1.944|
00037c  dc06              BGT      |L1.908|
00037e  2800              CMP      r0,#0
000380  d009              BEQ      |L1.918|
000382  2803              CMP      r0,#3
000384  d00b              BEQ      |L1.926|
000386  2841              CMP      r0,#0x41
000388  d11f              BNE      |L1.970|
00038a  e00d              B        |L1.936|
                  |L1.908|
00038c  2847              CMP      r0,#0x47
00038e  d013              BEQ      |L1.952|
000390  28ff              CMP      r0,#0xff
000392  d11a              BNE      |L1.970|
000394  e014              B        |L1.960|
                  |L1.918|
;;;890    									{
;;;891    										case REF_MOUSE_INFO_ADDR:
;;;892    											usb_reg_data = MOUSE_INFO;					// get infomation for mouse
000396  2001              MOVS     r0,#1
000398  4919              LDR      r1,|L1.1024|
00039a  7008              STRB     r0,[r1,#0]
;;;893    											break;
00039c  e019              B        |L1.978|
                  |L1.926|
;;;894    		      
;;;895    										case REF_MOUSE_EVENT_CTRL_ADDR:
;;;896    											usb_reg_data = mouse_event_ctrl;			// get event control settings for mouse
00039e  481b              LDR      r0,|L1.1036|
0003a0  7800              LDRB     r0,[r0,#0]  ; mouse_event_ctrl
0003a2  4917              LDR      r1,|L1.1024|
0003a4  7008              STRB     r0,[r1,#0]
;;;897    											break;
0003a6  e014              B        |L1.978|
                  |L1.936|
;;;898    
;;;899    										case REF_MOUSE_FIRMWARE_MAJOR_ADDR:
;;;900    											usb_reg_data = MOUSE_FIRMWARE_major;		// get major firmware revision for mouse
0003a8  2000              MOVS     r0,#0
0003aa  4915              LDR      r1,|L1.1024|
0003ac  7008              STRB     r0,[r1,#0]
;;;901    											break;
0003ae  e010              B        |L1.978|
                  |L1.944|
;;;902    										
;;;903    										case REF_MOUSE_FIRMWARE_MINOR_ADDR:
;;;904    											usb_reg_data = MOUSE_FIRMWARE_minor;		// get minor firmware revision for mouse
0003b0  2001              MOVS     r0,#1
0003b2  4913              LDR      r1,|L1.1024|
0003b4  7008              STRB     r0,[r1,#0]
;;;905    											break;
0003b6  e00c              B        |L1.978|
                  |L1.952|
;;;906    
;;;907    										case REF_MOUSE_RECOGNITION_ADDR:
;;;908    											usb_reg_data = REFERENCE_MOUSE;					// get minor firmware revision for mouse
0003b8  20ff              MOVS     r0,#0xff
0003ba  4911              LDR      r1,|L1.1024|
0003bc  7008              STRB     r0,[r1,#0]
;;;909    											break;
0003be  e008              B        |L1.978|
                  |L1.960|
;;;910    										
;;;911    										case REF_MOUSE_SROM_WRITE_ADDR:
;;;912    											usb_reg_data = ready_flash_flag;
0003c0  4813              LDR      r0,|L1.1040|
0003c2  7800              LDRB     r0,[r0,#0]  ; ready_flash_flag
0003c4  490e              LDR      r1,|L1.1024|
0003c6  7008              STRB     r0,[r1,#0]
;;;913    											break;
0003c8  e003              B        |L1.978|
                  |L1.970|
;;;914    										/*
;;;915    										case REF_MOUSE_SPI_BURST_FRAME_CAPTURE:
;;;916    
;;;917    											for(frameCntr = 0; frameCntr < FRAME_CAPTURE_SIZE; frameCntr++)
;;;918    												tempframe[frameCntr] = 0;
;;;919    
;;;920    											nsAPI_SSP_Sensor_Write(0x10, 0x00);
;;;921    											nsAPI_SSP_Sensor_Write(0x12, 0x83);
;;;922    											nsAPI_SSP_Sensor_Write(0x12, 0xC5);
;;;923    
;;;924    											NCS_LOW();
;;;925    											
;;;926    											for(frameCntr = 0; frameCntr < FRAME_CAPTURE_SIZE; frameCntr++)
;;;927    												nsAPI_SSP_Receive( &tempframe[frameCntr],1);
;;;928    
;;;929    											NCS_HIGH();
;;;930    											frameCntr = 0;
;;;931    
;;;932    											usb_reg_data = 1;
;;;933    
;;;934    											break;
;;;935    										case REF_MOUSE_SPI_BURST_FRAME_CAPTURE_READ:
;;;936    											usb_reg_data =	tempframe[frameCntr];
;;;937    											frameCntr++;
;;;938    											break;
;;;939    										*/
;;;940    																					
;;;941    										default:
;;;942    											usb_reg_data = 0;
0003ca  2000              MOVS     r0,#0
0003cc  490c              LDR      r1,|L1.1024|
0003ce  7008              STRB     r0,[r1,#0]
;;;943    											break;
0003d0  bf00              NOP      
                  |L1.978|
0003d2  e00e              B        |L1.1010|
                  |L1.980|
;;;944    									
;;;945    									} 
;;;946    								}
;;;947    								else if(g_USBCore_Setting.SetupPacket.bRequest == 0x01)		// sensor register
0003d4  480b              LDR      r0,|L1.1028|
0003d6  305c              ADDS     r0,r0,#0x5c
0003d8  7840              LDRB     r0,[r0,#1]
0003da  2801              CMP      r0,#1
0003dc  d109              BNE      |L1.1010|
;;;948    								{	
;;;949    									usb_reg_data = nsAPI_SSP_Sensor_Read(usb_reg_addr);
0003de  4807              LDR      r0,|L1.1020|
0003e0  7800              LDRB     r0,[r0,#0]  ; usb_reg_addr
0003e2  f7fffffe          BL       nsAPI_SSP_Sensor_Read
0003e6  4906              LDR      r1,|L1.1024|
0003e8  7008              STRB     r0,[r1,#0]
;;;950    									nsAPI_SSP_Sensor_Write(0x50, 0x01); 					// UGS 2 only needed
0003ea  2101              MOVS     r1,#1
0003ec  2050              MOVS     r0,#0x50
0003ee  f7fffffe          BL       nsAPI_SSP_Sensor_Write
                  |L1.1010|
;;;951    								}							
;;;952    								g_USBCore_Setting.EP0Data.pData = &usb_reg_data;
0003f2  4803              LDR      r0,|L1.1024|
0003f4  4903              LDR      r1,|L1.1028|
0003f6  6548              STR      r0,[r1,#0x54]  ; g_USBCore_Setting
;;;953    							    g_USBCore_Setting.EP0Data.Count = sizeof(usb_reg_data);
0003f8  2101              MOVS     r1,#1
0003fa  e00b              B        |L1.1044|
                  |L1.1020|
                          DCD      usb_reg_addr
                  |L1.1024|
                          DCD      usb_reg_data
                  |L1.1028|
                          DCD      g_USBCore_Setting
                  |L1.1032|
                          DCD      0x00010001
                  |L1.1036|
                          DCD      mouse_event_ctrl
                  |L1.1040|
                          DCD      ready_flash_flag
                  |L1.1044|
000414  48c8              LDR      r0,|L1.1848|
000416  8081              STRH     r1,[r0,#4]
                  |L1.1048|
000418  e0fd              B        |L1.1558|
                  |L1.1050|
;;;954    							}
;;;955    							else if(g_USBCore_Setting.SetupPacket.bmRequestType.B == TCL_CONTROL_0_WRITE)	// write
00041a  48c7              LDR      r0,|L1.1848|
00041c  3814              SUBS     r0,r0,#0x14
00041e  7f00              LDRB     r0,[r0,#0x1c]  ; g_USBCore_Setting
000420  2840              CMP      r0,#0x40
000422  d1f9              BNE      |L1.1048|
;;;956    							{
;;;957    								usb_reg_addr = g_USBCore_Setting.SetupPacket.wIndex.WB.L;	// get the register address
000424  48c4              LDR      r0,|L1.1848|
000426  3008              ADDS     r0,r0,#8
000428  7900              LDRB     r0,[r0,#4]
00042a  49c4              LDR      r1,|L1.1852|
00042c  7008              STRB     r0,[r1,#0]
;;;958    								usb_reg_data = g_USBCore_Setting.SetupPacket.wIndex.WB.H;	// get the register data
00042e  48c2              LDR      r0,|L1.1848|
000430  3008              ADDS     r0,r0,#8
000432  7940              LDRB     r0,[r0,#5]
000434  49c2              LDR      r1,|L1.1856|
000436  7008              STRB     r0,[r1,#0]
;;;959    
;;;960    								if(g_USBCore_Setting.SetupPacket.bRequest == 0x04)			// mcu register
000438  48bf              LDR      r0,|L1.1848|
00043a  3008              ADDS     r0,r0,#8
00043c  7840              LDRB     r0,[r0,#1]
00043e  2804              CMP      r0,#4
000440  d17a              BNE      |L1.1336|
;;;961    								{  
;;;962    									switch(usb_reg_addr)
000442  48be              LDR      r0,|L1.1852|
000444  7800              LDRB     r0,[r0,#0]  ; usb_reg_addr
000446  2803              CMP      r0,#3
000448  d009              BEQ      |L1.1118|
00044a  e001              B        |L1.1104|
                  |L1.1100|
00044c  e0e4              B        |L1.1560|
                  |L1.1102|
00044e  e0e5              B        |L1.1564|
                  |L1.1104|
000450  2808              CMP      r0,#8
000452  d062              BEQ      |L1.1306|
000454  28fb              CMP      r0,#0xfb
000456  d007              BEQ      |L1.1128|
000458  28ff              CMP      r0,#0xff
00045a  d16e              BNE      |L1.1338|
00045c  e042              B        |L1.1252|
                  |L1.1118|
;;;963    									{
;;;964    											
;;;965    										case REF_MOUSE_EVENT_CTRL_ADDR:
;;;966    											mouse_event_ctrl = usb_reg_data;      // set event control settings for mouse
00045e  48b8              LDR      r0,|L1.1856|
000460  7800              LDRB     r0,[r0,#0]  ; usb_reg_data
000462  49b8              LDR      r1,|L1.1860|
000464  7008              STRB     r0,[r1,#0]
;;;967    											break;
000466  e096              B        |L1.1430|
                  |L1.1128|
;;;968    								  					    
;;;969    										case REF_MOUSE_SROM_LOAD_CTRL_ADDR:
;;;970    											__disable_irq(); 											
000468  b672              CPSID    i
;;;971    
;;;972    											if((usb_reg_data & BIT2) == REBOOT) // reboot										
00046a  48b5              LDR      r0,|L1.1856|
00046c  7800              LDRB     r0,[r0,#0]  ; usb_reg_data
00046e  2104              MOVS     r1,#4
000470  4008              ANDS     r0,r0,r1
000472  2804              CMP      r0,#4
000474  d101              BNE      |L1.1146|
;;;973    											{	
;;;974    												nsAPI_SSP_Sensor_Init();
000476  f7fffffe          BL       nsAPI_SSP_Sensor_Init
                  |L1.1146|
;;;975    											}
;;;976    
;;;977    											if( (usb_reg_data & BIT0) == INIT_TCL_FLASH)		// start flash initialization
00047a  48b1              LDR      r0,|L1.1856|
00047c  7800              LDRB     r0,[r0,#0]  ; usb_reg_data
00047e  07c0              LSLS     r0,r0,#31
000480  0fc0              LSRS     r0,r0,#31
000482  2800              CMP      r0,#0
000484  d01c              BEQ      |L1.1216|
;;;978    											{
;;;979    												sromCntr = 0;
000486  2000              MOVS     r0,#0
000488  49af              LDR      r1,|L1.1864|
00048a  8008              STRH     r0,[r1,#0]
;;;980    												ready_flash_flag = FREE;
00048c  20aa              MOVS     r0,#0xaa
00048e  49af              LDR      r1,|L1.1868|
000490  7008              STRB     r0,[r1,#0]
;;;981    												flash_address_offset = 0;
000492  2000              MOVS     r0,#0
000494  49ae              LDR      r1,|L1.1872|
000496  6008              STR      r0,[r1,#0]  ; flash_address_offset
;;;982    												flash_sector_address = START_OF_FLASH_SECTOR;
000498  2003              MOVS     r0,#3
00049a  0340              LSLS     r0,r0,#13
00049c  49ad              LDR      r1,|L1.1876|
00049e  6008              STR      r0,[r1,#0]  ; flash_sector_address
;;;983    		
;;;984    												memset(usbSROM, 0, SROM_BUFFER_SIZE);
0004a0  21ff              MOVS     r1,#0xff
0004a2  3101              ADDS     r1,#1
0004a4  48ac              LDR      r0,|L1.1880|
0004a6  f7fffffe          BL       __aeabi_memclr4
;;;985    												
;;;986    												if(msAPI_Flash_PrepareSec(Sector_6, Sector_7) == IAP_STA_CMD_SUCCESS)	// erase flash sector for incoming data
0004aa  2107              MOVS     r1,#7
0004ac  2006              MOVS     r0,#6
0004ae  f7fffffe          BL       msAPI_Flash_PrepareSec
0004b2  2800              CMP      r0,#0
0004b4  d114              BNE      |L1.1248|
;;;987    													msAPI_Flash_EraseSec(Sector_6, Sector_7);
0004b6  2107              MOVS     r1,#7
0004b8  2006              MOVS     r0,#6
0004ba  f7fffffe          BL       msAPI_Flash_EraseSec
0004be  e00f              B        |L1.1248|
                  |L1.1216|
;;;988    											}
;;;989    											else if( (usb_reg_data & BIT1) == TCL_END_FLASH)	// stop flash (by fill last sector)
0004c0  489f              LDR      r0,|L1.1856|
0004c2  7800              LDRB     r0,[r0,#0]  ; usb_reg_data
0004c4  2102              MOVS     r1,#2
0004c6  4008              ANDS     r0,r0,r1
0004c8  2802              CMP      r0,#2
0004ca  d109              BNE      |L1.1248|
;;;990    											{																	
;;;991    												if(sromCntr)									// sending leftover data inside RAM to FLASH
0004cc  489e              LDR      r0,|L1.1864|
0004ce  8800              LDRH     r0,[r0,#0]  ; sromCntr
0004d0  2800              CMP      r0,#0
0004d2  d005              BEQ      |L1.1248|
;;;992    												{
;;;993    													ready_flash_flag = READY_TO_FLASH;
0004d4  2001              MOVS     r0,#1
0004d6  499d              LDR      r1,|L1.1868|
0004d8  7008              STRB     r0,[r1,#0]
;;;994    													sromCntr =0;
0004da  2000              MOVS     r0,#0
0004dc  499a              LDR      r1,|L1.1864|
0004de  8008              STRH     r0,[r1,#0]
                  |L1.1248|
;;;995    												}														
;;;996    											}
;;;997    											
;;;998    											__enable_irq();
0004e0  b662              CPSIE    i
;;;999    											break;
0004e2  e058              B        |L1.1430|
                  |L1.1252|
;;;1000   
;;;1001   										case REF_MOUSE_SROM_WRITE_ADDR:
;;;1002   											__disable_irq();
0004e4  b672              CPSID    i
;;;1003   
;;;1004   											if( sromCntr < SROM_BUFFER_SIZE )		// check if buffer is full
0004e6  4898              LDR      r0,|L1.1864|
0004e8  8800              LDRH     r0,[r0,#0]  ; sromCntr
0004ea  28ff              CMP      r0,#0xff
0004ec  dc09              BGT      |L1.1282|
;;;1005   												usbSROM[sromCntr++] = usb_reg_data;	// if not continue loading the buffers
0004ee  4894              LDR      r0,|L1.1856|
0004f0  7801              LDRB     r1,[r0,#0]  ; usb_reg_data
0004f2  4895              LDR      r0,|L1.1864|
0004f4  8802              LDRH     r2,[r0,#0]  ; sromCntr
0004f6  8800              LDRH     r0,[r0,#0]  ; sromCntr
0004f8  1c40              ADDS     r0,r0,#1
0004fa  4b93              LDR      r3,|L1.1864|
0004fc  8018              STRH     r0,[r3,#0]
0004fe  4896              LDR      r0,|L1.1880|
000500  5481              STRB     r1,[r0,r2]
                  |L1.1282|
;;;1006   											
;;;1007   											if(sromCntr >= SROM_BUFFER_SIZE)		// if RAM buffer is full then proceed to ready the flashing
000502  4891              LDR      r0,|L1.1864|
000504  8800              LDRH     r0,[r0,#0]  ; sromCntr
000506  28ff              CMP      r0,#0xff
000508  dd05              BLE      |L1.1302|
;;;1008   											{										
;;;1009   												sromCntr =0;						
00050a  2000              MOVS     r0,#0
00050c  498e              LDR      r1,|L1.1864|
00050e  8008              STRH     r0,[r1,#0]
;;;1010   												ready_flash_flag = READY_TO_FLASH;
000510  2001              MOVS     r0,#1
000512  498e              LDR      r1,|L1.1868|
000514  7008              STRB     r0,[r1,#0]
                  |L1.1302|
;;;1011   											}
;;;1012   											__enable_irq();
000516  b662              CPSIE    i
;;;1013   											break;
000518  e03d              B        |L1.1430|
                  |L1.1306|
;;;1014   
;;;1015   										case REF_MOUSE_LED_SW_ADDR:
;;;1016   											if(usb_reg_data == 0x03) 
00051a  4889              LDR      r0,|L1.1856|
00051c  7800              LDRB     r0,[r0,#0]  ; usb_reg_data
00051e  2803              CMP      r0,#3
000520  d10c              BNE      |L1.1340|
;;;1017   											{
;;;1018   												TURN_ON_20R_SW1_LED(LOW);	// Both CLOSED. the highest light
000522  2200              MOVS     r2,#0
000524  210d              MOVS     r1,#0xd
000526  4610              MOV      r0,r2
000528  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;1019   												TURN_ON_39R_SW2_LED(LOW);	
00052c  2200              MOVS     r2,#0
00052e  210e              MOVS     r1,#0xe
000530  4610              MOV      r0,r2
000532  f7fffffe          BL       NDrv_GPIO_SetBitValue
000536  e02c              B        |L1.1426|
                  |L1.1336|
000538  e05c              B        |L1.1524|
                  |L1.1338|
00053a  e02b              B        |L1.1428|
                  |L1.1340|
;;;1020   											} 
;;;1021   											else if (usb_reg_data == 0x02)
00053c  4880              LDR      r0,|L1.1856|
00053e  7800              LDRB     r0,[r0,#0]  ; usb_reg_data
000540  2802              CMP      r0,#2
000542  d10a              BNE      |L1.1370|
;;;1022   											{
;;;1023   												TURN_ON_20R_SW1_LED(LOW);	// 2nd highest light
000544  2200              MOVS     r2,#0
000546  210d              MOVS     r1,#0xd
000548  4610              MOV      r0,r2
00054a  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;1024   												TURN_ON_39R_SW2_LED(HIGH);
00054e  2201              MOVS     r2,#1
000550  210e              MOVS     r1,#0xe
000552  2000              MOVS     r0,#0
000554  f7fffffe          BL       NDrv_GPIO_SetBitValue
000558  e01b              B        |L1.1426|
                  |L1.1370|
;;;1025   											}
;;;1026   											else if (usb_reg_data == 0x01)
00055a  4879              LDR      r0,|L1.1856|
00055c  7800              LDRB     r0,[r0,#0]  ; usb_reg_data
00055e  2801              CMP      r0,#1
000560  d10a              BNE      |L1.1400|
;;;1027   											{
;;;1028   												TURN_ON_20R_SW1_LED(HIGH);	// 3rd highest light
000562  2201              MOVS     r2,#1
000564  210d              MOVS     r1,#0xd
000566  2000              MOVS     r0,#0
000568  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;1029   												TURN_ON_39R_SW2_LED(LOW);
00056c  2200              MOVS     r2,#0
00056e  210e              MOVS     r1,#0xe
000570  4610              MOV      r0,r2
000572  f7fffffe          BL       NDrv_GPIO_SetBitValue
000576  e00c              B        |L1.1426|
                  |L1.1400|
;;;1030   											}
;;;1031   											else if (usb_reg_data == 0x00)
000578  4871              LDR      r0,|L1.1856|
00057a  7800              LDRB     r0,[r0,#0]  ; usb_reg_data
00057c  2800              CMP      r0,#0
00057e  d108              BNE      |L1.1426|
;;;1032   											{
;;;1033   												TURN_ON_20R_SW1_LED(HIGH);	// Turn off LED
000580  2201              MOVS     r2,#1
000582  210d              MOVS     r1,#0xd
000584  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;1034   												TURN_ON_39R_SW2_LED(HIGH);
000588  2201              MOVS     r2,#1
00058a  210e              MOVS     r1,#0xe
00058c  2000              MOVS     r0,#0
00058e  f7fffffe          BL       NDrv_GPIO_SetBitValue
                  |L1.1426|
;;;1035   											}
;;;1036   										break;
000592  e000              B        |L1.1430|
                  |L1.1428|
;;;1037   											
;;;1038   										default:
;;;1039   											break;
000594  bf00              NOP      
                  |L1.1430|
000596  bf00              NOP                            ;967
;;;1040   									}
;;;1041   
;;;1042   									if(ready_flash_flag == READY_TO_FLASH)
000598  486c              LDR      r0,|L1.1868|
00059a  7800              LDRB     r0,[r0,#0]  ; ready_flash_flag
00059c  2801              CMP      r0,#1
00059e  d13a              BNE      |L1.1558|
;;;1043   									{
;;;1044   										__disable_irq();
0005a0  b672              CPSID    i
;;;1045   									
;;;1046   										if(msAPI_Flash_PrepareSec(Sector_6, Sector_7) == IAP_STA_CMD_SUCCESS)
0005a2  2107              MOVS     r1,#7
0005a4  2006              MOVS     r0,#6
0005a6  f7fffffe          BL       msAPI_Flash_PrepareSec
0005aa  2800              CMP      r0,#0
0005ac  d109              BNE      |L1.1474|
;;;1047   											msAPI_Flash_CopyRAM2Flash((U32)(START_OF_FLASH_SECTOR + flash_address_offset),	// target start of flash
0005ae  4968              LDR      r1,|L1.1872|
0005b0  6809              LDR      r1,[r1,#0]  ; flash_address_offset
0005b2  2203              MOVS     r2,#3
0005b4  0352              LSLS     r2,r2,#13
0005b6  1888              ADDS     r0,r1,r2
0005b8  22ff              MOVS     r2,#0xff
0005ba  3201              ADDS     r2,#1
0005bc  4966              LDR      r1,|L1.1880|
0005be  f7fffffe          BL       msAPI_Flash_CopyRAM2Flash
                  |L1.1474|
;;;1048   																	  (U32)usbSROM,			// source 
;;;1049   																	  SROM_BUFFER_SIZE);	// package size
;;;1050   									
;;;1051   										if((flash_sector_address + flash_address_offset) < END_OF_FLASH_SECTOR)
0005c2  4864              LDR      r0,|L1.1876|
0005c4  6800              LDR      r0,[r0,#0]  ; flash_sector_address
0005c6  4962              LDR      r1,|L1.1872|
0005c8  6809              LDR      r1,[r1,#0]  ; flash_address_offset
0005ca  1840              ADDS     r0,r0,r1
0005cc  2107              MOVS     r1,#7
0005ce  0309              LSLS     r1,r1,#12
0005d0  4288              CMP      r0,r1
0005d2  d205              BCS      |L1.1504|
;;;1052   											flash_address_offset = flash_address_offset + SROM_BUFFER_SIZE;
0005d4  485e              LDR      r0,|L1.1872|
0005d6  6800              LDR      r0,[r0,#0]  ; flash_address_offset
0005d8  30ff              ADDS     r0,r0,#0xff
0005da  3001              ADDS     r0,#1
0005dc  495c              LDR      r1,|L1.1872|
0005de  6008              STR      r0,[r1,#0]  ; flash_address_offset
                  |L1.1504|
;;;1053   									
;;;1054   										memset(usbSROM, 0, SROM_BUFFER_SIZE);
0005e0  21ff              MOVS     r1,#0xff
0005e2  3101              ADDS     r1,#1
0005e4  485c              LDR      r0,|L1.1880|
0005e6  f7fffffe          BL       __aeabi_memclr4
;;;1055   	
;;;1056   										__enable_irq();
0005ea  b662              CPSIE    i
;;;1057   
;;;1058   										ready_flash_flag = FREE;
0005ec  20aa              MOVS     r0,#0xaa
0005ee  4957              LDR      r1,|L1.1868|
0005f0  7008              STRB     r0,[r1,#0]
0005f2  e010              B        |L1.1558|
                  |L1.1524|
;;;1059   									}
;;;1060   								}
;;;1061   								else if(g_USBCore_Setting.SetupPacket.bRequest == 0x01)		// sensor register
0005f4  4850              LDR      r0,|L1.1848|
0005f6  3008              ADDS     r0,r0,#8
0005f8  7840              LDRB     r0,[r0,#1]
0005fa  2801              CMP      r0,#1
0005fc  d10b              BNE      |L1.1558|
;;;1062   								{
;;;1063   									ready_flash_flag = BUSY_RW;		
0005fe  2000              MOVS     r0,#0
000600  4952              LDR      r1,|L1.1868|
000602  7008              STRB     r0,[r1,#0]
;;;1064   									nsAPI_SSP_Sensor_Write(usb_reg_addr, usb_reg_data);
000604  484e              LDR      r0,|L1.1856|
000606  7801              LDRB     r1,[r0,#0]  ; usb_reg_data
000608  484c              LDR      r0,|L1.1852|
00060a  7800              LDRB     r0,[r0,#0]  ; usb_reg_addr
00060c  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;1065   									ready_flash_flag = FREE;
000610  20aa              MOVS     r0,#0xaa
000612  494e              LDR      r1,|L1.1868|
000614  7008              STRB     r0,[r1,#0]
                  |L1.1558|
;;;1066   								}	 
;;;1067   							}
;;;1068   							break;
000616  e002              B        |L1.1566|
                  |L1.1560|
;;;1069   		
;;;1070   						case REQUEST_TO_INTERFACE:
;;;1071   							break;
000618  e001              B        |L1.1566|
                  |L1.1562|
;;;1072   		
;;;1073   						case REQUEST_TO_ENDPOINT:
;;;1074   							break;
00061a  e000              B        |L1.1566|
                  |L1.1564|
;;;1075   
;;;1076   						default:
;;;1077   							goto stall_i;
00061c  e012              B        |L1.1604|
                  |L1.1566|
00061e  bf00              NOP                            ;1068
;;;1078   					}
;;;1079   	
;;;1080   	
;;;1081   					if(g_USBCore_Setting.SetupPacket.wLength)
000620  4845              LDR      r0,|L1.1848|
000622  3008              ADDS     r0,r0,#8
000624  88c0              LDRH     r0,[r0,#6]
000626  2800              CMP      r0,#0
000628  d008              BEQ      |L1.1596|
;;;1082   					{
;;;1083   						if(g_USBCore_Setting.SetupPacket.bmRequestType.BM.Dir == REQUEST_DEVICE_TO_HOST)
00062a  4843              LDR      r0,|L1.1848|
00062c  3814              SUBS     r0,r0,#0x14
00062e  7f00              LDRB     r0,[r0,#0x1c]  ; g_USBCore_Setting
000630  09c0              LSRS     r0,r0,#7
000632  2800              CMP      r0,#0
000634  d004              BEQ      |L1.1600|
;;;1084   							nsAPI_USB_DataInStage();  // read only
000636  f7fffffe          BL       nsAPI_USB_DataInStage
00063a  e001              B        |L1.1600|
                  |L1.1596|
;;;1085   					}
;;;1086   					else
;;;1087   					{
;;;1088   						nsAPI_USB_StatusInStage();
00063c  f7fffffe          BL       nsAPI_USB_StatusInStage
                  |L1.1600|
;;;1089   					}
;;;1090   					break;
000640  e003              B        |L1.1610|
                  |L1.1602|
;;;1091   
;;;1092   
;;;1093   #if USB_VENDOR
;;;1094   				case REQUEST_VENDOR:
;;;1095   					switch(g_USBCore_Setting.SetupPacket.bmRequestType.BM.Recipient)
;;;1096   					{
;;;1097   						case REQUEST_TO_DEVICE:
;;;1098   							if(!USB_ReqVendorDev(TRUE))
;;;1099   								goto stall_i;
;;;1100   							break;
;;;1101   		
;;;1102   						case REQUEST_TO_INTERFACE:
;;;1103   							if(!USB_ReqVendorIF(TRUE))
;;;1104   								goto stall_i;
;;;1105   							break;
;;;1106   		
;;;1107   						case REQUEST_TO_ENDPOINT:
;;;1108   							if(!USB_ReqVendorEP(TRUE))
;;;1109   								goto stall_i;
;;;1110   							break;
;;;1111   		
;;;1112   						default:
;;;1113   							goto stall_i;
;;;1114   					}
;;;1115   
;;;1116   					if(g_USBCore_Setting.SetupPacket.wLength)
;;;1117   					{
;;;1118   						if(g_USBCore_Setting.SetupPacket.bmRequestType.BM.Dir == REQUEST_DEVICE_TO_HOST)
;;;1119   							nsAPI_USB_DataInStage();
;;;1120   					}
;;;1121   					else
;;;1122   					{
;;;1123   						nsAPI_USB_StatusInStage();
;;;1124   					}
;;;1125   					break;
;;;1126   #endif
;;;1127   
;;;1128   				default:
;;;1129   stall_i:
000642  bf00              NOP      
                  |L1.1604|
;;;1130   					nsAPI_USBCore_Stall_i();
000644  f7fffffe          BL       nsAPI_USBCore_Stall_i
;;;1131   					break;
000648  bf00              NOP      
                  |L1.1610|
00064a  bf00              NOP                            ;799
                  |L1.1612|
;;;1132   			}
;;;1133   			break;
00064c  e072              B        |L1.1844|
;;;1134   
;;;1135   		case USB_EVT_OUT:
;;;1136   			if(g_USBCore_Setting.SetupPacket.bmRequestType.BM.Dir == REQUEST_HOST_TO_DEVICE)
00064e  483a              LDR      r0,|L1.1848|
000650  3814              SUBS     r0,r0,#0x14
000652  7f00              LDRB     r0,[r0,#0x1c]  ; g_USBCore_Setting
000654  09c0              LSRS     r0,r0,#7
000656  2800              CMP      r0,#0
000658  d145              BNE      |L1.1766|
;;;1137   			{
;;;1138   				if(g_USBCore_Setting.EP0Data.Count)				// still data to receive ?
00065a  4837              LDR      r0,|L1.1848|
00065c  8880              LDRH     r0,[r0,#4]
00065e  2800              CMP      r0,#0
000660  d043              BEQ      |L1.1770|
;;;1139   				{
;;;1140   					nsAPI_USB_DataOutStage();					// receive data
000662  f7fffffe          BL       nsAPI_USB_DataOutStage
;;;1141   
;;;1142   					if(g_USBCore_Setting.EP0Data.Count == 0)	// data complete ?
000666  4834              LDR      r0,|L1.1848|
000668  8880              LDRH     r0,[r0,#4]
00066a  2800              CMP      r0,#0
00066c  d13d              BNE      |L1.1770|
;;;1143   					{
;;;1144   						switch(g_USBCore_Setting.SetupPacket.bmRequestType.BM.Type)
00066e  4832              LDR      r0,|L1.1848|
000670  3814              SUBS     r0,r0,#0x14
000672  7f00              LDRB     r0,[r0,#0x1c]  ; g_USBCore_Setting
000674  0640              LSLS     r0,r0,#25
000676  0f80              LSRS     r0,r0,#30
000678  2800              CMP      r0,#0
00067a  d002              BEQ      |L1.1666|
00067c  2801              CMP      r0,#1
00067e  d12e              BNE      |L1.1758|
000680  e002              B        |L1.1672|
                  |L1.1666|
;;;1145   						{
;;;1146   							case REQUEST_STANDARD:
;;;1147   #if 0
;;;1148   								goto stall_i;
;;;1149   #else
;;;1150   								nsAPI_USBCore_Stall_i();
000682  f7fffffe          BL       nsAPI_USBCore_Stall_i
;;;1151   								break;
000686  e02d              B        |L1.1764|
                  |L1.1672|
;;;1152   #endif
;;;1153   #if (USB_CLASS)
;;;1154   							case REQUEST_CLASS:
;;;1155   								switch(g_USBCore_Setting.SetupPacket.bmRequestType.BM.Recipient)
000688  482b              LDR      r0,|L1.1848|
00068a  3814              SUBS     r0,r0,#0x14
00068c  7f00              LDRB     r0,[r0,#0x1c]  ; g_USBCore_Setting
00068e  06c0              LSLS     r0,r0,#27
000690  0ec0              LSRS     r0,r0,#27
000692  2800              CMP      r0,#0
000694  d004              BEQ      |L1.1696|
000696  2801              CMP      r0,#1
000698  d005              BEQ      |L1.1702|
00069a  2802              CMP      r0,#2
00069c  d117              BNE      |L1.1742|
00069e  e017              B        |L1.1744|
                  |L1.1696|
;;;1156   								{
;;;1157   									case REQUEST_TO_DEVICE:
;;;1158   #if 0
;;;1159   										goto stall_i;
;;;1160   #else
;;;1161   										nsAPI_USBCore_Stall_i();
0006a0  f7fffffe          BL       nsAPI_USBCore_Stall_i
;;;1162   										break;
0006a4  e019              B        |L1.1754|
                  |L1.1702|
;;;1163   #endif
;;;1164   									case REQUEST_TO_INTERFACE:
;;;1165   #if USB_HID
;;;1166   										if(g_USBCore_Setting.SetupPacket.wIndex.WB.L == USB_HID_IF_NUM)	// if number correct?
0006a6  4824              LDR      r0,|L1.1848|
0006a8  3008              ADDS     r0,r0,#8
0006aa  7900              LDRB     r0,[r0,#4]
0006ac  2800              CMP      r0,#0
0006ae  d10d              BNE      |L1.1740|
;;;1167   										{
;;;1168   											switch(g_USBCore_Setting.SetupPacket.bRequest)
0006b0  4821              LDR      r0,|L1.1848|
0006b2  3008              ADDS     r0,r0,#8
0006b4  7840              LDRB     r0,[r0,#1]
0006b6  2809              CMP      r0,#9
0006b8  d107              BNE      |L1.1738|
;;;1169   											{
;;;1170   												case HID_REQUEST_SET_REPORT:
;;;1171   													if(HID_SetReport())
0006ba  f7fffffe          BL       HID_SetReport
0006be  2800              CMP      r0,#0
0006c0  d002              BEQ      |L1.1736|
;;;1172   													{
;;;1173   														nsAPI_USB_StatusInStage();	// send Acknowledge
0006c2  f7fffffe          BL       nsAPI_USB_StatusInStage
;;;1174   														bOutClassOk = TRUE;
0006c6  2601              MOVS     r6,#1
                  |L1.1736|
;;;1175   													}
;;;1176   													break;
0006c8  bf00              NOP      
                  |L1.1738|
0006ca  bf00              NOP      
                  |L1.1740|
;;;1177   											}
;;;1178   										}
;;;1179   #endif
;;;1180   
;;;1181   									case REQUEST_TO_ENDPOINT:
0006cc  bf00              NOP      
                  |L1.1742|
0006ce  bf00              NOP      
                  |L1.1744|
;;;1182   									default:
;;;1183   										if(!bOutClassOk)
0006d0  2e00              CMP      r6,#0
0006d2  d101              BNE      |L1.1752|
;;;1184   											nsAPI_USBCore_Stall_i();
0006d4  f7fffffe          BL       nsAPI_USBCore_Stall_i
                  |L1.1752|
0006d8  bf00              NOP                            ;1155
                  |L1.1754|
0006da  bf00              NOP                            ;1162
;;;1185   								}
;;;1186   out_class_ok:
;;;1187   								break;
0006dc  e002              B        |L1.1764|
                  |L1.1758|
;;;1188   #endif
;;;1189   #if USB_VENDOR
;;;1190   							case REQUEST_VENDOR:
;;;1191   								switch(g_USBCore_Setting.SetupPacket.bmRequestType.BM.Recipient)
;;;1192   								{
;;;1193   									case REQUEST_TO_DEVICE:
;;;1194   										if(!USB_ReqVendorDev(FALSE))
;;;1195   											goto stall_i;
;;;1196   										break;
;;;1197   		
;;;1198   									case REQUEST_TO_INTERFACE:
;;;1199   										if(!USB_ReqVendorIF(FALSE))
;;;1200   											goto stall_i;
;;;1201   										break;
;;;1202   		
;;;1203   									case REQUEST_TO_ENDPOINT:
;;;1204   										if(!USB_ReqVendorEP(FALSE))
;;;1205   											goto stall_i;
;;;1206   										break;
;;;1207   									
;;;1208   									default:
;;;1209   										goto stall_i;
;;;1210   								}
;;;1211   
;;;1212   								nsAPI_USB_StatusInStage();
;;;1213   								break;
;;;1214   #endif
;;;1215   							default:
;;;1216   #if 0
;;;1217   								goto stall_i;
;;;1218   #else
;;;1219   								nsAPI_USBCore_Stall_i();
0006de  f7fffffe          BL       nsAPI_USBCore_Stall_i
;;;1220   								break;
0006e2  bf00              NOP      
                  |L1.1764|
0006e4  e001              B        |L1.1770|
                  |L1.1766|
;;;1221   #endif
;;;1222   						}
;;;1223   					}
;;;1224   				}
;;;1225   			}
;;;1226   			else
;;;1227   			{
;;;1228   				nsAPI_USB_StatusOutStage();	// receive Acknowledge
0006e6  f7fffffe          BL       nsAPI_USB_StatusOutStage
                  |L1.1770|
;;;1229   			}
;;;1230   			break;
0006ea  e023              B        |L1.1844|
;;;1231   
;;;1232   		case USB_EVT_IN:
;;;1233   			if(g_USBCore_Setting.SetupPacket.bmRequestType.BM.Dir == REQUEST_DEVICE_TO_HOST)
0006ec  4812              LDR      r0,|L1.1848|
0006ee  3814              SUBS     r0,r0,#0x14
0006f0  7f00              LDRB     r0,[r0,#0x1c]  ; g_USBCore_Setting
0006f2  09c0              LSRS     r0,r0,#7
0006f4  2800              CMP      r0,#0
0006f6  d002              BEQ      |L1.1790|
;;;1234   			{
;;;1235   				nsAPI_USB_DataInStage();	// send data
0006f8  f7fffffe          BL       nsAPI_USB_DataInStage
0006fc  e011              B        |L1.1826|
                  |L1.1790|
;;;1236   			}
;;;1237   			else
;;;1238   			{
;;;1239   				if(g_USBCore_Setting.USB_DeviceAddress & 0x80)
0006fe  480e              LDR      r0,|L1.1848|
000700  3854              SUBS     r0,r0,#0x54
000702  78c0              LDRB     r0,[r0,#3]  ; g_USBCore_Setting
000704  2180              MOVS     r1,#0x80
000706  4008              ANDS     r0,r0,r1
000708  2800              CMP      r0,#0
00070a  d00a              BEQ      |L1.1826|
;;;1240   				{
;;;1241   					g_USBCore_Setting.USB_DeviceAddress &= 0x7F;
00070c  480a              LDR      r0,|L1.1848|
00070e  3854              SUBS     r0,r0,#0x54
000710  78c0              LDRB     r0,[r0,#3]  ; g_USBCore_Setting
000712  0640              LSLS     r0,r0,#25
000714  0e40              LSRS     r0,r0,#25
000716  4908              LDR      r1,|L1.1848|
000718  3954              SUBS     r1,r1,#0x54
00071a  70c8              STRB     r0,[r1,#3]
;;;1242   					nsAPI_USB_SetAddress(g_USBCore_Setting.USB_DeviceAddress);
00071c  78c8              LDRB     r0,[r1,#3]  ; g_USBCore_Setting
00071e  f7fffffe          BL       nsAPI_USB_SetAddress
                  |L1.1826|
;;;1243   				}
;;;1244   			}
;;;1245   			break;
000722  e007              B        |L1.1844|
;;;1246   
;;;1247   		case USB_EVT_OUT_STALL:
;;;1248   			nsAPI_USB_ClrStallEP(0x00);
000724  2000              MOVS     r0,#0
000726  f7fffffe          BL       nsAPI_USB_ClrStallEP
;;;1249   			break;
00072a  e003              B        |L1.1844|
;;;1250   
;;;1251   		case USB_EVT_IN_STALL:
;;;1252   			nsAPI_USB_ClrStallEP(0x80);
00072c  2080              MOVS     r0,#0x80
00072e  f7fffffe          BL       nsAPI_USB_ClrStallEP
;;;1253   			break;
000732  bf00              NOP      
                  |L1.1844|
000734  bf00              NOP                            ;1133
;;;1254   	}
;;;1255   }
000736  bd70              POP      {r4-r6,pc}
;;;1256   
                          ENDP

                  |L1.1848|
                          DCD      g_USBCore_Setting+0x54
                  |L1.1852|
                          DCD      usb_reg_addr
                  |L1.1856|
                          DCD      usb_reg_data
                  |L1.1860|
                          DCD      mouse_event_ctrl
                  |L1.1864|
                          DCD      sromCntr
                  |L1.1868|
                          DCD      ready_flash_flag
                  |L1.1872|
                          DCD      flash_address_offset
                  |L1.1876|
                          DCD      flash_sector_address
                  |L1.1880|
                          DCD      usbSROM

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_USBCore_Setting
                          %        100
                  usbSROM
                          %        256

                          AREA ||.data||, DATA, ALIGN=2

                  usb_reg_addr
000000  00                DCB      0x00
                  usb_reg_data
000001  00                DCB      0x00
                  ready_flash_flag
000002  0000              DCB      0x00,0x00
                  sromCntr
000004  0000              DCW      0x0000
000006  0000              DCB      0x00,0x00
                  flash_sector_address
                          DCD      0x00000000
                  flash_address_offset
                          DCD      0x00000000

                          AREA ||i.nsAPI_USB_ReqGetStatus||, COMGROUP=nsAPI_USB_ReqGetStatus, CODE, READONLY, ALIGN=2

                  nsAPI_USB_ReqGetStatus PROC
;;;126    //----------------------------------------------------------------------------
;;;127    __inline Boolean nsAPI_USB_ReqGetStatus(void)
000000  482f              LDR      r0,|L17.192|
;;;128    {
;;;129    	U32 n, m;
;;;130    
;;;131    	switch(g_USBCore_Setting.SetupPacket.bmRequestType.BM.Recipient)
000002  7f00              LDRB     r0,[r0,#0x1c]  ; g_USBCore_Setting
000004  06c0              LSLS     r0,r0,#27
000006  0ec0              LSRS     r0,r0,#27
000008  2800              CMP      r0,#0
00000a  d004              BEQ      |L17.22|
00000c  2801              CMP      r0,#1
00000e  d007              BEQ      |L17.32|
000010  2802              CMP      r0,#2
000012  d14f              BNE      |L17.180|
000014  e01b              B        |L17.78|
                  |L17.22|
;;;132    	{
;;;133    		case REQUEST_TO_DEVICE:
;;;134    			g_USBCore_Setting.EP0Data.pData = (U8 *)&g_USBCore_Setting.USB_DeviceStatus;
000016  482a              LDR      r0,|L17.192|
000018  3840              SUBS     r0,r0,#0x40
00001a  4603              MOV      r3,r0
00001c  6558              STR      r0,[r3,#0x54]  ; g_USBCore_Setting
;;;135    			break;
00001e  e04b              B        |L17.184|
                  |L17.32|
;;;136    
;;;137    		case REQUEST_TO_INTERFACE:
;;;138    			if((g_USBCore_Setting.USB_Configuration != 0) && (g_USBCore_Setting.SetupPacket.wIndex.WB.L < g_USBCore_Setting.USB_NumInterfaces))
000020  4827              LDR      r0,|L17.192|
000022  3840              SUBS     r0,r0,#0x40
000024  7900              LDRB     r0,[r0,#4]  ; g_USBCore_Setting
000026  2800              CMP      r0,#0
000028  d00e              BEQ      |L17.72|
00002a  4825              LDR      r0,|L17.192|
00002c  301c              ADDS     r0,r0,#0x1c
00002e  7900              LDRB     r0,[r0,#4]
000030  4b23              LDR      r3,|L17.192|
000032  3b40              SUBS     r3,r3,#0x40
000034  789b              LDRB     r3,[r3,#2]  ; g_USBCore_Setting
000036  4298              CMP      r0,r3
000038  da06              BGE      |L17.72|
;;;139    			{
;;;140    				*((__packed U16 *)g_USBCore_Setting.EP0Buf) = 0;
00003a  2000              MOVS     r0,#0
00003c  4b20              LDR      r3,|L17.192|
00003e  3b40              SUBS     r3,r3,#0x40
000040  80d8              STRH     r0,[r3,#6]
;;;141    				g_USBCore_Setting.EP0Data.pData = g_USBCore_Setting.EP0Buf;
000042  1d98              ADDS     r0,r3,#6
000044  6558              STR      r0,[r3,#0x54]  ; g_USBCore_Setting
000046  e001              B        |L17.76|
                  |L17.72|
;;;142    			}
;;;143    			else
;;;144    				return (FALSE);
000048  2000              MOVS     r0,#0
                  |L17.74|
;;;145    			break;
;;;146    
;;;147    		case REQUEST_TO_ENDPOINT:
;;;148    			n = g_USBCore_Setting.SetupPacket.wIndex.WB.L & 0x8F;
;;;149    			m = (n & 0x80) ? ((1 << 16) << (n & 0x0F)) : (1 << n);
;;;150    	
;;;151    			if(((g_USBCore_Setting.USB_Configuration != 0) || ((n & 0x0F) == 0)) && (g_USBCore_Setting.USB_EndPointMask & m))
;;;152    			{
;;;153    				*((__packed U16 *)g_USBCore_Setting.EP0Buf) = (g_USBCore_Setting.USB_EndPointHalt & m) ? 1 : 0;
;;;154    				g_USBCore_Setting.EP0Data.pData = g_USBCore_Setting.EP0Buf;
;;;155    			}
;;;156    			else
;;;157    			{
;;;158    				return (FALSE);
;;;159    			}
;;;160    			break;
;;;161    
;;;162    		default:
;;;163    			return (FALSE);
;;;164    	}
;;;165    
;;;166    	return (TRUE);
;;;167    }
00004a  4770              BX       lr
                  |L17.76|
00004c  e034              B        |L17.184|
                  |L17.78|
00004e  481c              LDR      r0,|L17.192|
000050  301c              ADDS     r0,r0,#0x1c           ;148
000052  7901              LDRB     r1,[r0,#4]            ;148
000054  238f              MOVS     r3,#0x8f              ;148
000056  4019              ANDS     r1,r1,r3              ;148
000058  2080              MOVS     r0,#0x80              ;149
00005a  4008              ANDS     r0,r0,r1              ;149
00005c  2800              CMP      r0,#0                 ;149
00005e  d005              BEQ      |L17.108|
000060  070b              LSLS     r3,r1,#28             ;149
000062  0f1b              LSRS     r3,r3,#28             ;149
000064  2001              MOVS     r0,#1                 ;149
000066  0400              LSLS     r0,r0,#16             ;149
000068  4098              LSLS     r0,r0,r3              ;149
00006a  e001              B        |L17.112|
                  |L17.108|
00006c  2001              MOVS     r0,#1                 ;149
00006e  4088              LSLS     r0,r0,r1              ;149
                  |L17.112|
000070  4602              MOV      r2,r0                 ;149
000072  4813              LDR      r0,|L17.192|
000074  3840              SUBS     r0,r0,#0x40           ;151
000076  7900              LDRB     r0,[r0,#4]            ;151  ; g_USBCore_Setting
000078  2800              CMP      r0,#0                 ;151
00007a  d103              BNE      |L17.132|
00007c  0708              LSLS     r0,r1,#28             ;151
00007e  0f00              LSRS     r0,r0,#28             ;151
000080  2800              CMP      r0,#0                 ;151
000082  d114              BNE      |L17.174|
                  |L17.132|
000084  480e              LDR      r0,|L17.192|
000086  3840              SUBS     r0,r0,#0x40           ;151
000088  6c80              LDR      r0,[r0,#0x48]         ;151  ; g_USBCore_Setting
00008a  4010              ANDS     r0,r0,r2              ;151
00008c  2800              CMP      r0,#0                 ;151
00008e  d00e              BEQ      |L17.174|
000090  480b              LDR      r0,|L17.192|
000092  3840              SUBS     r0,r0,#0x40           ;153
000094  6cc0              LDR      r0,[r0,#0x4c]         ;153  ; g_USBCore_Setting
000096  4010              ANDS     r0,r0,r2              ;153
000098  2800              CMP      r0,#0                 ;153
00009a  d001              BEQ      |L17.160|
00009c  2001              MOVS     r0,#1                 ;153
00009e  e000              B        |L17.162|
                  |L17.160|
0000a0  2000              MOVS     r0,#0                 ;153
                  |L17.162|
0000a2  4b07              LDR      r3,|L17.192|
0000a4  3b40              SUBS     r3,r3,#0x40           ;153
0000a6  80d8              STRH     r0,[r3,#6]            ;153
0000a8  1d98              ADDS     r0,r3,#6              ;154
0000aa  6558              STR      r0,[r3,#0x54]         ;154  ; g_USBCore_Setting
0000ac  e001              B        |L17.178|
                  |L17.174|
0000ae  2000              MOVS     r0,#0                 ;158
0000b0  e7cb              B        |L17.74|
                  |L17.178|
0000b2  e001              B        |L17.184|
                  |L17.180|
0000b4  2000              MOVS     r0,#0                 ;163
0000b6  e7c8              B        |L17.74|
                  |L17.184|
0000b8  bf00              NOP                            ;135
0000ba  2001              MOVS     r0,#1                 ;166
0000bc  e7c5              B        |L17.74|
;;;168    
                          ENDP

0000be  0000              DCW      0x0000
                  |L17.192|
                          DCD      g_USBCore_Setting+0x40

                          AREA ||i.nsAPI_USB_ReqSetClrFeature||, COMGROUP=nsAPI_USB_ReqSetClrFeature, CODE, READONLY, ALIGN=2

                  nsAPI_USB_ReqSetClrFeature PROC
;;;172    //----------------------------------------------------------------------------
;;;173    __inline Boolean nsAPI_USB_ReqSetClrFeature(U32 sc)
000000  b570              PUSH     {r4-r6,lr}
;;;174    {
000002  4606              MOV      r6,r0
;;;175    	U32 n, m;
;;;176    
;;;177    	switch(g_USBCore_Setting.SetupPacket.bmRequestType.BM.Recipient)
000004  483f              LDR      r0,|L24.260|
000006  7f00              LDRB     r0,[r0,#0x1c]  ; g_USBCore_Setting
000008  06c0              LSLS     r0,r0,#27
00000a  0ec0              LSRS     r0,r0,#27
00000c  2800              CMP      r0,#0
00000e  d004              BEQ      |L24.26|
000010  2801              CMP      r0,#1
000012  d023              BEQ      |L24.92|
000014  2802              CMP      r0,#2
000016  d16f              BNE      |L24.248|
000018  e022              B        |L24.96|
                  |L24.26|
;;;178    	{
;;;179    		case REQUEST_TO_DEVICE:
;;;180    			if(g_USBCore_Setting.SetupPacket.wValue.W == USB_FEATURE_REMOTE_WAKEUP)
00001a  483a              LDR      r0,|L24.260|
00001c  301c              ADDS     r0,r0,#0x1c
00001e  8840              LDRH     r0,[r0,#2]
000020  2801              CMP      r0,#1
000022  d118              BNE      |L24.86|
;;;181    			{
;;;182    				if(sc)
000024  2e00              CMP      r6,#0
000026  d00a              BEQ      |L24.62|
;;;183    				{
;;;184    					NDrv_USB_WakeUpCfg(TRUE);
000028  f7fffffe          BL       NDrv_USB_WakeUpCfg
;;;185    					g_USBCore_Setting.USB_DeviceStatus |=  USB_GETSTATUS_REMOTE_WAKEUP;
00002c  4835              LDR      r0,|L24.260|
00002e  3840              SUBS     r0,r0,#0x40
000030  8800              LDRH     r0,[r0,#0]  ; g_USBCore_Setting
000032  2102              MOVS     r1,#2
000034  4308              ORRS     r0,r0,r1
000036  4933              LDR      r1,|L24.260|
000038  3940              SUBS     r1,r1,#0x40
00003a  8008              STRH     r0,[r1,#0]
00003c  e00d              B        |L24.90|
                  |L24.62|
;;;186    				}
;;;187    				else
;;;188    				{
;;;189    					NDrv_USB_WakeUpCfg(FALSE);
00003e  2000              MOVS     r0,#0
000040  f7fffffe          BL       NDrv_USB_WakeUpCfg
;;;190    					g_USBCore_Setting.USB_DeviceStatus &= ~USB_GETSTATUS_REMOTE_WAKEUP;
000044  482f              LDR      r0,|L24.260|
000046  3840              SUBS     r0,r0,#0x40
000048  8800              LDRH     r0,[r0,#0]  ; g_USBCore_Setting
00004a  2102              MOVS     r1,#2
00004c  4388              BICS     r0,r0,r1
00004e  492d              LDR      r1,|L24.260|
000050  3940              SUBS     r1,r1,#0x40
000052  8008              STRH     r0,[r1,#0]
000054  e001              B        |L24.90|
                  |L24.86|
;;;191    				}
;;;192    			}
;;;193    			else
;;;194    			{
;;;195    				return (FALSE);
000056  2000              MOVS     r0,#0
                  |L24.88|
;;;196    			}
;;;197    			break;
;;;198    
;;;199    		case REQUEST_TO_INTERFACE:
;;;200    			return (FALSE);
;;;201    
;;;202    		case REQUEST_TO_ENDPOINT:
;;;203    			n = g_USBCore_Setting.SetupPacket.wIndex.WB.L & 0x8F;
;;;204    			m = (n & 0x80) ? ((1 << 16) << (n & 0x0F)) : (1 << n);
;;;205    	
;;;206    			if((g_USBCore_Setting.USB_Configuration != 0) && ((n & 0x0F) != 0) && (g_USBCore_Setting.USB_EndPointMask & m))
;;;207    			{
;;;208    				if(g_USBCore_Setting.SetupPacket.wValue.W == USB_FEATURE_ENDPOINT_STALL)
;;;209    				{
;;;210    					if(sc)
;;;211    					{
;;;212    						nsAPI_USB_SetStallEP(n);
;;;213    						g_USBCore_Setting.USB_EndPointHalt |=  m;
;;;214    					}
;;;215    					else
;;;216    					{
;;;217    						if((g_USBCore_Setting.USB_EndPointStall & m) != 0)
;;;218    							return (TRUE);
;;;219    						
;;;220    						nsAPI_USB_ClrStallEP(n);
;;;221    						g_USBCore_Setting.USB_EndPointHalt &= ~m;
;;;222    					}
;;;223    				}
;;;224    				else
;;;225    				{
;;;226    					return (FALSE);
;;;227    				}
;;;228    			}
;;;229    			else
;;;230    		  	{
;;;231    				return (FALSE);
;;;232    			}
;;;233    			break;
;;;234    
;;;235    		default:
;;;236    			return (FALSE);
;;;237    	}
;;;238    
;;;239    	return (TRUE);
;;;240    }
000058  bd70              POP      {r4-r6,pc}
                  |L24.90|
00005a  e04f              B        |L24.252|
                  |L24.92|
00005c  2000              MOVS     r0,#0                 ;200
00005e  e7fb              B        |L24.88|
                  |L24.96|
000060  4828              LDR      r0,|L24.260|
000062  301c              ADDS     r0,r0,#0x1c           ;203
000064  7904              LDRB     r4,[r0,#4]            ;203
000066  218f              MOVS     r1,#0x8f              ;203
000068  400c              ANDS     r4,r4,r1              ;203
00006a  2080              MOVS     r0,#0x80              ;204
00006c  4020              ANDS     r0,r0,r4              ;204
00006e  2800              CMP      r0,#0                 ;204
000070  d005              BEQ      |L24.126|
000072  0721              LSLS     r1,r4,#28             ;204
000074  0f09              LSRS     r1,r1,#28             ;204
000076  2001              MOVS     r0,#1                 ;204
000078  0400              LSLS     r0,r0,#16             ;204
00007a  4088              LSLS     r0,r0,r1              ;204
00007c  e001              B        |L24.130|
                  |L24.126|
00007e  2001              MOVS     r0,#1                 ;204
000080  40a0              LSLS     r0,r0,r4              ;204
                  |L24.130|
000082  4605              MOV      r5,r0                 ;204
000084  481f              LDR      r0,|L24.260|
000086  3840              SUBS     r0,r0,#0x40           ;206
000088  7900              LDRB     r0,[r0,#4]            ;206  ; g_USBCore_Setting
00008a  2800              CMP      r0,#0                 ;206
00008c  d030              BEQ      |L24.240|
00008e  0720              LSLS     r0,r4,#28             ;206
000090  0f00              LSRS     r0,r0,#28             ;206
000092  2800              CMP      r0,#0                 ;206
000094  d02c              BEQ      |L24.240|
000096  481b              LDR      r0,|L24.260|
000098  3840              SUBS     r0,r0,#0x40           ;206
00009a  6c80              LDR      r0,[r0,#0x48]         ;206  ; g_USBCore_Setting
00009c  4028              ANDS     r0,r0,r5              ;206
00009e  2800              CMP      r0,#0                 ;206
0000a0  d026              BEQ      |L24.240|
0000a2  4818              LDR      r0,|L24.260|
0000a4  301c              ADDS     r0,r0,#0x1c           ;208
0000a6  8840              LDRH     r0,[r0,#2]            ;208
0000a8  2800              CMP      r0,#0                 ;208
0000aa  d11f              BNE      |L24.236|
0000ac  2e00              CMP      r6,#0                 ;210
0000ae  d00a              BEQ      |L24.198|
0000b0  4620              MOV      r0,r4                 ;212
0000b2  f7fffffe          BL       nsAPI_USB_SetStallEP
0000b6  4813              LDR      r0,|L24.260|
0000b8  3840              SUBS     r0,r0,#0x40           ;213
0000ba  6cc0              LDR      r0,[r0,#0x4c]         ;213  ; g_USBCore_Setting
0000bc  4328              ORRS     r0,r0,r5              ;213
0000be  4911              LDR      r1,|L24.260|
0000c0  3940              SUBS     r1,r1,#0x40           ;213
0000c2  64c8              STR      r0,[r1,#0x4c]         ;213  ; g_USBCore_Setting
0000c4  e016              B        |L24.244|
                  |L24.198|
0000c6  480f              LDR      r0,|L24.260|
0000c8  3840              SUBS     r0,r0,#0x40           ;217
0000ca  6d00              LDR      r0,[r0,#0x50]         ;217  ; g_USBCore_Setting
0000cc  4028              ANDS     r0,r0,r5              ;217
0000ce  2800              CMP      r0,#0                 ;217
0000d0  d001              BEQ      |L24.214|
0000d2  2001              MOVS     r0,#1                 ;218
0000d4  e7c0              B        |L24.88|
                  |L24.214|
0000d6  4620              MOV      r0,r4                 ;220
0000d8  f7fffffe          BL       nsAPI_USB_ClrStallEP
0000dc  4809              LDR      r0,|L24.260|
0000de  3840              SUBS     r0,r0,#0x40           ;221
0000e0  6cc0              LDR      r0,[r0,#0x4c]         ;221  ; g_USBCore_Setting
0000e2  43a8              BICS     r0,r0,r5              ;221
0000e4  4907              LDR      r1,|L24.260|
0000e6  3940              SUBS     r1,r1,#0x40           ;221
0000e8  64c8              STR      r0,[r1,#0x4c]         ;221  ; g_USBCore_Setting
0000ea  e003              B        |L24.244|
                  |L24.236|
0000ec  2000              MOVS     r0,#0                 ;226
0000ee  e7b3              B        |L24.88|
                  |L24.240|
0000f0  2000              MOVS     r0,#0                 ;231
0000f2  e7b1              B        |L24.88|
                  |L24.244|
0000f4  e002              B        |L24.252|
0000f6  e7ff              B        |L24.248|
                  |L24.248|
0000f8  2000              MOVS     r0,#0                 ;236
0000fa  e7ad              B        |L24.88|
                  |L24.252|
0000fc  bf00              NOP                            ;197
0000fe  2001              MOVS     r0,#1                 ;239
000100  e7aa              B        |L24.88|
;;;241    
                          ENDP

000102  0000              DCW      0x0000
                  |L24.260|
                          DCD      g_USBCore_Setting+0x40

                          AREA ||i.nsAPI_USB_ReqGetDescriptor||, COMGROUP=nsAPI_USB_ReqGetDescriptor, CODE, READONLY, ALIGN=2

                  nsAPI_USB_ReqGetDescriptor PROC
;;;264    //----------------------------------------------------------------------------
;;;265    __inline Boolean nsAPI_USB_ReqGetDescriptor(void)
000000  b510              PUSH     {r4,lr}
;;;266    {
;;;267    	U8 *pD;
;;;268    	U32 len, n;
;;;269    
;;;270    	switch(g_USBCore_Setting.SetupPacket.bmRequestType.BM.Recipient)
000002  4846              LDR      r0,|L31.284|
000004  7f00              LDRB     r0,[r0,#0x1c]  ; g_USBCore_Setting
000006  06c0              LSLS     r0,r0,#27
000008  0ec0              LSRS     r0,r0,#27
00000a  2800              CMP      r0,#0
00000c  d002              BEQ      |L31.20|
00000e  2801              CMP      r0,#1
000010  d177              BNE      |L31.258|
000012  e048              B        |L31.166|
                  |L31.20|
;;;271    	{
;;;272    		case REQUEST_TO_DEVICE:
;;;273    			switch(g_USBCore_Setting.SetupPacket.wValue.WB.H)
000014  4841              LDR      r0,|L31.284|
000016  301c              ADDS     r0,r0,#0x1c
000018  78c0              LDRB     r0,[r0,#3]
00001a  2801              CMP      r0,#1
00001c  d004              BEQ      |L31.40|
00001e  2802              CMP      r0,#2
000020  d008              BEQ      |L31.52|
000022  2803              CMP      r0,#3
000024  d13b              BNE      |L31.158|
000026  e022              B        |L31.110|
                  |L31.40|
;;;274    			{
;;;275    				case USB_DEVICE_DESCRIPTOR_TYPE:
;;;276    					g_USBCore_Setting.EP0Data.pData = (U8 *)USB_DeviceDescriptor;
000028  483d              LDR      r0,|L31.288|
00002a  4c3c              LDR      r4,|L31.284|
00002c  3c40              SUBS     r4,r4,#0x40
00002e  6560              STR      r0,[r4,#0x54]  ; g_USBCore_Setting
;;;277    					len = USB_DEVICE_DESC_SIZE;
000030  2212              MOVS     r2,#0x12
;;;278    					break;
000032  e036              B        |L31.162|
                  |L31.52|
;;;279    
;;;280    				case USB_CONFIGURATION_DESCRIPTOR_TYPE:
;;;281    					pD = (U8 *)USB_ConfigDescriptor;
000034  493b              LDR      r1,|L31.292|
;;;282    					for(n = 0; n != g_USBCore_Setting.SetupPacket.wValue.WB.L; n++)
000036  2300              MOVS     r3,#0
000038  e008              B        |L31.76|
                  |L31.58|
;;;283    						if(((USB_CONFIGURATION_DESCRIPTOR *)pD)->bLength != 0)
00003a  7808              LDRB     r0,[r1,#0]
00003c  2800              CMP      r0,#0
00003e  d004              BEQ      |L31.74|
;;;284    							pD += ((USB_CONFIGURATION_DESCRIPTOR *)pD)->wTotalLength;
000040  78c8              LDRB     r0,[r1,#3]
000042  788c              LDRB     r4,[r1,#2]
000044  0200              LSLS     r0,r0,#8
000046  4320              ORRS     r0,r0,r4
000048  1809              ADDS     r1,r1,r0
                  |L31.74|
00004a  1c5b              ADDS     r3,r3,#1              ;282
                  |L31.76|
00004c  4833              LDR      r0,|L31.284|
00004e  301c              ADDS     r0,r0,#0x1c           ;282
000050  7880              LDRB     r0,[r0,#2]            ;282
000052  4298              CMP      r0,r3                 ;282
000054  d1f1              BNE      |L31.58|
;;;285    
;;;286    					if(((USB_CONFIGURATION_DESCRIPTOR *)pD)->bLength == 0)
000056  7808              LDRB     r0,[r1,#0]
000058  2800              CMP      r0,#0
00005a  d100              BNE      |L31.94|
                  |L31.92|
;;;287    						return (FALSE);
;;;288    
;;;289    					g_USBCore_Setting.EP0Data.pData = pD;
;;;290    					len = ((USB_CONFIGURATION_DESCRIPTOR *)pD)->wTotalLength;
;;;291    					break;
;;;292    
;;;293    #if LPM_SUPPORT
;;;294    				case USB_BOS_TYPE:
;;;295    					pD = (uint8_t *)USB_BOSDescriptor;
;;;296    					for(n = 0; n != g_USBCore_Setting.SetupPacket.wValue.WB.L; n++)
;;;297    						if(((USB_BOS_DESCRIPTOR *)pD)->bLength != 0)
;;;298    							pD += ((USB_BOS_DESCRIPTOR *)pD)->wTotalLength;
;;;299    
;;;300    					if(((USB_BOS_DESCRIPTOR *)pD)->bLength == 0)
;;;301    						return (FALSE);
;;;302    
;;;303    					g_USBCore_Setting.EP0Data.pData = pD;
;;;304    					len = ((USB_BOS_DESCRIPTOR *)pD)->wTotalLength;
;;;305    					break;
;;;306    #endif
;;;307    
;;;308    				case USB_STRING_DESCRIPTOR_TYPE:
;;;309    					pD = (uint8_t *)USB_StringDescriptor;
;;;310    					for(n = 0; n != g_USBCore_Setting.SetupPacket.wValue.WB.L; n++)
;;;311    						if(((USB_STRING_DESCRIPTOR *)pD)->bLength != 0)
;;;312    							pD += ((USB_STRING_DESCRIPTOR *)pD)->bLength;
;;;313    
;;;314    					if(((USB_STRING_DESCRIPTOR *)pD)->bLength == 0)
;;;315    						return (FALSE);
;;;316    
;;;317    					g_USBCore_Setting.EP0Data.pData = pD;
;;;318    					len = ((USB_STRING_DESCRIPTOR *)g_USBCore_Setting.EP0Data.pData)->bLength;
;;;319    					break;
;;;320    			
;;;321    				default:
;;;322    					return (FALSE);
;;;323    			}
;;;324    			break;
;;;325    
;;;326    		case REQUEST_TO_INTERFACE:
;;;327    			switch(g_USBCore_Setting.SetupPacket.wValue.WB.H)
;;;328    			{
;;;329    #if USB_HID
;;;330    				case HID_HID_DESCRIPTOR_TYPE:
;;;331    					g_USBCore_Setting.EP0Data.pData = ((U8 *)USB_ConfigDescriptor + HID_DESC_OFFSET+(g_USBCore_Setting.SetupPacket.wIndex.WB.L * 25));
;;;332    					len = HID_DESC_SIZE;
;;;333    					break;
;;;334    
;;;335    				case HID_REPORT_DESCRIPTOR_TYPE:
;;;336    					switch(g_USBCore_Setting.SetupPacket.wIndex.WB.L)
;;;337    					{
;;;338    						case 0:
;;;339    							len = HID_ReportDescMouseSize;
;;;340    							g_USBCore_Setting.EP0Data.pData = (U8 *)HID_ReportDescriptorMouse;
;;;341    							break;
;;;342    						
;;;343    						default:
;;;344    							return (FALSE);
;;;345    					}
;;;346    					break;
;;;347    	
;;;348    				case HID_PHYSICAL_DESCRIPTOR_TYPE:
;;;349    					return (FALSE);		// HID Physical Descriptor is not supported
;;;350    #endif
;;;351    				default:
;;;352    					return (FALSE);
;;;353    			}
;;;354    			break;
;;;355    		
;;;356    			default:
;;;357    				return (FALSE);
;;;358    	}
;;;359    
;;;360    	if(g_USBCore_Setting.EP0Data.Count > len)
;;;361    		g_USBCore_Setting.EP0Data.Count = len;
;;;362    
;;;363    	return (TRUE);
;;;364    }
00005c  bd10              POP      {r4,pc}
                  |L31.94|
00005e  482f              LDR      r0,|L31.284|
000060  3840              SUBS     r0,r0,#0x40           ;289
000062  6541              STR      r1,[r0,#0x54]         ;289  ; g_USBCore_Setting
000064  78c8              LDRB     r0,[r1,#3]            ;290
000066  788c              LDRB     r4,[r1,#2]            ;290
000068  0202              LSLS     r2,r0,#8              ;290
00006a  4322              ORRS     r2,r2,r4              ;290
00006c  e019              B        |L31.162|
                  |L31.110|
00006e  492e              LDR      r1,|L31.296|
000070  2300              MOVS     r3,#0                 ;310
000072  e005              B        |L31.128|
                  |L31.116|
000074  7808              LDRB     r0,[r1,#0]            ;311
000076  2800              CMP      r0,#0                 ;311
000078  d001              BEQ      |L31.126|
00007a  7808              LDRB     r0,[r1,#0]            ;312
00007c  1809              ADDS     r1,r1,r0              ;312
                  |L31.126|
00007e  1c5b              ADDS     r3,r3,#1              ;310
                  |L31.128|
000080  4826              LDR      r0,|L31.284|
000082  301c              ADDS     r0,r0,#0x1c           ;310
000084  7880              LDRB     r0,[r0,#2]            ;310
000086  4298              CMP      r0,r3                 ;310
000088  d1f4              BNE      |L31.116|
00008a  7808              LDRB     r0,[r1,#0]            ;314
00008c  2800              CMP      r0,#0                 ;314
00008e  d100              BNE      |L31.146|
000090  e7e4              B        |L31.92|
                  |L31.146|
000092  4822              LDR      r0,|L31.284|
000094  3840              SUBS     r0,r0,#0x40           ;317
000096  6541              STR      r1,[r0,#0x54]         ;317  ; g_USBCore_Setting
000098  6d40              LDR      r0,[r0,#0x54]         ;318  ; g_USBCore_Setting
00009a  7802              LDRB     r2,[r0,#0]            ;318
00009c  e001              B        |L31.162|
                  |L31.158|
00009e  2000              MOVS     r0,#0                 ;322
0000a0  e7dc              B        |L31.92|
                  |L31.162|
0000a2  bf00              NOP                            ;278
0000a4  e02f              B        |L31.262|
                  |L31.166|
0000a6  481d              LDR      r0,|L31.284|
0000a8  301c              ADDS     r0,r0,#0x1c           ;327
0000aa  78c0              LDRB     r0,[r0,#3]            ;327
0000ac  2821              CMP      r0,#0x21              ;327
0000ae  d004              BEQ      |L31.186|
0000b0  2822              CMP      r0,#0x22              ;327
0000b2  d00f              BEQ      |L31.212|
0000b4  2823              CMP      r0,#0x23              ;327
0000b6  d120              BNE      |L31.250|
0000b8  e01d              B        |L31.246|
                  |L31.186|
0000ba  4818              LDR      r0,|L31.284|
0000bc  301c              ADDS     r0,r0,#0x1c           ;331
0000be  7900              LDRB     r0,[r0,#4]            ;331
0000c0  2419              MOVS     r4,#0x19              ;331
0000c2  4360              MULS     r0,r4,r0              ;331
0000c4  4c17              LDR      r4,|L31.292|
0000c6  3412              ADDS     r4,r4,#0x12           ;331
0000c8  1900              ADDS     r0,r0,r4              ;331
0000ca  4c14              LDR      r4,|L31.284|
0000cc  3c40              SUBS     r4,r4,#0x40           ;331
0000ce  6560              STR      r0,[r4,#0x54]         ;331  ; g_USBCore_Setting
0000d0  2209              MOVS     r2,#9                 ;332
0000d2  e014              B        |L31.254|
                  |L31.212|
0000d4  4811              LDR      r0,|L31.284|
0000d6  301c              ADDS     r0,r0,#0x1c           ;336
0000d8  7900              LDRB     r0,[r0,#4]            ;336
0000da  2800              CMP      r0,#0                 ;336
0000dc  d106              BNE      |L31.236|
0000de  4813              LDR      r0,|L31.300|
0000e0  8802              LDRH     r2,[r0,#0]            ;339  ; HID_ReportDescMouseSize
0000e2  4813              LDR      r0,|L31.304|
0000e4  4c0d              LDR      r4,|L31.284|
0000e6  3c40              SUBS     r4,r4,#0x40           ;340
0000e8  6560              STR      r0,[r4,#0x54]         ;340  ; g_USBCore_Setting
0000ea  e001              B        |L31.240|
                  |L31.236|
0000ec  2000              MOVS     r0,#0                 ;344
0000ee  e7b5              B        |L31.92|
                  |L31.240|
0000f0  bf00              NOP                            ;341
0000f2  e004              B        |L31.254|
0000f4  e005              B        |L31.258|
                  |L31.246|
0000f6  2000              MOVS     r0,#0                 ;349
0000f8  e7b0              B        |L31.92|
                  |L31.250|
0000fa  2000              MOVS     r0,#0                 ;352
0000fc  e7ae              B        |L31.92|
                  |L31.254|
0000fe  bf00              NOP                            ;333
000100  e001              B        |L31.262|
                  |L31.258|
000102  2000              MOVS     r0,#0                 ;357
000104  e7aa              B        |L31.92|
                  |L31.262|
000106  bf00              NOP                            ;324
000108  4804              LDR      r0,|L31.284|
00010a  3014              ADDS     r0,r0,#0x14           ;360
00010c  8880              LDRH     r0,[r0,#4]            ;360
00010e  4290              CMP      r0,r2                 ;360
000110  d902              BLS      |L31.280|
000112  4802              LDR      r0,|L31.284|
000114  3014              ADDS     r0,r0,#0x14           ;361
000116  8082              STRH     r2,[r0,#4]            ;361
                  |L31.280|
000118  2001              MOVS     r0,#1                 ;363
00011a  e79f              B        |L31.92|
;;;365    
                          ENDP

                  |L31.284|
                          DCD      g_USBCore_Setting+0x40
                  |L31.288|
                          DCD      USB_DeviceDescriptor
                  |L31.292|
                          DCD      USB_ConfigDescriptor
                  |L31.296|
                          DCD      USB_StringDescriptor
                  |L31.300|
                          DCD      HID_ReportDescMouseSize
                  |L31.304|
                          DCD      HID_ReportDescriptorMouse

                          AREA ||i.nsAPI_USB_ReqSetConfiguration||, COMGROUP=nsAPI_USB_ReqSetConfiguration, CODE, READONLY, ALIGN=2

                  nsAPI_USB_ReqSetConfiguration PROC
;;;388    //----------------------------------------------------------------------------
;;;389    __inline Boolean nsAPI_USB_ReqSetConfiguration(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;390    {
;;;391    	USB_COMMON_DESCRIPTOR *pD;
;;;392    	U32 alt = 0, n, m;
000002  2600              MOVS     r6,#0
;;;393    
;;;394    	switch(g_USBCore_Setting.SetupPacket.bmRequestType.BM.Recipient)
000004  486c              LDR      r0,|L38.440|
000006  7f00              LDRB     r0,[r0,#0x1c]  ; g_USBCore_Setting
000008  06c0              LSLS     r0,r0,#27
00000a  0ec0              LSRS     r0,r0,#27
00000c  2800              CMP      r0,#0
00000e  d17d              BNE      |L38.268|
;;;395    	{
;;;396    		case REQUEST_TO_DEVICE:
;;;397    			if(g_USBCore_Setting.SetupPacket.wValue.WB.L)
000010  4869              LDR      r0,|L38.440|
000012  301c              ADDS     r0,r0,#0x1c
000014  7880              LDRB     r0,[r0,#2]
000016  2800              CMP      r0,#0
000018  d079              BEQ      |L38.270|
;;;398    			{
;;;399    				pD = (USB_COMMON_DESCRIPTOR *)USB_ConfigDescriptor;
00001a  4d68              LDR      r5,|L38.444|
;;;400    				while(pD->bLength)
00001c  e08d              B        |L38.314|
                  |L38.30|
;;;401    				{
;;;402    					switch (pD->bDescriptorType)
00001e  7868              LDRB     r0,[r5,#1]
000020  2802              CMP      r0,#2
000022  d004              BEQ      |L38.46|
000024  2804              CMP      r0,#4
000026  d05f              BEQ      |L38.232|
000028  2805              CMP      r0,#5
00002a  d15c              BNE      |L38.230|
00002c  e05e              B        |L38.236|
                  |L38.46|
;;;403    					{
;;;404    						case USB_CONFIGURATION_DESCRIPTOR_TYPE:
;;;405    							if(((USB_CONFIGURATION_DESCRIPTOR *)pD)->bConfigurationValue == g_USBCore_Setting.SetupPacket.wValue.WB.L)
00002e  7969              LDRB     r1,[r5,#5]
000030  4861              LDR      r0,|L38.440|
000032  301c              ADDS     r0,r0,#0x1c
000034  7880              LDRB     r0,[r0,#2]
000036  4281              CMP      r1,r0
000038  d14f              BNE      |L38.218|
;;;406    							{
;;;407    								g_USBCore_Setting.USB_Configuration = g_USBCore_Setting.SetupPacket.wValue.WB.L;
00003a  485f              LDR      r0,|L38.440|
00003c  301c              ADDS     r0,r0,#0x1c
00003e  7880              LDRB     r0,[r0,#2]
000040  495d              LDR      r1,|L38.440|
000042  3940              SUBS     r1,r1,#0x40
000044  7108              STRB     r0,[r1,#4]
;;;408    								g_USBCore_Setting.USB_NumInterfaces = ((USB_CONFIGURATION_DESCRIPTOR *)pD)->bNumInterfaces;
000046  7928              LDRB     r0,[r5,#4]
000048  7088              STRB     r0,[r1,#2]
;;;409    		
;;;410    								for(n = 0; n < USB_IF_NUM; n++)
00004a  2400              MOVS     r4,#0
00004c  e004              B        |L38.88|
                  |L38.78|
;;;411    									g_USBCore_Setting.USB_AltSetting[n] = 0;
00004e  2100              MOVS     r1,#0
000050  4859              LDR      r0,|L38.440|
000052  383b              SUBS     r0,r0,#0x3b
000054  5501              STRB     r1,[r0,r4]
000056  1c64              ADDS     r4,r4,#1              ;410
                  |L38.88|
000058  2c00              CMP      r4,#0                 ;410
00005a  d0f8              BEQ      |L38.78|
;;;412    		
;;;413    								for(n = 1; n < USB_LOGIC_EP_NUM; n++)
00005c  2401              MOVS     r4,#1
00005e  e019              B        |L38.148|
                  |L38.96|
;;;414    								{
;;;415    									if(g_USBCore_Setting.USB_EndPointMask & (1 << n))
000060  4855              LDR      r0,|L38.440|
000062  3840              SUBS     r0,r0,#0x40
000064  6c80              LDR      r0,[r0,#0x48]  ; g_USBCore_Setting
000066  2101              MOVS     r1,#1
000068  40a1              LSLS     r1,r1,r4
00006a  4008              ANDS     r0,r0,r1
00006c  2800              CMP      r0,#0
00006e  d002              BEQ      |L38.118|
;;;416    										nsAPI_USB_DisableEP(n);
000070  4620              MOV      r0,r4
000072  f7fffffe          BL       nsAPI_USB_DisableEP
                  |L38.118|
;;;417    		
;;;418    									if(g_USBCore_Setting.USB_EndPointMask & ((1 << 16) << n))
000076  4850              LDR      r0,|L38.440|
000078  3840              SUBS     r0,r0,#0x40
00007a  6c80              LDR      r0,[r0,#0x48]  ; g_USBCore_Setting
00007c  2101              MOVS     r1,#1
00007e  0409              LSLS     r1,r1,#16
000080  40a1              LSLS     r1,r1,r4
000082  4008              ANDS     r0,r0,r1
000084  2800              CMP      r0,#0
000086  d004              BEQ      |L38.146|
;;;419    										nsAPI_USB_DisableEP(n | 0x80);
000088  2180              MOVS     r1,#0x80
00008a  4321              ORRS     r1,r1,r4
00008c  4608              MOV      r0,r1
00008e  f7fffffe          BL       nsAPI_USB_DisableEP
                  |L38.146|
000092  1c64              ADDS     r4,r4,#1              ;413
                  |L38.148|
000094  2c05              CMP      r4,#5                 ;413
000096  d3e3              BCC      |L38.96|
;;;420    								}
;;;421    		
;;;422    								g_USBCore_Setting.USB_EndPointMask = 0x00010001;
000098  4849              LDR      r0,|L38.448|
00009a  4947              LDR      r1,|L38.440|
00009c  3940              SUBS     r1,r1,#0x40
00009e  6488              STR      r0,[r1,#0x48]  ; g_USBCore_Setting
;;;423    								g_USBCore_Setting.USB_EndPointHalt = 0x00000000;
0000a0  2000              MOVS     r0,#0
0000a2  64c8              STR      r0,[r1,#0x4c]  ; g_USBCore_Setting
;;;424    								g_USBCore_Setting.USB_EndPointStall = 0x00000000;
0000a4  6508              STR      r0,[r1,#0x50]  ; g_USBCore_Setting
;;;425    								NDrv_USB_Configure(TRUE);
0000a6  2001              MOVS     r0,#1
0000a8  f7fffffe          BL       NDrv_USB_Configure
;;;426    		
;;;427    								if(((USB_CONFIGURATION_DESCRIPTOR *)pD)->bmAttributes & USB_CONFIG_POWERED_MASK)
0000ac  79e8              LDRB     r0,[r5,#7]
0000ae  2140              MOVS     r1,#0x40
0000b0  4008              ANDS     r0,r0,r1
0000b2  2800              CMP      r0,#0
0000b4  d008              BEQ      |L38.200|
;;;428    									g_USBCore_Setting.USB_DeviceStatus |=  USB_GETSTATUS_SELF_POWERED;
0000b6  4840              LDR      r0,|L38.440|
0000b8  3840              SUBS     r0,r0,#0x40
0000ba  8800              LDRH     r0,[r0,#0]  ; g_USBCore_Setting
0000bc  2101              MOVS     r1,#1
0000be  4308              ORRS     r0,r0,r1
0000c0  493d              LDR      r1,|L38.440|
0000c2  3940              SUBS     r1,r1,#0x40
0000c4  8008              STRH     r0,[r1,#0]
0000c6  e00e              B        |L38.230|
                  |L38.200|
;;;429    								else
;;;430    									g_USBCore_Setting.USB_DeviceStatus &= ~USB_GETSTATUS_SELF_POWERED;
0000c8  483b              LDR      r0,|L38.440|
0000ca  3840              SUBS     r0,r0,#0x40
0000cc  8800              LDRH     r0,[r0,#0]  ; g_USBCore_Setting
0000ce  0840              LSRS     r0,r0,#1
0000d0  0040              LSLS     r0,r0,#1
0000d2  4939              LDR      r1,|L38.440|
0000d4  3940              SUBS     r1,r1,#0x40
0000d6  8008              STRH     r0,[r1,#0]
0000d8  e005              B        |L38.230|
                  |L38.218|
;;;431    							}
;;;432    							else
;;;433    							{
;;;434    								(U8 *)pD += ((USB_CONFIGURATION_DESCRIPTOR *)pD)->wTotalLength;
0000da  78e8              LDRB     r0,[r5,#3]
0000dc  78a9              LDRB     r1,[r5,#2]
0000de  0200              LSLS     r0,r0,#8
0000e0  4308              ORRS     r0,r0,r1
0000e2  1945              ADDS     r5,r0,r5
;;;435    								continue;
0000e4  e029              B        |L38.314|
                  |L38.230|
;;;436    							}
;;;437    							break;
0000e6  e024              B        |L38.306|
                  |L38.232|
;;;438    	
;;;439    						case USB_INTERFACE_DESCRIPTOR_TYPE:
;;;440    							alt = ((USB_INTERFACE_DESCRIPTOR *)pD)->bAlternateSetting;
0000e8  78ee              LDRB     r6,[r5,#3]
;;;441    							break;
0000ea  e022              B        |L38.306|
                  |L38.236|
;;;442    	
;;;443    						case USB_ENDPOINT_DESCRIPTOR_TYPE:
;;;444    							if(alt == 0)
0000ec  2e00              CMP      r6,#0
0000ee  d11f              BNE      |L38.304|
;;;445    							{
;;;446    								n = ((USB_ENDPOINT_DESCRIPTOR *)pD)->bEndpointAddress & 0x8F;
0000f0  78a8              LDRB     r0,[r5,#2]
0000f2  218f              MOVS     r1,#0x8f
0000f4  4008              ANDS     r0,r0,r1
0000f6  4604              MOV      r4,r0
;;;447    								m = (n & 0x80) ? ((1 << 16) << (n & 0x0F)) : (1 << n);
0000f8  2080              MOVS     r0,#0x80
0000fa  4020              ANDS     r0,r0,r4
0000fc  2800              CMP      r0,#0
0000fe  d007              BEQ      |L38.272|
000100  0721              LSLS     r1,r4,#28
000102  0f09              LSRS     r1,r1,#28
000104  2001              MOVS     r0,#1
000106  0400              LSLS     r0,r0,#16
000108  4088              LSLS     r0,r0,r1
00010a  e003              B        |L38.276|
                  |L38.268|
00010c  e04f              B        |L38.430|
                  |L38.270|
00010e  e019              B        |L38.324|
                  |L38.272|
000110  2001              MOVS     r0,#1
000112  40a0              LSLS     r0,r0,r4
                  |L38.276|
000114  4607              MOV      r7,r0
;;;448    								g_USBCore_Setting.USB_EndPointMask |= m;
000116  4828              LDR      r0,|L38.440|
000118  3840              SUBS     r0,r0,#0x40
00011a  6c80              LDR      r0,[r0,#0x48]  ; g_USBCore_Setting
00011c  4338              ORRS     r0,r0,r7
00011e  4926              LDR      r1,|L38.440|
000120  3940              SUBS     r1,r1,#0x40
000122  6488              STR      r0,[r1,#0x48]  ; g_USBCore_Setting
;;;449    								nsAPI_USB_EnableEP(n);
000124  4620              MOV      r0,r4
000126  f7fffffe          BL       nsAPI_USB_EnableEP
;;;450    								nsAPI_USB_ResetEP(n);
00012a  4620              MOV      r0,r4
00012c  f7fffffe          BL       nsAPI_USB_ResetEP
                  |L38.304|
;;;451    							}
;;;452    							break;
000130  bf00              NOP      
                  |L38.306|
000132  bf00              NOP                            ;437
;;;453    					}
;;;454    	
;;;455    					(U8 *)pD += pD->bLength;
000134  7828              LDRB     r0,[r5,#0]
000136  1945              ADDS     r5,r0,r5
000138  bf00              NOP                            ;435
                  |L38.314|
00013a  7828              LDRB     r0,[r5,#0]            ;400
00013c  2800              CMP      r0,#0                 ;400
00013e  d000              BEQ      |L38.322|
000140  e76d              B        |L38.30|
                  |L38.322|
000142  e02a              B        |L38.410|
                  |L38.324|
;;;456    				}
;;;457    			}
;;;458    			else
;;;459    			{
;;;460    				g_USBCore_Setting.USB_Configuration = 0;
000144  2000              MOVS     r0,#0
000146  491c              LDR      r1,|L38.440|
000148  3940              SUBS     r1,r1,#0x40
00014a  7108              STRB     r0,[r1,#4]
;;;461    	
;;;462    				for(n = 1; n < USB_LOGIC_EP_NUM; n++)
00014c  2401              MOVS     r4,#1
00014e  e019              B        |L38.388|
                  |L38.336|
;;;463    				{
;;;464    					if(g_USBCore_Setting.USB_EndPointMask & (1 << n))
000150  4819              LDR      r0,|L38.440|
000152  3840              SUBS     r0,r0,#0x40
000154  6c80              LDR      r0,[r0,#0x48]  ; g_USBCore_Setting
000156  2101              MOVS     r1,#1
000158  40a1              LSLS     r1,r1,r4
00015a  4008              ANDS     r0,r0,r1
00015c  2800              CMP      r0,#0
00015e  d002              BEQ      |L38.358|
;;;465    						nsAPI_USB_DisableEP(n);
000160  4620              MOV      r0,r4
000162  f7fffffe          BL       nsAPI_USB_DisableEP
                  |L38.358|
;;;466    	
;;;467    					if(g_USBCore_Setting.USB_EndPointMask & ((1 << 16) << n))
000166  4814              LDR      r0,|L38.440|
000168  3840              SUBS     r0,r0,#0x40
00016a  6c80              LDR      r0,[r0,#0x48]  ; g_USBCore_Setting
00016c  2101              MOVS     r1,#1
00016e  0409              LSLS     r1,r1,#16
000170  40a1              LSLS     r1,r1,r4
000172  4008              ANDS     r0,r0,r1
000174  2800              CMP      r0,#0
000176  d004              BEQ      |L38.386|
;;;468    						nsAPI_USB_DisableEP(n | 0x80);
000178  2180              MOVS     r1,#0x80
00017a  4321              ORRS     r1,r1,r4
00017c  4608              MOV      r0,r1
00017e  f7fffffe          BL       nsAPI_USB_DisableEP
                  |L38.386|
000182  1c64              ADDS     r4,r4,#1              ;462
                  |L38.388|
000184  2c05              CMP      r4,#5                 ;462
000186  d3e3              BCC      |L38.336|
;;;469    				}
;;;470    	
;;;471    				g_USBCore_Setting.USB_EndPointMask = 0x00010001;
000188  480d              LDR      r0,|L38.448|
00018a  490b              LDR      r1,|L38.440|
00018c  3940              SUBS     r1,r1,#0x40
00018e  6488              STR      r0,[r1,#0x48]  ; g_USBCore_Setting
;;;472    				g_USBCore_Setting.USB_EndPointHalt = 0x00000000;
000190  2000              MOVS     r0,#0
000192  64c8              STR      r0,[r1,#0x4c]  ; g_USBCore_Setting
;;;473    				g_USBCore_Setting.USB_EndPointStall = 0x00000000;
000194  6508              STR      r0,[r1,#0x50]  ; g_USBCore_Setting
;;;474    				NDrv_USB_Configure(FALSE);
000196  f7fffffe          BL       NDrv_USB_Configure
                  |L38.410|
;;;475    			}
;;;476    	
;;;477    			if(g_USBCore_Setting.USB_Configuration != g_USBCore_Setting.SetupPacket.wValue.WB.L)
00019a  4807              LDR      r0,|L38.440|
00019c  3840              SUBS     r0,r0,#0x40
00019e  7901              LDRB     r1,[r0,#4]  ; g_USBCore_Setting
0001a0  305c              ADDS     r0,r0,#0x5c
0001a2  7880              LDRB     r0,[r0,#2]
0001a4  4281              CMP      r1,r0
0001a6  d001              BEQ      |L38.428|
;;;478    				return (FALSE);
0001a8  2000              MOVS     r0,#0
                  |L38.426|
;;;479    			break;
;;;480    					
;;;481    		default:
;;;482    			return (FALSE);
;;;483    	}
;;;484    
;;;485    	return (TRUE);
;;;486    }
0001aa  bdf8              POP      {r3-r7,pc}
                  |L38.428|
0001ac  e001              B        |L38.434|
                  |L38.430|
0001ae  2000              MOVS     r0,#0                 ;482
0001b0  e7fb              B        |L38.426|
                  |L38.434|
0001b2  bf00              NOP                            ;479
0001b4  2001              MOVS     r0,#1                 ;485
0001b6  e7f8              B        |L38.426|
;;;487    
                          ENDP

                  |L38.440|
                          DCD      g_USBCore_Setting+0x40
                  |L38.444|
                          DCD      USB_ConfigDescriptor
                  |L38.448|
                          DCD      0x00010001

                          AREA ||i.nsAPI_USB_ReqSetInterface||, COMGROUP=nsAPI_USB_ReqSetInterface, CODE, READONLY, ALIGN=2

                  nsAPI_USB_ReqSetInterface PROC
;;;513    //----------------------------------------------------------------------------
;;;514    __inline Boolean nsAPI_USB_ReqSetInterface(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;515    {
000002  b085              SUB      sp,sp,#0x14
;;;516    	USB_COMMON_DESCRIPTOR *pD;
;;;517    	U32 ifn = 0, alt = 0, old = 0, msk = 0, n, m, set;
000004  2700              MOVS     r7,#0
000006  2000              MOVS     r0,#0
000008  9003              STR      r0,[sp,#0xc]
00000a  9002              STR      r0,[sp,#8]
00000c  9001              STR      r0,[sp,#4]
;;;518    
;;;519    	switch(g_USBCore_Setting.SetupPacket.bmRequestType.BM.Recipient)
00000e  484d              LDR      r0,|L45.324|
000010  7f00              LDRB     r0,[r0,#0x1c]  ; g_USBCore_Setting
000012  06c0              LSLS     r0,r0,#27
000014  0ec0              LSRS     r0,r0,#27
000016  2801              CMP      r0,#1
000018  d17e              BNE      |L45.280|
;;;520    	{
;;;521    		case REQUEST_TO_INTERFACE:
;;;522    			if(g_USBCore_Setting.USB_Configuration == 0)
00001a  484a              LDR      r0,|L45.324|
00001c  3840              SUBS     r0,r0,#0x40
00001e  7900              LDRB     r0,[r0,#4]  ; g_USBCore_Setting
000020  2800              CMP      r0,#0
000022  d101              BNE      |L45.40|
                  |L45.36|
;;;523    				return (FALSE);
;;;524    
;;;525    			set = FALSE;
;;;526    			pD = (USB_COMMON_DESCRIPTOR *)USB_ConfigDescriptor;
;;;527    
;;;528    			while(pD->bLength)
;;;529    			{
;;;530    				switch(pD->bDescriptorType)
;;;531    				{
;;;532    					case USB_CONFIGURATION_DESCRIPTOR_TYPE:
;;;533    						if(((USB_CONFIGURATION_DESCRIPTOR *)pD)->bConfigurationValue != g_USBCore_Setting.USB_Configuration)
;;;534    						{
;;;535    							(uint8_t *)pD += ((USB_CONFIGURATION_DESCRIPTOR *)pD)->wTotalLength;
;;;536    							continue;
;;;537    						}
;;;538    						break;
;;;539    
;;;540    					case USB_INTERFACE_DESCRIPTOR_TYPE:
;;;541    						ifn = ((USB_INTERFACE_DESCRIPTOR *)pD)->bInterfaceNumber;
;;;542    						alt = ((USB_INTERFACE_DESCRIPTOR *)pD)->bAlternateSetting;
;;;543    						msk = 0;
;;;544    						
;;;545    						if((ifn == g_USBCore_Setting.SetupPacket.wIndex.WB.L) && (alt == g_USBCore_Setting.SetupPacket.wValue.WB.L))
;;;546    						{
;;;547    							set = TRUE;
;;;548    							old = g_USBCore_Setting.USB_AltSetting[ifn];
;;;549    							g_USBCore_Setting.USB_AltSetting[ifn] = (U8)alt;
;;;550    						}
;;;551    						break;
;;;552    
;;;553    					case USB_ENDPOINT_DESCRIPTOR_TYPE:
;;;554    						if(ifn == g_USBCore_Setting.SetupPacket.wIndex.WB.L)
;;;555    						{
;;;556    							n = ((USB_ENDPOINT_DESCRIPTOR *)pD)->bEndpointAddress & 0x8F;
;;;557    							m = (n & 0x80) ? ((1 << 16) << (n & 0x0F)) : (1 << n);
;;;558    		
;;;559    							if(alt == g_USBCore_Setting.SetupPacket.wValue.WB.L)
;;;560    							{
;;;561    								g_USBCore_Setting.USB_EndPointMask |=  m;
;;;562    								g_USBCore_Setting.USB_EndPointHalt &= ~m;
;;;563    								nsAPI_USB_EnableEP(n);
;;;564    								nsAPI_USB_ResetEP(n);
;;;565    								msk |= m;
;;;566    							}
;;;567    							else if((alt == old) && ((msk & m) == 0))
;;;568    							{
;;;569    								g_USBCore_Setting.USB_EndPointMask &= ~m;
;;;570    								g_USBCore_Setting.USB_EndPointHalt &= ~m;
;;;571    								nsAPI_USB_DisableEP(n);
;;;572    							}
;;;573    						}
;;;574    						break;
;;;575    				}
;;;576    
;;;577    				(U8 *)pD += pD->bLength;
;;;578    			}
;;;579    			break;
;;;580    		
;;;581    		default:
;;;582    			return (FALSE);
;;;583    	}
;;;584    
;;;585    	return (set);
;;;586    }
000024  b005              ADD      sp,sp,#0x14
000026  bdf0              POP      {r4-r7,pc}
                  |L45.40|
000028  2000              MOVS     r0,#0                 ;525
00002a  9000              STR      r0,[sp,#0]            ;525
00002c  4c46              LDR      r4,|L45.328|
00002e  e07d              B        |L45.300|
                  |L45.48|
000030  7860              LDRB     r0,[r4,#1]            ;530
000032  2802              CMP      r0,#2                 ;530
000034  d004              BEQ      |L45.64|
000036  2804              CMP      r0,#4                 ;530
000038  d00f              BEQ      |L45.90|
00003a  2805              CMP      r0,#5                 ;530
00003c  d172              BNE      |L45.292|
00003e  e028              B        |L45.146|
                  |L45.64|
000040  7960              LDRB     r0,[r4,#5]            ;533
000042  4940              LDR      r1,|L45.324|
000044  3940              SUBS     r1,r1,#0x40           ;533
000046  7909              LDRB     r1,[r1,#4]            ;533  ; g_USBCore_Setting
000048  4288              CMP      r0,r1                 ;533
00004a  d005              BEQ      |L45.88|
00004c  78e0              LDRB     r0,[r4,#3]            ;535
00004e  78a1              LDRB     r1,[r4,#2]            ;535
000050  0200              LSLS     r0,r0,#8              ;535
000052  4308              ORRS     r0,r0,r1              ;535
000054  1904              ADDS     r4,r0,r4              ;535
000056  e069              B        |L45.300|
                  |L45.88|
000058  e064              B        |L45.292|
                  |L45.90|
00005a  78a7              LDRB     r7,[r4,#2]            ;541
00005c  78e0              LDRB     r0,[r4,#3]            ;542
00005e  9003              STR      r0,[sp,#0xc]          ;542
000060  2000              MOVS     r0,#0                 ;543
000062  9001              STR      r0,[sp,#4]            ;543
000064  4837              LDR      r0,|L45.324|
000066  301c              ADDS     r0,r0,#0x1c           ;545
000068  7900              LDRB     r0,[r0,#4]            ;545
00006a  42b8              CMP      r0,r7                 ;545
00006c  d110              BNE      |L45.144|
00006e  4835              LDR      r0,|L45.324|
000070  301c              ADDS     r0,r0,#0x1c           ;545
000072  7881              LDRB     r1,[r0,#2]            ;545
000074  9803              LDR      r0,[sp,#0xc]          ;545
000076  4281              CMP      r1,r0                 ;545
000078  d10a              BNE      |L45.144|
00007a  2001              MOVS     r0,#1                 ;547
00007c  9000              STR      r0,[sp,#0]            ;547
00007e  4831              LDR      r0,|L45.324|
000080  383b              SUBS     r0,r0,#0x3b           ;548
000082  5dc0              LDRB     r0,[r0,r7]            ;548
000084  9002              STR      r0,[sp,#8]            ;548
000086  9803              LDR      r0,[sp,#0xc]          ;549
000088  b2c1              UXTB     r1,r0                 ;549
00008a  482e              LDR      r0,|L45.324|
00008c  383b              SUBS     r0,r0,#0x3b           ;549
00008e  55c1              STRB     r1,[r0,r7]            ;549
                  |L45.144|
000090  e048              B        |L45.292|
                  |L45.146|
000092  482c              LDR      r0,|L45.324|
000094  301c              ADDS     r0,r0,#0x1c           ;554
000096  7900              LDRB     r0,[r0,#4]            ;554
000098  42b8              CMP      r0,r7                 ;554
00009a  d142              BNE      |L45.290|
00009c  78a6              LDRB     r6,[r4,#2]            ;556
00009e  218f              MOVS     r1,#0x8f              ;556
0000a0  400e              ANDS     r6,r6,r1              ;556
0000a2  2080              MOVS     r0,#0x80              ;557
0000a4  4030              ANDS     r0,r0,r6              ;557
0000a6  2800              CMP      r0,#0                 ;557
0000a8  d005              BEQ      |L45.182|
0000aa  0731              LSLS     r1,r6,#28             ;557
0000ac  0f09              LSRS     r1,r1,#28             ;557
0000ae  2001              MOVS     r0,#1                 ;557
0000b0  0400              LSLS     r0,r0,#16             ;557
0000b2  4088              LSLS     r0,r0,r1              ;557
0000b4  e001              B        |L45.186|
                  |L45.182|
0000b6  2001              MOVS     r0,#1                 ;557
0000b8  40b0              LSLS     r0,r0,r6              ;557
                  |L45.186|
0000ba  4605              MOV      r5,r0                 ;557
0000bc  4821              LDR      r0,|L45.324|
0000be  301c              ADDS     r0,r0,#0x1c           ;559
0000c0  7881              LDRB     r1,[r0,#2]            ;559
0000c2  9803              LDR      r0,[sp,#0xc]          ;559
0000c4  4281              CMP      r1,r0                 ;559
0000c6  d114              BNE      |L45.242|
0000c8  481e              LDR      r0,|L45.324|
0000ca  3840              SUBS     r0,r0,#0x40           ;561
0000cc  6c80              LDR      r0,[r0,#0x48]         ;561  ; g_USBCore_Setting
0000ce  4328              ORRS     r0,r0,r5              ;561
0000d0  491c              LDR      r1,|L45.324|
0000d2  3940              SUBS     r1,r1,#0x40           ;561
0000d4  6488              STR      r0,[r1,#0x48]         ;561  ; g_USBCore_Setting
0000d6  4608              MOV      r0,r1                 ;562
0000d8  6cc0              LDR      r0,[r0,#0x4c]         ;562  ; g_USBCore_Setting
0000da  43a8              BICS     r0,r0,r5              ;562
0000dc  64c8              STR      r0,[r1,#0x4c]         ;562  ; g_USBCore_Setting
0000de  4630              MOV      r0,r6                 ;563
0000e0  f7fffffe          BL       nsAPI_USB_EnableEP
0000e4  4630              MOV      r0,r6                 ;564
0000e6  f7fffffe          BL       nsAPI_USB_ResetEP
0000ea  9801              LDR      r0,[sp,#4]            ;565
0000ec  4328              ORRS     r0,r0,r5              ;565
0000ee  9001              STR      r0,[sp,#4]            ;565
0000f0  e017              B        |L45.290|
                  |L45.242|
0000f2  9902              LDR      r1,[sp,#8]            ;567
0000f4  9803              LDR      r0,[sp,#0xc]          ;567
0000f6  4288              CMP      r0,r1                 ;567
0000f8  d113              BNE      |L45.290|
0000fa  9801              LDR      r0,[sp,#4]            ;567
0000fc  4028              ANDS     r0,r0,r5              ;567
0000fe  2800              CMP      r0,#0                 ;567
000100  d10f              BNE      |L45.290|
000102  4810              LDR      r0,|L45.324|
000104  3840              SUBS     r0,r0,#0x40           ;569
000106  6c80              LDR      r0,[r0,#0x48]         ;569  ; g_USBCore_Setting
000108  43a8              BICS     r0,r0,r5              ;569
00010a  490e              LDR      r1,|L45.324|
00010c  3940              SUBS     r1,r1,#0x40           ;569
00010e  6488              STR      r0,[r1,#0x48]         ;569  ; g_USBCore_Setting
000110  4608              MOV      r0,r1                 ;570
000112  6cc0              LDR      r0,[r0,#0x4c]         ;570  ; g_USBCore_Setting
000114  43a8              BICS     r0,r0,r5              ;570
000116  e000              B        |L45.282|
                  |L45.280|
000118  e00d              B        |L45.310|
                  |L45.282|
00011a  64c8              STR      r0,[r1,#0x4c]         ;570  ; g_USBCore_Setting
00011c  4630              MOV      r0,r6                 ;571
00011e  f7fffffe          BL       nsAPI_USB_DisableEP
                  |L45.290|
000122  bf00              NOP                            ;574
                  |L45.292|
000124  bf00              NOP                            ;538
000126  7820              LDRB     r0,[r4,#0]            ;577
000128  1904              ADDS     r4,r0,r4              ;577
00012a  bf00              NOP                            ;536
                  |L45.300|
00012c  7820              LDRB     r0,[r4,#0]            ;528
00012e  2800              CMP      r0,#0                 ;528
000130  d000              BEQ      |L45.308|
000132  e77d              B        |L45.48|
                  |L45.308|
000134  e001              B        |L45.314|
                  |L45.310|
000136  2000              MOVS     r0,#0                 ;582
000138  e774              B        |L45.36|
                  |L45.314|
00013a  bf00              NOP                            ;579
00013c  9800              LDR      r0,[sp,#0]            ;585
00013e  b2c0              UXTB     r0,r0                 ;585
000140  e770              B        |L45.36|
;;;587    
                          ENDP

000142  0000              DCW      0x0000
                  |L45.324|
                          DCD      g_USBCore_Setting+0x40
                  |L45.328|
                          DCD      USB_ConfigDescriptor

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d304              BCC      |L52.24|
                  |L52.14|
00000e  5d63              LDRB     r3,[r4,r5]
000010  005b              LSLS     r3,r3,#1
000012  18e3              ADDS     r3,r4,r3
000014  bc30              POP      {r4,r5}
000016  4718              BX       r3
                  |L52.24|
000018  461d              MOV      r5,r3
00001a  e7f8              B        |L52.14|
                          ENDP


;*** Start embedded assembler ***

#line 1 "Src\\usbcore.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___9_usbcore_c_e77c2822____REV16|
#line 112 ".\\Inc\\core_cmInstr.h"
|__asm___9_usbcore_c_e77c2822____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___9_usbcore_c_e77c2822____REVSH|
#line 130
|__asm___9_usbcore_c_e77c2822____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
