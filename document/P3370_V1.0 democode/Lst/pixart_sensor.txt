; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\pixart_sensor.o --asm_dir=.\Lst\ --list_dir=.\Lst\ --depend=.\obj\pixart_sensor.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I.\Inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\INC\NXP\LPC11Uxx -D__MICROLIB -D__UVISION_VERSION=536 -D__DEBUG_FLASH --omf_browse=.\obj\pixart_sensor.crf Src\Pixart_Sensor.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  nsAPI_SSP_Delay1us PROC
;;;37     
;;;38     void nsAPI_SSP_Delay1us(U16 u16DelayTime)
000000  e007              B        |L1.18|
                  |L1.2|
;;;39     {
;;;40     	U8 i;
;;;41     	
;;;42     	while(u16DelayTime)
;;;43     	{
;;;44     		for (i = 4; i > 0; i--){};
000002  2104              MOVS     r1,#4
000004  e001              B        |L1.10|
                  |L1.6|
000006  1e4a              SUBS     r2,r1,#1
000008  b2d1              UXTB     r1,r2
                  |L1.10|
00000a  2900              CMP      r1,#0
00000c  dcfb              BGT      |L1.6|
;;;45     			u16DelayTime --;
00000e  1e42              SUBS     r2,r0,#1
000010  b290              UXTH     r0,r2
                  |L1.18|
000012  2800              CMP      r0,#0                 ;42
000014  d1f5              BNE      |L1.2|
;;;46     	}	
;;;47     }
000016  4770              BX       lr
;;;48     
                          ENDP

                  nsAPI_SSP_Sensor_Read PROC
;;;49     RetU8 nsAPI_SSP_Sensor_Read(U8 u8Adr)
000018  b501              PUSH     {r0,lr}
;;;50     {
;;;51     	// This part is to cater GUI usage.
;;;52     	// Note reg 0x02 and 0x50 is under the same data path 
;;;53     	if( IS_BIT_SET(mouse_event_ctrl,ENABLE_NON_BURST_MODE_BIT) )
00001a  48fe              LDR      r0,|L1.1044|
00001c  7800              LDRB     r0,[r0,#0]  ; mouse_event_ctrl
00001e  2108              MOVS     r1,#8
000020  4008              ANDS     r0,r0,r1
000022  2808              CMP      r0,#8
000024  d117              BNE      |L1.86|
;;;54     	{ // non burst mode
;;;55     	   if((u8Adr != 0x02) && (u8Adr != 0x03) && (u8Adr != 0x04) && (u8Adr != 0x05) && (u8Adr != 0x06) )
000026  4668              MOV      r0,sp
000028  7800              LDRB     r0,[r0,#0]
00002a  2802              CMP      r0,#2
00002c  d01a              BEQ      |L1.100|
00002e  4668              MOV      r0,sp
000030  7800              LDRB     r0,[r0,#0]
000032  2803              CMP      r0,#3
000034  d016              BEQ      |L1.100|
000036  4668              MOV      r0,sp
000038  7800              LDRB     r0,[r0,#0]
00003a  2804              CMP      r0,#4
00003c  d012              BEQ      |L1.100|
00003e  4668              MOV      r0,sp
000040  7800              LDRB     r0,[r0,#0]
000042  2805              CMP      r0,#5
000044  d00e              BEQ      |L1.100|
000046  4668              MOV      r0,sp
000048  7800              LDRB     r0,[r0,#0]
00004a  2806              CMP      r0,#6
00004c  d00a              BEQ      |L1.100|
;;;56     		 {
;;;57     				flagOne = ENABLE; // this to clean register 0x02 before normal motion read as other than register read 0x02,0x03,0x04,0x05,0x06 happend.
00004e  2001              MOVS     r0,#1
000050  49f1              LDR      r1,|L1.1048|
000052  7008              STRB     r0,[r1,#0]
000054  e006              B        |L1.100|
                  |L1.86|
;;;58     		 } 
;;;59     	}
;;;60     	else  // burst mode
;;;61     	{
;;;62     	   if(u8Adr != 0x50)
000056  4668              MOV      r0,sp
000058  7800              LDRB     r0,[r0,#0]
00005a  2850              CMP      r0,#0x50
00005c  d002              BEQ      |L1.100|
;;;63     		 {
;;;64     		flagOne = ENABLE;		// this flag is to clear register 0x50 before motion burst read as other read operation happened. .
00005e  2001              MOVS     r0,#1
000060  49ed              LDR      r1,|L1.1048|
000062  7008              STRB     r0,[r1,#0]
                  |L1.100|
;;;65     		 }
;;;66       }	
;;;67     	
;;;68     		
;;;69       	__disable_irq();
000064  b672              CPSID    i
;;;70     	
;;;71     	NCS_LOW();
000066  2200              MOVS     r2,#0
000068  2102              MOVS     r1,#2
00006a  4610              MOV      r0,r2
00006c  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;72     	nsAPI_SSP_Delay1us(1);
000070  2001              MOVS     r0,#1
000072  f7fffffe          BL       nsAPI_SSP_Delay1us
;;;73     	
;;;74     	nsAPI_SSP_Send(&u8Adr,1);	
000076  2101              MOVS     r1,#1
000078  4668              MOV      r0,sp
00007a  f7fffffe          BL       nsAPI_SSP_Send
;;;75     	nsAPI_SSP_Delay1us(2);	
00007e  2002              MOVS     r0,#2
000080  f7fffffe          BL       nsAPI_SSP_Delay1us
;;;76     	nsAPI_SSP_Receive(&u8Adr,1);	
000084  2101              MOVS     r1,#1
000086  4668              MOV      r0,sp
000088  f7fffffe          BL       nsAPI_SSP_Receive
;;;77     	
;;;78     	nsAPI_SSP_Delay1us(1);	
00008c  2001              MOVS     r0,#1
00008e  f7fffffe          BL       nsAPI_SSP_Delay1us
;;;79     	NCS_HIGH();
000092  2201              MOVS     r2,#1
000094  2102              MOVS     r1,#2
000096  2000              MOVS     r0,#0
000098  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;80     	nsAPI_SSP_Delay1us(10);	
00009c  200a              MOVS     r0,#0xa
00009e  f7fffffe          BL       nsAPI_SSP_Delay1us
;;;81     
;;;82     	__enable_irq(); 
0000a2  b662              CPSIE    i
;;;83     
;;;84     	return u8Adr; 
0000a4  4668              MOV      r0,sp
0000a6  7800              LDRB     r0,[r0,#0]
;;;85     }
0000a8  bd08              POP      {r3,pc}
;;;86     
                          ENDP

                  nsAPI_SSP_Sensor_Write PROC
;;;87     void nsAPI_SSP_Sensor_Write(U8 u8Adr,U8 u8Com)
0000aa  b513              PUSH     {r0,r1,r4,lr}
;;;88     {
;;;89     	
;;;90      if(u8Adr == 0x00)		// if register 0x00 was write.	
0000ac  4668              MOV      r0,sp
0000ae  7800              LDRB     r0,[r0,#0]
0000b0  2800              CMP      r0,#0
0000b2  d104              BNE      |L1.190|
;;;91      {	
;;;92     		stop_motion	= u8Com; 
0000b4  4668              MOV      r0,sp
0000b6  7900              LDRB     r0,[r0,#4]
0000b8  49d8              LDR      r1,|L1.1052|
0000ba  7008              STRB     r0,[r1,#0]
0000bc  e021              B        |L1.258|
                  |L1.190|
;;;93      }	 
;;;94      else
;;;95      {	
;;;96         __disable_irq();
0000be  b672              CPSID    i
;;;97     	
;;;98     	u8Adr = u8Adr|BIT7;
0000c0  4669              MOV      r1,sp
0000c2  7808              LDRB     r0,[r1,#0]
0000c4  2180              MOVS     r1,#0x80
0000c6  4308              ORRS     r0,r0,r1
0000c8  9000              STR      r0,[sp,#0]
;;;99     	NCS_LOW();
0000ca  2200              MOVS     r2,#0
0000cc  2102              MOVS     r1,#2
0000ce  4610              MOV      r0,r2
0000d0  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;100    	nsAPI_SSP_Delay1us(1);  	// 1us
0000d4  2001              MOVS     r0,#1
0000d6  f7fffffe          BL       nsAPI_SSP_Delay1us
;;;101    	nsAPI_SSP_Send(&u8Adr,1);	// Send Address
0000da  2101              MOVS     r1,#1
0000dc  4668              MOV      r0,sp
0000de  f7fffffe          BL       nsAPI_SSP_Send
;;;102    	//nsAPI_SSP_Delay1us(2);	// 
;;;103    	nsAPI_SSP_Send(&u8Com,1);	// Data	
0000e2  2101              MOVS     r1,#1
0000e4  a801              ADD      r0,sp,#4
0000e6  f7fffffe          BL       nsAPI_SSP_Send
;;;104    	nsAPI_SSP_Delay1us(1);				
0000ea  2001              MOVS     r0,#1
0000ec  f7fffffe          BL       nsAPI_SSP_Delay1us
;;;105    			
;;;106    	NCS_HIGH();
0000f0  2201              MOVS     r2,#1
0000f2  2102              MOVS     r1,#2
0000f4  2000              MOVS     r0,#0
0000f6  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;107    
;;;108    	nsAPI_SSP_Delay1us(5);
0000fa  2005              MOVS     r0,#5
0000fc  f7fffffe          BL       nsAPI_SSP_Delay1us
;;;109    	
;;;110    	__enable_irq();
000100  b662              CPSIE    i
                  |L1.258|
;;;111    	
;;;112     }
;;;113    }
000102  bd1c              POP      {r2-r4,pc}
;;;114    
                          ENDP

                  nsAPI_SSP_Sensor_LoadSROM PROC
;;;115    
;;;116    void nsAPI_SSP_Sensor_LoadSROM(void)
000104  b538              PUSH     {r3-r5,lr}
;;;117    {
;;;118         U8 u8SromTemp; 
;;;119         U16 sromCntr;      
;;;120    
;;;121    	nsAPI_SSP_Sensor_Write(CONFIG2_REG,0x00); 		
000106  2100              MOVS     r1,#0
000108  2010              MOVS     r0,#0x10
00010a  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;122    	nsAPI_SSP_Sensor_Write(SROM_ENABLE_REG,0x1D);	
00010e  211d              MOVS     r1,#0x1d
000110  2013              MOVS     r0,#0x13
000112  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;123    		
;;;124    	for(sromCntr = 0; sromCntr < 10; sromCntr++)
000116  2400              MOVS     r4,#0
000118  e005              B        |L1.294|
                  |L1.282|
;;;125    		nsAPI_SSP_Delay1us(1000); // 1ms
00011a  207d              MOVS     r0,#0x7d
00011c  00c0              LSLS     r0,r0,#3
00011e  f7fffffe          BL       nsAPI_SSP_Delay1us
000122  1c60              ADDS     r0,r4,#1              ;124
000124  b284              UXTH     r4,r0                 ;124
                  |L1.294|
000126  2c0a              CMP      r4,#0xa               ;124
000128  dbf7              BLT      |L1.282|
;;;126    
;;;127    	nsAPI_SSP_Sensor_Write(SROM_ENABLE_REG,0x18);
00012a  2118              MOVS     r1,#0x18
00012c  2013              MOVS     r0,#0x13
00012e  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;128    	nsAPI_SSP_Delay1us(120);//120us	
000132  2078              MOVS     r0,#0x78
000134  f7fffffe          BL       nsAPI_SSP_Delay1us
;;;129    	
;;;130    	NCS_LOW();
000138  2200              MOVS     r2,#0
00013a  2102              MOVS     r1,#2
00013c  4610              MOV      r0,r2
00013e  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;131    
;;;132    	u8SromTemp = (SROM_LOAD_BURST_REG|0x80);
000142  20e2              MOVS     r0,#0xe2
000144  9000              STR      r0,[sp,#0]
;;;133    	nsAPI_SSP_Send(&u8SromTemp,1);
000146  2101              MOVS     r1,#1
000148  4668              MOV      r0,sp
00014a  f7fffffe          BL       nsAPI_SSP_Send
;;;134    	nsAPI_SSP_Delay1us(140);//140us
00014e  208c              MOVS     r0,#0x8c
000150  f7fffffe          BL       nsAPI_SSP_Delay1us
;;;135       	
;;;136    	for(sromCntr = 0; sromCntr < SROMSIZE; sromCntr++)
000154  2400              MOVS     r4,#0
000156  e00b              B        |L1.368|
                  |L1.344|
;;;137    	{	
;;;138    		u8SromTemp = SROM[sromCntr]; 
000158  48b1              LDR      r0,|L1.1056|
00015a  5d00              LDRB     r0,[r0,r4]
00015c  9000              STR      r0,[sp,#0]
;;;139    		nsAPI_SSP_Send(&u8SromTemp,1); 		
00015e  2101              MOVS     r1,#1
000160  4668              MOV      r0,sp
000162  f7fffffe          BL       nsAPI_SSP_Send
;;;140    		nsAPI_SSP_Delay1us(30);//30us	
000166  201e              MOVS     r0,#0x1e
000168  f7fffffe          BL       nsAPI_SSP_Delay1us
00016c  1c60              ADDS     r0,r4,#1              ;136
00016e  b284              UXTH     r4,r0                 ;136
                  |L1.368|
000170  48ac              LDR      r0,|L1.1060|
000172  8800              LDRH     r0,[r0,#0]            ;136  ; sromTableSize
000174  4284              CMP      r4,r0                 ;136
000176  dbef              BLT      |L1.344|
;;;141    	}	
;;;142    	NCS_HIGH();
000178  2201              MOVS     r2,#1
00017a  2102              MOVS     r1,#2
00017c  2000              MOVS     r0,#0
00017e  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;143    	nsAPI_SSP_Delay1us(180);//180us
000182  20b4              MOVS     r0,#0xb4
000184  f7fffffe          BL       nsAPI_SSP_Delay1us
;;;144    }
000188  bd38              POP      {r3-r5,pc}
;;;145    
                          ENDP

                  nsAPI_Sensor_Hard_Reset PROC
;;;147    
;;;148    void nsAPI_Sensor_Hard_Reset(void)
00018a  b510              PUSH     {r4,lr}
;;;149    {
;;;150    	U8 initCntr;
;;;151    
;;;152    	NDrv_GPIO_SetBitValue(PORT1,21,HIGH);	// Hard Reset
00018c  2201              MOVS     r2,#1
00018e  2115              MOVS     r1,#0x15
000190  4610              MOV      r0,r2
000192  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;153    	nsAPI_SSP_Delay1us(50);
000196  2032              MOVS     r0,#0x32
000198  f7fffffe          BL       nsAPI_SSP_Delay1us
;;;154    	NDrv_GPIO_SetBitValue(PORT1,21,LOW);
00019c  2200              MOVS     r2,#0
00019e  2115              MOVS     r1,#0x15
0001a0  2001              MOVS     r0,#1
0001a2  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;155    	nsAPI_SSP_Delay1us(50);
0001a6  2032              MOVS     r0,#0x32
0001a8  f7fffffe          BL       nsAPI_SSP_Delay1us
;;;156    	NDrv_GPIO_SetBitValue(PORT1,21,HIGH);
0001ac  2201              MOVS     r2,#1
0001ae  2115              MOVS     r1,#0x15
0001b0  4610              MOV      r0,r2
0001b2  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;157    
;;;158    	for(initCntr = 0; initCntr < 60; initCntr++)	// 60ms  
0001b6  2400              MOVS     r4,#0
0001b8  e005              B        |L1.454|
                  |L1.442|
;;;159    		nsAPI_SSP_Delay1us(1000);					// 1ms
0001ba  207d              MOVS     r0,#0x7d
0001bc  00c0              LSLS     r0,r0,#3
0001be  f7fffffe          BL       nsAPI_SSP_Delay1us
0001c2  1c60              ADDS     r0,r4,#1              ;158
0001c4  b2c4              UXTB     r4,r0                 ;158
                  |L1.454|
0001c6  2c3c              CMP      r4,#0x3c              ;158
0001c8  dbf7              BLT      |L1.442|
;;;160    }
0001ca  bd10              POP      {r4,pc}
;;;161    
                          ENDP

                  nsAPI_SSP_Sensor_Init PROC
;;;163    
;;;164    void nsAPI_SSP_Sensor_Init(void)
0001cc  b5f8              PUSH     {r3-r7,lr}
;;;165    {	
;;;166    	U16 Test_A = 0;
0001ce  2700              MOVS     r7,#0
;;;167    	U8 ctr = 0;
0001d0  2500              MOVS     r5,#0
;;;168      U16 delay = 0;
0001d2  2400              MOVS     r4,#0
;;;169    	U8 clockcounter = 0;
0001d4  2000              MOVS     r0,#0
0001d6  9000              STR      r0,[sp,#0]
;;;170    	U8 u8InitTemp = 2;	// Default for the LED setting
0001d8  2602              MOVS     r6,#2
;;;171    	flagOne = ENABLE;
0001da  2001              MOVS     r0,#1
0001dc  498e              LDR      r1,|L1.1048|
0001de  7008              STRB     r0,[r1,#0]
;;;172    	#define LED_INIT_SETUP	u8InitTemp
;;;173    	s16accuX.w = 0;		// Reset USB XY Accumulator
0001e0  2000              MOVS     r0,#0
0001e2  4991              LDR      r1,|L1.1064|
0001e4  8008              STRH     r0,[r1,#0]
;;;174    	s16accuY.w = 0;
0001e6  4991              LDR      r1,|L1.1068|
0001e8  8008              STRH     r0,[r1,#0]
;;;175    	count_z = 0;
0001ea  4991              LDR      r1,|L1.1072|
0001ec  7008              STRB     r0,[r1,#0]
;;;176    
;;;177    	NDrv_GPIO_SetBitValue(PORT0,11,HIGH);	// Sensor's LED2_P SW3 OPEN
0001ee  2201              MOVS     r2,#1
0001f0  210b              MOVS     r1,#0xb
0001f2  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;178    
;;;179    	//TURN_ON_20R_SW1_LED(HIGH);	// 3rd highest light default
;;;180     	//TURN_ON_39R_SW2_LED(LOW);
;;;181      TURN_ON_20R_SW1_LED(LOW);	// GY@03June2016 Turn On SW1 9 ohm for ORCA3 LED
0001f6  2200              MOVS     r2,#0
0001f8  210d              MOVS     r1,#0xd
0001fa  4610              MOV      r0,r2
0001fc  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;182    	TURN_ON_39R_SW2_LED(HIGH);
000200  2201              MOVS     r2,#1
000202  210e              MOVS     r1,#0xe
000204  2000              MOVS     r0,#0
000206  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;183    
;;;184    	// Default LED setting
;;;185    	NDrv_GPIO_SetBitValue(PORT0,20,(LED_INIT_SETUP & BIT2)^BIT2); // DLED 1  PORT 0 _20
00020a  4630              MOV      r0,r6
00020c  2104              MOVS     r1,#4
00020e  4008              ANDS     r0,r0,r1
000210  4048              EORS     r0,r0,r1
000212  4602              MOV      r2,r0
000214  2114              MOVS     r1,#0x14
000216  2000              MOVS     r0,#0
000218  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;186    	NDrv_GPIO_SetBitValue(PORT1,26,(LED_INIT_SETUP & BIT1)^BIT1); // DLED 2  Port 1 _26				
00021c  4630              MOV      r0,r6
00021e  2102              MOVS     r1,#2
000220  4008              ANDS     r0,r0,r1
000222  4048              EORS     r0,r0,r1
000224  4602              MOV      r2,r0
000226  211a              MOVS     r1,#0x1a
000228  2001              MOVS     r0,#1
00022a  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;187    	NDrv_GPIO_SetBitValue(PORT1,27,(LED_INIT_SETUP & BIT0)^BIT0); // DLED 3  Port 1 _27
00022e  07f0              LSLS     r0,r6,#31
000230  0fc0              LSRS     r0,r0,#31
000232  2101              MOVS     r1,#1
000234  4048              EORS     r0,r0,r1
000236  4602              MOV      r2,r0
000238  211b              MOVS     r1,#0x1b
00023a  2001              MOVS     r0,#1
00023c  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;188    	
;;;189    	NDrv_GPIO_SetBitValue(PORT1,21,HIGH);
000240  2201              MOVS     r2,#1
000242  2115              MOVS     r1,#0x15
000244  4610              MOV      r0,r2
000246  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;190    	
;;;191    	for(ctr = 0; ctr< 50; ctr++)		// 1ms x50 = 50ms  
00024a  bf00              NOP      
00024c  e005              B        |L1.602|
                  |L1.590|
;;;192    	nsAPI_SSP_Delay1us(1000);			// 1ms
00024e  207d              MOVS     r0,#0x7d
000250  00c0              LSLS     r0,r0,#3
000252  f7fffffe          BL       nsAPI_SSP_Delay1us
000256  1c68              ADDS     r0,r5,#1              ;191
000258  b2c5              UXTB     r5,r0                 ;191
                  |L1.602|
00025a  2d32              CMP      r5,#0x32              ;191
00025c  dbf7              BLT      |L1.590|
;;;193    
;;;194    	NCS_HIGH();	
00025e  2201              MOVS     r2,#1
000260  2102              MOVS     r1,#2
000262  2000              MOVS     r0,#0
000264  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;195    	nsAPI_SSP_Delay1us(1);
000268  2001              MOVS     r0,#1
00026a  f7fffffe          BL       nsAPI_SSP_Delay1us
;;;196    	NCS_LOW();	
00026e  2200              MOVS     r2,#0
000270  2102              MOVS     r1,#2
000272  4610              MOV      r0,r2
000274  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;197     
;;;198    	#ifdef SOFT_RESET										//	Soft Reset Default
;;;199    	nsAPI_SSP_Sensor_Write(0x3A, 0x5A);	// Soft Reset
000278  215a              MOVS     r1,#0x5a
00027a  203a              MOVS     r0,#0x3a
00027c  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;200    	#else
;;;201    	nsAPI_Sensor_Hard_Reset();				// Hard Reset 
;;;202    	#endif
;;;203    
;;;204    	nsAPI_SSP_Delay1us(5000);						//wait for at least 5ms
000280  486c              LDR      r0,|L1.1076|
000282  f7fffffe          BL       nsAPI_SSP_Delay1us
;;;205    	
;;;206    	// sensor initialization
;;;207    	nsAPI_SSP_Sensor_Write(0x7F,0x12);  
000286  2112              MOVS     r1,#0x12
000288  207f              MOVS     r0,#0x7f
00028a  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;208    	nsAPI_SSP_Sensor_Write(0x47,0x00);
00028e  2100              MOVS     r1,#0
000290  2047              MOVS     r0,#0x47
000292  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;209    	nsAPI_SSP_Sensor_Write(0x7F,0x00);
000296  2100              MOVS     r1,#0
000298  207f              MOVS     r0,#0x7f
00029a  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;210    	nsAPI_SSP_Sensor_Write(0x18,0x00);
00029e  2100              MOVS     r1,#0
0002a0  2018              MOVS     r0,#0x18
0002a2  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;211    	nsAPI_SSP_Sensor_Write(0x40,0x80);
0002a6  2180              MOVS     r1,#0x80
0002a8  2040              MOVS     r0,#0x40
0002aa  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;212    	nsAPI_SSP_Sensor_Write(0x55,0x01);
0002ae  2101              MOVS     r1,#1
0002b0  2055              MOVS     r0,#0x55
0002b2  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;213    	nsAPI_SSP_Delay1us(1000);						//wait for 1ms
0002b6  207d              MOVS     r0,#0x7d
0002b8  00c0              LSLS     r0,r0,#3
0002ba  f7fffffe          BL       nsAPI_SSP_Delay1us
;;;214    	nsAPI_SSP_Sensor_Write(0x7F,0x0E);
0002be  210e              MOVS     r1,#0xe
0002c0  207f              MOVS     r0,#0x7f
0002c2  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;215    	nsAPI_SSP_Sensor_Write(0x43,0x1D);
0002c6  211d              MOVS     r1,#0x1d
0002c8  2043              MOVS     r0,#0x43
0002ca  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;216    	VarA	= (nsAPI_SSP_Sensor_Read(0x46)); 
0002ce  2046              MOVS     r0,#0x46
0002d0  f7fffffe          BL       nsAPI_SSP_Sensor_Read
0002d4  4958              LDR      r1,|L1.1080|
0002d6  7008              STRB     r0,[r1,#0]
;;;217    	nsAPI_SSP_Sensor_Write(0x43,0x1E);
0002d8  211e              MOVS     r1,#0x1e
0002da  2043              MOVS     r0,#0x43
0002dc  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;218    	VarB	= (nsAPI_SSP_Sensor_Read(0x46)); 
0002e0  2046              MOVS     r0,#0x46
0002e2  f7fffffe          BL       nsAPI_SSP_Sensor_Read
0002e6  4955              LDR      r1,|L1.1084|
0002e8  7008              STRB     r0,[r1,#0]
;;;219    
;;;220    	nsAPI_SSP_Sensor_Write(0x7F,0x14);
0002ea  2114              MOVS     r1,#0x14
0002ec  207f              MOVS     r0,#0x7f
0002ee  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;221    	nsAPI_SSP_Sensor_Write(0x6A,VarA);
0002f2  4851              LDR      r0,|L1.1080|
0002f4  7801              LDRB     r1,[r0,#0]  ; VarA
0002f6  206a              MOVS     r0,#0x6a
0002f8  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;222    	nsAPI_SSP_Sensor_Write(0x6C,VarB);
0002fc  484f              LDR      r0,|L1.1084|
0002fe  7801              LDRB     r1,[r0,#0]  ; VarB
000300  206c              MOVS     r0,#0x6c
000302  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;223    	
;;;224    	
;;;225    
;;;226    	nsAPI_SSP_Sensor_Write(0x7F,0x00);
000306  2100              MOVS     r1,#0
000308  207f              MOVS     r0,#0x7f
00030a  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;227    	nsAPI_SSP_Sensor_Write(0x55,0x00);
00030e  2100              MOVS     r1,#0
000310  2055              MOVS     r0,#0x55
000312  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;228    	nsAPI_SSP_Sensor_Write(0x4D,0x10);
000316  2110              MOVS     r1,#0x10
000318  204d              MOVS     r0,#0x4d
00031a  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;229    	nsAPI_SSP_Sensor_Write(0x4E,0x3B);
00031e  213b              MOVS     r1,#0x3b
000320  204e              MOVS     r0,#0x4e
000322  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;230    	nsAPI_SSP_Sensor_Write(0x4F,0x46);
000326  2146              MOVS     r1,#0x46
000328  204f              MOVS     r0,#0x4f
00032a  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;231    	nsAPI_SSP_Sensor_Write(0x54,0x34);
00032e  2134              MOVS     r1,#0x34
000330  2054              MOVS     r0,#0x54
000332  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;232    	nsAPI_SSP_Sensor_Write(0x77,0x24);
000336  2124              MOVS     r1,#0x24
000338  2077              MOVS     r0,#0x77
00033a  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;233    
;;;234    	nsAPI_SSP_Sensor_Write(0x7F,0x05);
00033e  2105              MOVS     r1,#5
000340  207f              MOVS     r0,#0x7f
000342  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;235    	nsAPI_SSP_Sensor_Write(0x44,0xA8);
000346  21a8              MOVS     r1,#0xa8
000348  2044              MOVS     r0,#0x44
00034a  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;236    	nsAPI_SSP_Sensor_Write(0x46,0x15); 
00034e  2115              MOVS     r1,#0x15
000350  2046              MOVS     r0,#0x46
000352  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;237    	nsAPI_SSP_Sensor_Write(0x4A,0x14);
000356  2114              MOVS     r1,#0x14
000358  204a              MOVS     r0,#0x4a
00035a  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;238    	nsAPI_SSP_Sensor_Write(0x51,0x10);
00035e  2110              MOVS     r1,#0x10
000360  2051              MOVS     r0,#0x51
000362  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;239    	nsAPI_SSP_Sensor_Write(0x53,0x0C); 
000366  210c              MOVS     r1,#0xc
000368  2053              MOVS     r0,#0x53
00036a  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;240    	nsAPI_SSP_Sensor_Write(0x55,0xC9); 
00036e  21c9              MOVS     r1,#0xc9
000370  2055              MOVS     r0,#0x55
000372  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;241    	nsAPI_SSP_Sensor_Write(0x5B,0xEA); 
000376  21ea              MOVS     r1,#0xea
000378  205b              MOVS     r0,#0x5b
00037a  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;242    	nsAPI_SSP_Sensor_Write(0x61,0x13);
00037e  2113              MOVS     r1,#0x13
000380  2061              MOVS     r0,#0x61
000382  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;243    	nsAPI_SSP_Sensor_Write(0x62,0x0B); 
000386  210b              MOVS     r1,#0xb
000388  2062              MOVS     r0,#0x62
00038a  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;244    	nsAPI_SSP_Sensor_Write(0x64,0x18); 
00038e  2118              MOVS     r1,#0x18
000390  2064              MOVS     r0,#0x64
000392  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;245    	nsAPI_SSP_Sensor_Write(0x6D,0x86);
000396  2186              MOVS     r1,#0x86
000398  206d              MOVS     r0,#0x6d
00039a  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;246    	nsAPI_SSP_Sensor_Write(0x7D,0x85);
00039e  2185              MOVS     r1,#0x85
0003a0  207d              MOVS     r0,#0x7d
0003a2  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;247    	nsAPI_SSP_Sensor_Write(0x7E,0x03);
0003a6  2103              MOVS     r1,#3
0003a8  207e              MOVS     r0,#0x7e
0003aa  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;248    
;;;249    
;;;250    	nsAPI_SSP_Sensor_Write(0x7F,0x06);
0003ae  2106              MOVS     r1,#6
0003b0  207f              MOVS     r0,#0x7f
0003b2  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;251    	nsAPI_SSP_Sensor_Write(0x60,0xB0);
0003b6  21b0              MOVS     r1,#0xb0
0003b8  2060              MOVS     r0,#0x60
0003ba  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;252    	nsAPI_SSP_Sensor_Write(0x61,0x00);
0003be  2100              MOVS     r1,#0
0003c0  2061              MOVS     r0,#0x61
0003c2  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;253    	nsAPI_SSP_Sensor_Write(0x6D,0x29);
0003c6  2129              MOVS     r1,#0x29
0003c8  206d              MOVS     r0,#0x6d
0003ca  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;254    	nsAPI_SSP_Sensor_Write(0x6E,0x23);
0003ce  2123              MOVS     r1,#0x23
0003d0  206e              MOVS     r0,#0x6e
0003d2  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;255    	nsAPI_SSP_Sensor_Write(0x7E,0x40);
0003d6  2140              MOVS     r1,#0x40
0003d8  207e              MOVS     r0,#0x7e
0003da  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;256    	
;;;257    	nsAPI_SSP_Sensor_Write(0x7F,0x07);
0003de  2107              MOVS     r1,#7
0003e0  207f              MOVS     r0,#0x7f
0003e2  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;258    	nsAPI_SSP_Sensor_Write(0x42,0x15);
0003e6  2115              MOVS     r1,#0x15
0003e8  2042              MOVS     r0,#0x42
0003ea  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;259    	
;;;260    	nsAPI_SSP_Sensor_Write(0x7F,0x08);
0003ee  2108              MOVS     r1,#8
0003f0  207f              MOVS     r0,#0x7f
0003f2  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;261    	nsAPI_SSP_Sensor_Write(0x42,0x28);
0003f6  2128              MOVS     r1,#0x28
0003f8  2042              MOVS     r0,#0x42
0003fa  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;262    	nsAPI_SSP_Sensor_Write(0x43,0x32);
0003fe  2132              MOVS     r1,#0x32
000400  2043              MOVS     r0,#0x43
000402  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;263    	
;;;264    	nsAPI_SSP_Sensor_Write(0x7F,0x09);
000406  2109              MOVS     r1,#9
000408  207f              MOVS     r0,#0x7f
00040a  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;265    	nsAPI_SSP_Sensor_Write(0x40,0x03);
00040e  2103              MOVS     r1,#3
000410  2040              MOVS     r0,#0x40
000412  e015              B        |L1.1088|
                  |L1.1044|
                          DCD      mouse_event_ctrl
                  |L1.1048|
                          DCD      flagOne
                  |L1.1052|
                          DCD      stop_motion
                  |L1.1056|
                          DCD      SROM
                  |L1.1060|
                          DCD      sromTableSize
                  |L1.1064|
                          DCD      s16accuX
                  |L1.1068|
                          DCD      s16accuY
                  |L1.1072|
                          DCD      count_z
                  |L1.1076|
                          DCD      0x00001388
                  |L1.1080|
                          DCD      VarA
                  |L1.1084|
                          DCD      VarB
                  |L1.1088|
000440  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;266    	
;;;267    	nsAPI_SSP_Sensor_Write(0x7F,0x0A);
000444  210a              MOVS     r1,#0xa
000446  207f              MOVS     r0,#0x7f
000448  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;268    	nsAPI_SSP_Sensor_Write(0x4A,0x28);
00044c  2128              MOVS     r1,#0x28
00044e  204a              MOVS     r0,#0x4a
000450  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;269    	nsAPI_SSP_Sensor_Write(0x4C,0x28); 
000454  2128              MOVS     r1,#0x28
000456  204c              MOVS     r0,#0x4c
000458  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;270    	nsAPI_SSP_Sensor_Write(0x49,0x00);
00045c  2100              MOVS     r1,#0
00045e  2049              MOVS     r0,#0x49
000460  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;271    	nsAPI_SSP_Sensor_Write(0x4F,0x02);
000464  2102              MOVS     r1,#2
000466  204f              MOVS     r0,#0x4f
000468  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;272    
;;;273    
;;;274    
;;;275    	nsAPI_SSP_Sensor_Write(0x7F,0x0C);
00046c  210c              MOVS     r1,#0xc
00046e  207f              MOVS     r0,#0x7f
000470  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;276    	nsAPI_SSP_Sensor_Write(0x40,0x90);
000474  2190              MOVS     r1,#0x90
000476  2040              MOVS     r0,#0x40
000478  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;277    	nsAPI_SSP_Sensor_Write(0x41,0x50);
00047c  2150              MOVS     r1,#0x50
00047e  2041              MOVS     r0,#0x41
000480  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;278    	nsAPI_SSP_Sensor_Write(0x42,0x0C);
000484  210c              MOVS     r1,#0xc
000486  2042              MOVS     r0,#0x42
000488  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;279    	nsAPI_SSP_Sensor_Write(0x43,0xA8);
00048c  21a8              MOVS     r1,#0xa8
00048e  2043              MOVS     r0,#0x43
000490  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;280    	nsAPI_SSP_Sensor_Write(0x44,0x47);
000494  2147              MOVS     r1,#0x47
000496  2044              MOVS     r0,#0x44
000498  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;281    	nsAPI_SSP_Sensor_Write(0x45,0x01);
00049c  2101              MOVS     r1,#1
00049e  2045              MOVS     r0,#0x45
0004a0  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;282    	nsAPI_SSP_Sensor_Write(0x4D,0x4F);
0004a4  214f              MOVS     r1,#0x4f
0004a6  204d              MOVS     r0,#0x4d
0004a8  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;283    	nsAPI_SSP_Sensor_Write(0x4E,0x1B);
0004ac  211b              MOVS     r1,#0x1b
0004ae  204e              MOVS     r0,#0x4e
0004b0  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;284    	nsAPI_SSP_Sensor_Write(0x54,0x00);
0004b4  2100              MOVS     r1,#0
0004b6  2054              MOVS     r0,#0x54
0004b8  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;285    	nsAPI_SSP_Sensor_Write(0x55,0x60);
0004bc  2160              MOVS     r1,#0x60
0004be  2055              MOVS     r0,#0x55
0004c0  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;286    	nsAPI_SSP_Sensor_Write(0x56,0x60);
0004c4  2160              MOVS     r1,#0x60
0004c6  2056              MOVS     r0,#0x56
0004c8  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;287    	nsAPI_SSP_Sensor_Write(0x58,0x30);
0004cc  2130              MOVS     r1,#0x30
0004ce  2058              MOVS     r0,#0x58
0004d0  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;288    	nsAPI_SSP_Sensor_Write(0x59,0x63);
0004d4  2163              MOVS     r1,#0x63
0004d6  2059              MOVS     r0,#0x59
0004d8  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;289    
;;;290    	nsAPI_SSP_Sensor_Write(0x7F,0x0D);
0004dc  210d              MOVS     r1,#0xd
0004de  207f              MOVS     r0,#0x7f
0004e0  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;291    	nsAPI_SSP_Sensor_Write(0x4B,0x23);
0004e4  2123              MOVS     r1,#0x23
0004e6  204b              MOVS     r0,#0x4b
0004e8  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;292    	nsAPI_SSP_Sensor_Write(0x4C,0x40);
0004ec  2140              MOVS     r1,#0x40
0004ee  204c              MOVS     r0,#0x4c
0004f0  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;293    	nsAPI_SSP_Sensor_Write(0x4E,0x6B);
0004f4  216b              MOVS     r1,#0x6b
0004f6  204e              MOVS     r0,#0x4e
0004f8  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;294    	nsAPI_SSP_Sensor_Write(0x5E,0xC3);
0004fc  21c3              MOVS     r1,#0xc3
0004fe  205e              MOVS     r0,#0x5e
000500  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;295    	nsAPI_SSP_Sensor_Write(0x4F,0x02);
000504  2102              MOVS     r1,#2
000506  204f              MOVS     r0,#0x4f
000508  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;296    	
;;;297    	nsAPI_SSP_Sensor_Write(0x7F,0x10);
00050c  2110              MOVS     r1,#0x10
00050e  207f              MOVS     r0,#0x7f
000510  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;298    	nsAPI_SSP_Sensor_Write(0x45,0x1E);
000514  211e              MOVS     r1,#0x1e
000516  2045              MOVS     r0,#0x45
000518  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;299    	nsAPI_SSP_Sensor_Write(0x46,0xF0);
00051c  21f0              MOVS     r1,#0xf0
00051e  2046              MOVS     r0,#0x46
000520  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;300    	nsAPI_SSP_Sensor_Write(0x48,0x0F);
000524  210f              MOVS     r1,#0xf
000526  2048              MOVS     r0,#0x48
000528  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;301    	nsAPI_SSP_Sensor_Write(0x49,0x88);
00052c  2188              MOVS     r1,#0x88
00052e  2049              MOVS     r0,#0x49
000530  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;302    	nsAPI_SSP_Sensor_Write(0x4C,0x15);
000534  2115              MOVS     r1,#0x15
000536  204c              MOVS     r0,#0x4c
000538  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;303    	nsAPI_SSP_Sensor_Write(0x4F,0x00);
00053c  2100              MOVS     r1,#0
00053e  204f              MOVS     r0,#0x4f
000540  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;304    	nsAPI_SSP_Sensor_Write(0x51,0x6F);
000544  216f              MOVS     r1,#0x6f
000546  2051              MOVS     r0,#0x51
000548  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;305    	nsAPI_SSP_Sensor_Write(0x52,0x90);
00054c  2190              MOVS     r1,#0x90
00054e  2052              MOVS     r0,#0x52
000550  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;306    	nsAPI_SSP_Sensor_Write(0x54,0x64);
000554  2164              MOVS     r1,#0x64
000556  2054              MOVS     r0,#0x54
000558  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;307    	nsAPI_SSP_Sensor_Write(0x55,0xF0);
00055c  21f0              MOVS     r1,#0xf0
00055e  2055              MOVS     r0,#0x55
000560  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;308    	nsAPI_SSP_Sensor_Write(0x5C,0x40);
000564  2140              MOVS     r1,#0x40
000566  205c              MOVS     r0,#0x5c
000568  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;309    	nsAPI_SSP_Sensor_Write(0x61,0xEE);
00056c  21ee              MOVS     r1,#0xee
00056e  2061              MOVS     r0,#0x61
000570  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;310    	nsAPI_SSP_Sensor_Write(0x62,0xE5);
000574  21e5              MOVS     r1,#0xe5
000576  2062              MOVS     r0,#0x62
000578  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;311    	
;;;312    	
;;;313    	nsAPI_SSP_Sensor_Write(0x7F,0x14);
00057c  2114              MOVS     r1,#0x14
00057e  207f              MOVS     r0,#0x7f
000580  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;314    	nsAPI_SSP_Sensor_Write(0x53,0x0C);
000584  210c              MOVS     r1,#0xc
000586  2053              MOVS     r0,#0x53
000588  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;315    	nsAPI_SSP_Sensor_Write(0x4A,0x67);
00058c  2167              MOVS     r1,#0x67
00058e  204a              MOVS     r0,#0x4a
000590  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;316    	nsAPI_SSP_Sensor_Write(0x6D,0x20);
000594  2120              MOVS     r1,#0x20
000596  206d              MOVS     r0,#0x6d
000598  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;317    	nsAPI_SSP_Sensor_Write(0x6E,0x00);
00059c  2100              MOVS     r1,#0
00059e  206e              MOVS     r0,#0x6e
0005a0  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;318    	nsAPI_SSP_Sensor_Write(0x73,0x83);
0005a4  2183              MOVS     r1,#0x83
0005a6  2073              MOVS     r0,#0x73
0005a8  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;319    	nsAPI_SSP_Sensor_Write(0x74,0x00);
0005ac  2100              MOVS     r1,#0
0005ae  2074              MOVS     r0,#0x74
0005b0  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;320    	nsAPI_SSP_Sensor_Write(0x7A,0x16);
0005b4  2116              MOVS     r1,#0x16
0005b6  207a              MOVS     r0,#0x7a
0005b8  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;321    	nsAPI_SSP_Sensor_Write(0x63,0x14);
0005bc  2114              MOVS     r1,#0x14
0005be  2063              MOVS     r0,#0x63
0005c0  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;322    	nsAPI_SSP_Sensor_Write(0x62,0x14);
0005c4  2114              MOVS     r1,#0x14
0005c6  2062              MOVS     r0,#0x62
0005c8  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;323    
;;;324    	nsAPI_SSP_Sensor_Write(0x7F,0x00);
0005cc  2100              MOVS     r1,#0
0005ce  207f              MOVS     r0,#0x7f
0005d0  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;325    	nsAPI_SSP_Sensor_Write(0x5B,0x40);
0005d4  2140              MOVS     r1,#0x40
0005d6  205b              MOVS     r0,#0x5b
0005d8  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;326    	nsAPI_SSP_Sensor_Write(0x61,0xAD);
0005dc  21ad              MOVS     r1,#0xad
0005de  2061              MOVS     r0,#0x61
0005e0  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;327    	nsAPI_SSP_Sensor_Write(0x51,0xEA);
0005e4  21ea              MOVS     r1,#0xea
0005e6  2051              MOVS     r0,#0x51
0005e8  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;328    	nsAPI_SSP_Sensor_Write(0x19,0x9F);
0005ec  219f              MOVS     r1,#0x9f
0005ee  2019              MOVS     r0,#0x19
0005f0  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;329    
;;;330    
;;;331    for(ctr = 0; ctr< 55; ctr++)	
0005f4  2500              MOVS     r5,#0
0005f6  e00b              B        |L1.1552|
                  |L1.1528|
;;;332    {
;;;333    if (nsAPI_SSP_Sensor_Read(0x20) == 0x0F) {
0005f8  2020              MOVS     r0,#0x20
0005fa  f7fffffe          BL       nsAPI_SSP_Sensor_Read
0005fe  280f              CMP      r0,#0xf
000600  d100              BNE      |L1.1540|
;;;334    
;;;335    break;
000602  e007              B        |L1.1556|
                  |L1.1540|
;;;336    }
;;;337    nsAPI_SSP_Delay1us(840);
000604  2069              MOVS     r0,#0x69
000606  00c0              LSLS     r0,r0,#3
000608  f7fffffe          BL       nsAPI_SSP_Delay1us
00060c  1c68              ADDS     r0,r5,#1              ;331
00060e  b2c5              UXTB     r5,r0                 ;331
                  |L1.1552|
000610  2d37              CMP      r5,#0x37              ;331
000612  dbf1              BLT      |L1.1528|
                  |L1.1556|
000614  bf00              NOP                            ;335
;;;338    
;;;339    }
;;;340    
;;;341    
;;;342    if (ctr==50){ 
000616  2d32              CMP      r5,#0x32
000618  d14d              BNE      |L1.1718|
;;;343    				while(nsAPI_SSP_Sensor_Read(0x20) != 0x0F)
00061a  e047              B        |L1.1708|
                  |L1.1564|
;;;344    				{
;;;345    					for(delay = 0; delay < 30; delay++){
00061c  2400              MOVS     r4,#0
00061e  e004              B        |L1.1578|
                  |L1.1568|
;;;346    					nsAPI_SSP_Delay1us(10000); //10ms
000620  48fb              LDR      r0,|L1.2576|
000622  f7fffffe          BL       nsAPI_SSP_Delay1us
000626  1c60              ADDS     r0,r4,#1              ;345
000628  b284              UXTH     r4,r0                 ;345
                  |L1.1578|
00062a  2c1e              CMP      r4,#0x1e              ;345
00062c  dbf8              BLT      |L1.1568|
;;;347    					}							
;;;348    					
;;;349    					NDrv_GPIO_SetBitValue(PORT0,20,1); // DLED 1  PORT 0 _20
00062e  2201              MOVS     r2,#1
000630  2114              MOVS     r1,#0x14
000632  2000              MOVS     r0,#0
000634  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;350    					NDrv_GPIO_SetBitValue(PORT1,26,1); // DLED 2  Port 1 _26				
000638  2201              MOVS     r2,#1
00063a  211a              MOVS     r1,#0x1a
00063c  4610              MOV      r0,r2
00063e  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;351    					NDrv_GPIO_SetBitValue(PORT1,27,0); // DLED 3  Port 1 _27	
000642  2200              MOVS     r2,#0
000644  211b              MOVS     r1,#0x1b
000646  2001              MOVS     r0,#1
000648  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;352    					
;;;353    					for(delay = 0; delay < 40; delay++){
00064c  2400              MOVS     r4,#0
00064e  e004              B        |L1.1626|
                  |L1.1616|
;;;354    					nsAPI_SSP_Delay1us(10000); //10ms
000650  48ef              LDR      r0,|L1.2576|
000652  f7fffffe          BL       nsAPI_SSP_Delay1us
000656  1c60              ADDS     r0,r4,#1              ;353
000658  b284              UXTH     r4,r0                 ;353
                  |L1.1626|
00065a  2c28              CMP      r4,#0x28              ;353
00065c  dbf8              BLT      |L1.1616|
;;;355    					}
;;;356    			
;;;357    					NDrv_GPIO_SetBitValue(PORT0,20,1); // DLED 1  PORT 0 _20
00065e  2201              MOVS     r2,#1
000660  2114              MOVS     r1,#0x14
000662  2000              MOVS     r0,#0
000664  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;358    					NDrv_GPIO_SetBitValue(PORT1,26,0); // DLED 2  Port 1 _26				
000668  2200              MOVS     r2,#0
00066a  211a              MOVS     r1,#0x1a
00066c  2001              MOVS     r0,#1
00066e  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;359    					NDrv_GPIO_SetBitValue(PORT1,27,1); // DLED 3  Port 1 _27	
000672  2201              MOVS     r2,#1
000674  211b              MOVS     r1,#0x1b
000676  4610              MOV      r0,r2
000678  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;360    					
;;;361    					for(delay = 0; delay < 50; delay++){
00067c  2400              MOVS     r4,#0
00067e  e004              B        |L1.1674|
                  |L1.1664|
;;;362    					nsAPI_SSP_Delay1us(10000); //10ms
000680  48e3              LDR      r0,|L1.2576|
000682  f7fffffe          BL       nsAPI_SSP_Delay1us
000686  1c60              ADDS     r0,r4,#1              ;361
000688  b284              UXTH     r4,r0                 ;361
                  |L1.1674|
00068a  2c32              CMP      r4,#0x32              ;361
00068c  dbf8              BLT      |L1.1664|
;;;363    					}
;;;364    			
;;;365    					NDrv_GPIO_SetBitValue(PORT0,20,0); // DLED 1  PORT 0 _20
00068e  2200              MOVS     r2,#0
000690  2114              MOVS     r1,#0x14
000692  4610              MOV      r0,r2
000694  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;366    					NDrv_GPIO_SetBitValue(PORT1,26,1); // DLED 2  Port 1 _26				
000698  2201              MOVS     r2,#1
00069a  211a              MOVS     r1,#0x1a
00069c  4610              MOV      r0,r2
00069e  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;367    					NDrv_GPIO_SetBitValue(PORT1,27,1); // DLED 3  Port 1 _27							
0006a2  2201              MOVS     r2,#1
0006a4  211b              MOVS     r1,#0x1b
0006a6  4610              MOV      r0,r2
0006a8  f7fffffe          BL       NDrv_GPIO_SetBitValue
                  |L1.1708|
0006ac  2020              MOVS     r0,#0x20              ;343
0006ae  f7fffffe          BL       nsAPI_SSP_Sensor_Read
0006b2  280f              CMP      r0,#0xf               ;343
0006b4  d1b2              BNE      |L1.1564|
                  |L1.1718|
;;;368    					}
;;;369    			}
;;;370    	nsAPI_SSP_Sensor_Write(0x19,0x10);
0006b6  2110              MOVS     r1,#0x10
0006b8  2019              MOVS     r0,#0x19
0006ba  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;371    	nsAPI_SSP_Sensor_Write(0x61,0xD5);	
0006be  21d5              MOVS     r1,#0xd5
0006c0  2061              MOVS     r0,#0x61
0006c2  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;372    	nsAPI_SSP_Sensor_Write(0x40,0x00);				
0006c6  2100              MOVS     r1,#0
0006c8  2040              MOVS     r0,#0x40
0006ca  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;373    	nsAPI_SSP_Sensor_Write(0x7F,0x00);
0006ce  2100              MOVS     r1,#0
0006d0  207f              MOVS     r0,#0x7f
0006d2  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;374    	nsAPI_SSP_Sensor_Write(0x4D,0xD0);
0006d6  21d0              MOVS     r1,#0xd0
0006d8  204d              MOVS     r0,#0x4d
0006da  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;375    
;;;376    
;;;377    
;;;378    	u8InitTemp = (nsAPI_SSP_Sensor_Read(0x02));		
0006de  2002              MOVS     r0,#2
0006e0  f7fffffe          BL       nsAPI_SSP_Sensor_Read
0006e4  4606              MOV      r6,r0
;;;379    	u8InitTemp = (nsAPI_SSP_Sensor_Read(0x03));
0006e6  2003              MOVS     r0,#3
0006e8  f7fffffe          BL       nsAPI_SSP_Sensor_Read
0006ec  4606              MOV      r6,r0
;;;380    	u8InitTemp = (nsAPI_SSP_Sensor_Read(0x04));
0006ee  2004              MOVS     r0,#4
0006f0  f7fffffe          BL       nsAPI_SSP_Sensor_Read
0006f4  4606              MOV      r6,r0
;;;381    	u8InitTemp = (nsAPI_SSP_Sensor_Read(0x05));
0006f6  2005              MOVS     r0,#5
0006f8  f7fffffe          BL       nsAPI_SSP_Sensor_Read
0006fc  4606              MOV      r6,r0
;;;382    	u8InitTemp = (nsAPI_SSP_Sensor_Read(0x06));
0006fe  2006              MOVS     r0,#6
000700  f7fffffe          BL       nsAPI_SSP_Sensor_Read
000704  4606              MOV      r6,r0
;;;383    			
;;;384    				nsAPI_SSP_Delay1us(10000);	
000706  48c2              LDR      r0,|L1.2576|
000708  f7fffffe          BL       nsAPI_SSP_Delay1us
;;;385    
;;;386    // sensor initialization End
;;;387    					
;;;388    	g_Main_Setting.EPInOutReq &= ~EP1_IN;				// Reset EP1 flag
00070c  48c1              LDR      r0,|L1.2580|
00070e  7900              LDRB     r0,[r0,#4]  ; g_Main_Setting
000710  0841              LSRS     r1,r0,#1
000712  0049              LSLS     r1,r1,#1
000714  48bf              LDR      r0,|L1.2580|
000716  7101              STRB     r1,[r0,#4]
;;;389    	nsAPI_USB_WriteEP(	HID_EP1_IN,
000718  7942              LDRB     r2,[r0,#5]  ; g_Main_Setting
00071a  4601              MOV      r1,r0
00071c  3920              SUBS     r1,r1,#0x20
00071e  2081              MOVS     r0,#0x81
000720  f7fffffe          BL       nsAPI_USB_WriteEP
;;;390    						&g_Main_Setting.InReport[0],	// Dennis:
;;;391    						g_Main_Setting.InReportSize);	// This one is a must, else usb won't work
;;;392    
;;;393    }
000724  bdf8              POP      {r3-r7,pc}
;;;394    
                          ENDP

                  esd_Check PROC
;;;395    RetU8 esd_Check(void)
000726  b510              PUSH     {r4,lr}
;;;396    {
;;;397    	U8 esdTemp = 0;
000728  2400              MOVS     r4,#0
;;;398    
;;;399    	esdTemp = nsAPI_SSP_Sensor_Read(0x24);
00072a  2024              MOVS     r0,#0x24
00072c  f7fffffe          BL       nsAPI_SSP_Sensor_Read
000730  4604              MOV      r4,r0
;;;400    	nsAPI_SSP_Delay1us(20);
000732  2014              MOVS     r0,#0x14
000734  f7fffffe          BL       nsAPI_SSP_Delay1us
;;;401      	nsAPI_SSP_Sensor_Write(0x50, 0x01);
000738  2101              MOVS     r1,#1
00073a  2050              MOVS     r0,#0x50
00073c  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;402    	nsAPI_SSP_Delay1us(180);
000740  20b4              MOVS     r0,#0xb4
000742  f7fffffe          BL       nsAPI_SSP_Delay1us
;;;403    
;;;404    	if(!IS_BIT_SET( esdTemp,BIT6))
000746  2040              MOVS     r0,#0x40
000748  4020              ANDS     r0,r0,r4
00074a  2840              CMP      r0,#0x40
00074c  d003              BEQ      |L1.1878|
;;;405    	{
;;;406    		nsAPI_SSP_Sensor_Init();			// Re init Sensor
00074e  f7fffffe          BL       nsAPI_SSP_Sensor_Init
;;;407    		return 1;
000752  2001              MOVS     r0,#1
                  |L1.1876|
;;;408    	}
;;;409    	else
;;;410    		return 0;
;;;411    }
000754  bd10              POP      {r4,pc}
                  |L1.1878|
000756  2000              MOVS     r0,#0                 ;410
000758  e7fc              B        |L1.1876|
;;;412    
                          ENDP

                  nsAPI_SSP_Sensor_Monitor PROC
;;;413    void nsAPI_SSP_Sensor_Monitor(void)
00075a  b510              PUSH     {r4,lr}
;;;414    { 	
;;;415    	__disable_irq();
00075c  b672              CPSID    i
;;;416    	if (poll_motion)	// this loop is to be executed in every 1ms
00075e  48ae              LDR      r0,|L1.2584|
000760  8800              LDRH     r0,[r0,#0]  ; poll_motion
000762  2800              CMP      r0,#0
000764  d07e              BEQ      |L1.2148|
;;;417    	{		
;;;418    		u16temp_x.w  = 0;
000766  2000              MOVS     r0,#0
000768  49ac              LDR      r1,|L1.2588|
00076a  8008              STRH     r0,[r1,#0]
;;;419    		u16temp_y.w  = 0;
00076c  49ac              LDR      r1,|L1.2592|
00076e  8008              STRH     r0,[r1,#0]
;;;420    		
;;;421    		// report the scaled 1ms motion data
;;;422    		if (report1ms_data_x.w != 0 || report1ms_data_y.w != 0 ||((g_Main_Setting.MouseEvent & MAIN_FLAG_MOUSE_REPORT_READY) == MAIN_FLAG_MOUSE_REPORT_READY ))
000770  48ac              LDR      r0,|L1.2596|
000772  8800              LDRH     r0,[r0,#0]  ; report1ms_data_x
000774  2800              CMP      r0,#0
000776  d10a              BNE      |L1.1934|
000778  48ab              LDR      r0,|L1.2600|
00077a  8800              LDRH     r0,[r0,#0]  ; report1ms_data_y
00077c  2800              CMP      r0,#0
00077e  d106              BNE      |L1.1934|
000780  48a4              LDR      r0,|L1.2580|
000782  3820              SUBS     r0,r0,#0x20
000784  8cc0              LDRH     r0,[r0,#0x26]  ; g_Main_Setting
000786  07c0              LSLS     r0,r0,#31
000788  0fc0              LSRS     r0,r0,#31
00078a  2800              CMP      r0,#0
00078c  d001              BEQ      |L1.1938|
                  |L1.1934|
;;;423    		{
;;;424    			//g_Main_Setting.MouseEvent	   |= (MAIN_FLAG_MOUSE_EVENT|MAIN_FLAG_MOUSE_REPORT_READY);
;;;425    			nsAPI_Main_MouseEventHandle();
00078e  f7fffffe          BL       nsAPI_Main_MouseEventHandle
                  |L1.1938|
;;;426    		}			
;;;427    
;;;428    		//motion burst
;;;429    		NCS_LOW();
000792  2200              MOVS     r2,#0
000794  2102              MOVS     r1,#2
000796  4610              MOV      r0,r2
000798  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;430    		nsAPI_SSP_Delay1us(1);	// 120 ns min needed		 	
00079c  2001              MOVS     r0,#1
00079e  f7fffffe          BL       nsAPI_SSP_Delay1us
;;;431    		tempBurst = 0x16;				// send any value to motion burst register 0x16
0007a2  2016              MOVS     r0,#0x16
0007a4  49a1              LDR      r1,|L1.2604|
0007a6  7008              STRB     r0,[r1,#0]
;;;432    		nsAPI_SSP_Send(&tempBurst,1);
0007a8  2101              MOVS     r1,#1
0007aa  48a0              LDR      r0,|L1.2604|
0007ac  f7fffffe          BL       nsAPI_SSP_Send
;;;433    		nsAPI_SSP_Delay1us(2);  //2 us tSRAD
0007b0  2002              MOVS     r0,#2
0007b2  f7fffffe          BL       nsAPI_SSP_Delay1us
;;;434    
;;;435    		for(tempBurst = 0; tempBurst < ARR_SIZE; tempBurst++)
0007b6  2000              MOVS     r0,#0
0007b8  499c              LDR      r1,|L1.2604|
0007ba  7008              STRB     r0,[r1,#0]
0007bc  e00b              B        |L1.2006|
                  |L1.1982|
;;;436    			nsAPI_SSP_Receive( &u8temp[tempBurst],1);
0007be  499c              LDR      r1,|L1.2608|
0007c0  4a9a              LDR      r2,|L1.2604|
0007c2  7812              LDRB     r2,[r2,#0]  ; tempBurst
0007c4  1888              ADDS     r0,r1,r2
0007c6  2101              MOVS     r1,#1
0007c8  f7fffffe          BL       nsAPI_SSP_Receive
0007cc  4897              LDR      r0,|L1.2604|
0007ce  7800              LDRB     r0,[r0,#0]            ;435  ; tempBurst
0007d0  1c40              ADDS     r0,r0,#1              ;435
0007d2  4996              LDR      r1,|L1.2604|
0007d4  7008              STRB     r0,[r1,#0]            ;435
                  |L1.2006|
0007d6  4895              LDR      r0,|L1.2604|
0007d8  7800              LDRB     r0,[r0,#0]            ;435  ; tempBurst
0007da  2806              CMP      r0,#6                 ;435
0007dc  dbef              BLT      |L1.1982|
;;;437    		
;;;438    		nsAPI_SSP_Delay1us(1); // 500 ns min tEXIT
0007de  2001              MOVS     r0,#1
0007e0  f7fffffe          BL       nsAPI_SSP_Delay1us
;;;439    		NCS_HIGH();
0007e4  2201              MOVS     r2,#1
0007e6  2102              MOVS     r1,#2
0007e8  2000              MOVS     r0,#0
0007ea  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;440    
;;;441    		u16temp_x.b[0] = u8temp[2];
0007ee  4890              LDR      r0,|L1.2608|
0007f0  7880              LDRB     r0,[r0,#2]  ; u8temp
0007f2  b240              SXTB     r0,r0
0007f4  4989              LDR      r1,|L1.2588|
0007f6  7008              STRB     r0,[r1,#0]
;;;442    		u16temp_x.b[1] = u8temp[3];
0007f8  488d              LDR      r0,|L1.2608|
0007fa  78c0              LDRB     r0,[r0,#3]  ; u8temp
0007fc  b240              SXTB     r0,r0
0007fe  7048              STRB     r0,[r1,#1]
;;;443    		u16temp_y.b[0] = u8temp[4];
000800  488b              LDR      r0,|L1.2608|
000802  7900              LDRB     r0,[r0,#4]  ; u8temp
000804  b240              SXTB     r0,r0
000806  4986              LDR      r1,|L1.2592|
000808  7008              STRB     r0,[r1,#0]
;;;444    		u16temp_y.b[1] = u8temp[5];
00080a  4889              LDR      r0,|L1.2608|
00080c  7940              LDRB     r0,[r0,#5]  ; u8temp
00080e  b240              SXTB     r0,r0
000810  7048              STRB     r0,[r1,#1]
;;;445    		
;;;446    		s16accuX.w += u16temp_x.w;
000812  4888              LDR      r0,|L1.2612|
000814  8800              LDRH     r0,[r0,#0]  ; s16accuX
000816  4981              LDR      r1,|L1.2588|
000818  8809              LDRH     r1,[r1,#0]  ; u16temp_x
00081a  1840              ADDS     r0,r0,r1
00081c  b200              SXTH     r0,r0
00081e  4985              LDR      r1,|L1.2612|
000820  8008              STRH     r0,[r1,#0]
;;;447    		s16accuY.w += u16temp_y.w;
000822  4885              LDR      r0,|L1.2616|
000824  8800              LDRH     r0,[r0,#0]  ; s16accuY
000826  497e              LDR      r1,|L1.2592|
000828  8809              LDRH     r1,[r1,#0]  ; u16temp_y
00082a  1840              ADDS     r0,r0,r1
00082c  b200              SXTH     r0,r0
00082e  4982              LDR      r1,|L1.2616|
000830  8008              STRH     r0,[r1,#0]
;;;448    		
;;;449    		//minus prebious 1ms scalred motion data to get the remainder motion data
;;;450    		s16accuX.w = s16accuX.w - report1ms_data_x.w;
000832  4880              LDR      r0,|L1.2612|
000834  8800              LDRH     r0,[r0,#0]  ; s16accuX
000836  497b              LDR      r1,|L1.2596|
000838  8809              LDRH     r1,[r1,#0]  ; report1ms_data_x
00083a  1a40              SUBS     r0,r0,r1
00083c  b200              SXTH     r0,r0
00083e  497d              LDR      r1,|L1.2612|
000840  8008              STRH     r0,[r1,#0]
;;;451    		s16accuY.w = s16accuY.w - report1ms_data_y.w;
000842  487d              LDR      r0,|L1.2616|
000844  8800              LDRH     r0,[r0,#0]  ; s16accuY
000846  4978              LDR      r1,|L1.2600|
000848  8809              LDRH     r1,[r1,#0]  ; report1ms_data_y
00084a  1a40              SUBS     r0,r0,r1
00084c  b200              SXTH     r0,r0
00084e  497a              LDR      r1,|L1.2616|
000850  8008              STRH     r0,[r1,#0]
;;;452    		
;;;453    		report1ms_data_x.w = 0;
000852  2000              MOVS     r0,#0
000854  4973              LDR      r1,|L1.2596|
000856  8008              STRH     r0,[r1,#0]
;;;454    		report1ms_data_y.w = 0;
000858  4973              LDR      r1,|L1.2600|
00085a  8008              STRH     r0,[r1,#0]
;;;455    		
;;;456    		poll_motion = 0;
00085c  496e              LDR      r1,|L1.2584|
00085e  8008              STRH     r0,[r1,#0]
;;;457    		not_read = 1;		
000860  2001              MOVS     r0,#1
000862  e000              B        |L1.2150|
                  |L1.2148|
000864  e009              B        |L1.2170|
                  |L1.2150|
000866  4975              LDR      r1,|L1.2620|
000868  7008              STRB     r0,[r1,#0]
;;;458    		motion_sync_counter = (int16_t)LPC_CT16B0->TC;		
00086a  4875              LDR      r0,|L1.2624|
00086c  6880              LDR      r0,[r0,#8]
00086e  b200              SXTH     r0,r0
000870  4974              LDR      r1,|L1.2628|
000872  8008              STRH     r0,[r1,#0]
;;;459    		poll_counter = 0;
000874  2000              MOVS     r0,#0
000876  4974              LDR      r1,|L1.2632|
000878  8008              STRH     r0,[r1,#0]
                  |L1.2170|
;;;460    	}
;;;461    
;;;462    	if((not_read == 1) && (CHECK_MOTION_PIN() == LOW))
00087a  4870              LDR      r0,|L1.2620|
00087c  7800              LDRB     r0,[r0,#0]  ; not_read
00087e  2801              CMP      r0,#1
                  |L1.2176|
000880  d17e              BNE      |L1.2432|
000882  07c1              LSLS     r1,r0,#31
000884  f7fffffe          BL       nsAPI_GPIO_GetPinValue
000888  2800              CMP      r0,#0
00088a  d1f9              BNE      |L1.2176|
;;;463    	{
;;;464    	u16temp_x.w  = 0;
00088c  4963              LDR      r1,|L1.2588|
00088e  8008              STRH     r0,[r1,#0]
;;;465    	u16temp_y.w  = 0;
000890  4963              LDR      r1,|L1.2592|
000892  8008              STRH     r0,[r1,#0]
;;;466    	motion_sync_counter = (int16_t)LPC_CT16B0->TC - motion_sync_counter;
000894  486a              LDR      r0,|L1.2624|
000896  6880              LDR      r0,[r0,#8]
000898  496a              LDR      r1,|L1.2628|
00089a  8809              LDRH     r1,[r1,#0]  ; motion_sync_counter
00089c  1a40              SUBS     r0,r0,r1
00089e  b200              SXTH     r0,r0
0008a0  4968              LDR      r1,|L1.2628|
0008a2  8008              STRH     r0,[r1,#0]
;;;467    			  			
;;;468    	NCS_LOW();
0008a4  2200              MOVS     r2,#0
0008a6  2102              MOVS     r1,#2
0008a8  4610              MOV      r0,r2
0008aa  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;469    	nsAPI_SSP_Delay1us(1);	// 120 ns min needed		 	
0008ae  2001              MOVS     r0,#1
0008b0  f7fffffe          BL       nsAPI_SSP_Delay1us
;;;470    
;;;471    	tempBurst = 0x16;				// send any value to motion burst register 0x16
0008b4  2016              MOVS     r0,#0x16
0008b6  495d              LDR      r1,|L1.2604|
0008b8  7008              STRB     r0,[r1,#0]
;;;472    	nsAPI_SSP_Send(&tempBurst,1);
0008ba  2101              MOVS     r1,#1
0008bc  485b              LDR      r0,|L1.2604|
0008be  f7fffffe          BL       nsAPI_SSP_Send
;;;473    	nsAPI_SSP_Delay1us(2); //2 us tSRAD
0008c2  2002              MOVS     r0,#2
0008c4  f7fffffe          BL       nsAPI_SSP_Delay1us
;;;474    
;;;475    	for(tempBurst = 0; tempBurst < ARR_SIZE; tempBurst++)
0008c8  2000              MOVS     r0,#0
0008ca  4958              LDR      r1,|L1.2604|
0008cc  7008              STRB     r0,[r1,#0]
0008ce  e00b              B        |L1.2280|
                  |L1.2256|
;;;476    		nsAPI_SSP_Receive( &u8temp[tempBurst],1);
0008d0  4957              LDR      r1,|L1.2608|
0008d2  4a56              LDR      r2,|L1.2604|
0008d4  7812              LDRB     r2,[r2,#0]  ; tempBurst
0008d6  1888              ADDS     r0,r1,r2
0008d8  2101              MOVS     r1,#1
0008da  f7fffffe          BL       nsAPI_SSP_Receive
0008de  4853              LDR      r0,|L1.2604|
0008e0  7800              LDRB     r0,[r0,#0]            ;475  ; tempBurst
0008e2  1c40              ADDS     r0,r0,#1              ;475
0008e4  4951              LDR      r1,|L1.2604|
0008e6  7008              STRB     r0,[r1,#0]            ;475
                  |L1.2280|
0008e8  4850              LDR      r0,|L1.2604|
0008ea  7800              LDRB     r0,[r0,#0]            ;475  ; tempBurst
0008ec  2806              CMP      r0,#6                 ;475
0008ee  dbef              BLT      |L1.2256|
;;;477    	
;;;478    	nsAPI_SSP_Delay1us(1); // 500 ns min tEXIT
0008f0  2001              MOVS     r0,#1
0008f2  f7fffffe          BL       nsAPI_SSP_Delay1us
;;;479    	NCS_HIGH();
0008f6  2201              MOVS     r2,#1
0008f8  2102              MOVS     r1,#2
0008fa  2000              MOVS     r0,#0
0008fc  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;480    
;;;481    	u16temp_x.b[0] = u8temp[2];
000900  484b              LDR      r0,|L1.2608|
000902  7880              LDRB     r0,[r0,#2]  ; u8temp
000904  b240              SXTB     r0,r0
000906  4945              LDR      r1,|L1.2588|
000908  7008              STRB     r0,[r1,#0]
;;;482    	u16temp_x.b[1] = u8temp[3];
00090a  4849              LDR      r0,|L1.2608|
00090c  78c0              LDRB     r0,[r0,#3]  ; u8temp
00090e  b240              SXTB     r0,r0
000910  7048              STRB     r0,[r1,#1]
;;;483    	u16temp_y.b[0] = u8temp[4];
000912  4847              LDR      r0,|L1.2608|
000914  7900              LDRB     r0,[r0,#4]  ; u8temp
000916  b240              SXTB     r0,r0
000918  4941              LDR      r1,|L1.2592|
00091a  7008              STRB     r0,[r1,#0]
;;;484    	u16temp_y.b[1] = u8temp[5];
00091c  4844              LDR      r0,|L1.2608|
00091e  7940              LDRB     r0,[r0,#5]  ; u8temp
000920  b240              SXTB     r0,r0
000922  7048              STRB     r0,[r1,#1]
;;;485    
;;;486    	
;;;487    	s16accuX.w += u16temp_x.w;
000924  4843              LDR      r0,|L1.2612|
000926  8800              LDRH     r0,[r0,#0]  ; s16accuX
000928  493c              LDR      r1,|L1.2588|
00092a  8809              LDRH     r1,[r1,#0]  ; u16temp_x
00092c  1840              ADDS     r0,r0,r1
00092e  b200              SXTH     r0,r0
000930  4940              LDR      r1,|L1.2612|
000932  8008              STRH     r0,[r1,#0]
;;;488    	s16accuY.w += u16temp_y.w;
000934  4840              LDR      r0,|L1.2616|
000936  8800              LDRH     r0,[r0,#0]  ; s16accuY
000938  4939              LDR      r1,|L1.2592|
00093a  8809              LDRH     r1,[r1,#0]  ; u16temp_y
00093c  1840              ADDS     r0,r0,r1
00093e  b200              SXTH     r0,r0
000940  493d              LDR      r1,|L1.2616|
000942  8008              STRH     r0,[r1,#0]
;;;489    	
;;;490    	report1ms_data_x.w = s16accuX.w * 1000/ (1000 + (motion_sync_counter));
000944  4a3f              LDR      r2,|L1.2628|
000946  2300              MOVS     r3,#0
000948  5ed3              LDRSH    r3,[r2,r3]  ; motion_sync_counter
00094a  227d              MOVS     r2,#0x7d
00094c  00d2              LSLS     r2,r2,#3
00094e  1899              ADDS     r1,r3,r2
000950  4b38              LDR      r3,|L1.2612|
000952  2200              MOVS     r2,#0
000954  5e9a              LDRSH    r2,[r3,r2]  ; s16accuX
000956  237d              MOVS     r3,#0x7d
000958  00db              LSLS     r3,r3,#3
00095a  435a              MULS     r2,r3,r2
00095c  4610              MOV      r0,r2
00095e  f7fffffe          BL       __aeabi_idivmod
000962  b200              SXTH     r0,r0
000964  492f              LDR      r1,|L1.2596|
000966  8008              STRH     r0,[r1,#0]
;;;491    	report1ms_data_y.w = s16accuY.w * 1000/ (1000 + (motion_sync_counter));
000968  4b36              LDR      r3,|L1.2628|
00096a  2200              MOVS     r2,#0
00096c  5e9a              LDRSH    r2,[r3,r2]  ; motion_sync_counter
00096e  237d              MOVS     r3,#0x7d
000970  00db              LSLS     r3,r3,#3
000972  18d1              ADDS     r1,r2,r3
000974  4b30              LDR      r3,|L1.2616|
000976  2200              MOVS     r2,#0
000978  5e9a              LDRSH    r2,[r3,r2]  ; s16accuY
00097a  237d              MOVS     r3,#0x7d
00097c  00db              LSLS     r3,r3,#3
00097e  e000              B        |L1.2434|
                  |L1.2432|
000980  e009              B        |L1.2454|
                  |L1.2434|
000982  435a              MULS     r2,r3,r2
000984  4610              MOV      r0,r2
000986  f7fffffe          BL       __aeabi_idivmod
00098a  b200              SXTH     r0,r0
00098c  4926              LDR      r1,|L1.2600|
00098e  8008              STRH     r0,[r1,#0]
;;;492    	
;;;493    	not_read = 0;
000990  2000              MOVS     r0,#0
000992  492a              LDR      r1,|L1.2620|
000994  7008              STRB     r0,[r1,#0]
                  |L1.2454|
;;;494    		
;;;495    	}	
;;;496    	__enable_irq();
000996  b662              CPSIE    i
;;;497    
;;;498    }
000998  bd10              POP      {r4,pc}
;;;499    
                          ENDP

                  nsAPI_MouseScanButton PROC
;;;500    RetU8 nsAPI_MouseScanButton(void)
00099a  b57f              PUSH     {r0-r6,lr}
;;;501    {
;;;502    	static U8 cpiTemp	 = 2;
;;;503    	static U8 trigger_send_cpi_click = 0;
;;;504    
;;;505    	U8 Ret = FALSE;
00099c  2600              MOVS     r6,#0
;;;506    	U32 buttonTemp0 = 0;
00099e  2400              MOVS     r4,#0
;;;507    	U32 buttonTemp1 = 0;
0009a0  2500              MOVS     r5,#0
;;;508    		
;;;509    	U8 cpi_hi_data[8] = {CPI_HI_0, CPI_HI_1, CPI_HI_2, CPI_HI_3,
0009a2  a12a              ADR      r1,|L1.2636|
0009a4  c903              LDM      r1,{r0,r1}
0009a6  9103              STR      r1,[sp,#0xc]
0009a8  9002              STR      r0,[sp,#8]
;;;510    						CPI_HI_4, CPI_HI_5, CPI_HI_6, CPI_HI_7};
;;;511    	
;;;512    	U8 cpi_lo_data[8] = {CPI_LO_0, CPI_LO_1, CPI_LO_2, CPI_LO_3,
0009aa  a12a              ADR      r1,|L1.2644|
0009ac  c903              LDM      r1,{r0,r1}
0009ae  9101              STR      r1,[sp,#4]
0009b0  9000              STR      r0,[sp,#0]
;;;513    						CPI_LO_4, CPI_LO_5, CPI_LO_6, CPI_LO_7};
;;;514    
;;;515    
;;;516    
;;;517    	buttonTemp0 = nsAPI_GPIO_GetPinValue(PORT0,0xFF);
0009b2  21ff              MOVS     r1,#0xff
0009b4  2000              MOVS     r0,#0
0009b6  f7fffffe          BL       nsAPI_GPIO_GetPinValue
0009ba  4604              MOV      r4,r0
;;;518    	buttonTemp1 = nsAPI_GPIO_GetPinValue(PORT1,0xFF);
0009bc  21ff              MOVS     r1,#0xff
0009be  2001              MOVS     r0,#1
0009c0  f7fffffe          BL       nsAPI_GPIO_GetPinValue
0009c4  4605              MOV      r5,r0
;;;519    
;;;520    	if( ( (buttonTemp0 & BUTTON_MASK_0) != BUTTON_MASK_0) || 
0009c6  2007              MOVS     r0,#7
0009c8  0440              LSLS     r0,r0,#17
0009ca  4020              ANDS     r0,r0,r4
0009cc  2107              MOVS     r1,#7
0009ce  0449              LSLS     r1,r1,#17
0009d0  4288              CMP      r0,r1
0009d2  d106              BNE      |L1.2530|
;;;521    		( (buttonTemp1 & BUTTON_MASK_1) != BUTTON_MASK_1) )
0009d4  2003              MOVS     r0,#3
0009d6  03c0              LSLS     r0,r0,#15
0009d8  4028              ANDS     r0,r0,r5
0009da  2103              MOVS     r1,#3
0009dc  03c9              LSLS     r1,r1,#15
0009de  4288              CMP      r0,r1
0009e0  d068              BEQ      |L1.2740|
                  |L1.2530|
;;;522    	{
;;;523    		if(g_GpioButtonEvent.ButtonStatus != GPIO_SCANKEY_PR)
0009e2  481e              LDR      r0,|L1.2652|
0009e4  8800              LDRH     r0,[r0,#0]  ; g_GpioButtonEvent
0009e6  2801              CMP      r0,#1
0009e8  d06f              BEQ      |L1.2762|
;;;524    		{
;;;525    			if(!(buttonTemp1 & BUTTON_RIGHT))
0009ea  2001              MOVS     r0,#1
0009ec  03c0              LSLS     r0,r0,#15
0009ee  4028              ANDS     r0,r0,r5
0009f0  2800              CMP      r0,#0
0009f2  d103              BNE      |L1.2556|
;;;526    			{
;;;527    				g_GpioButtonEvent.ButtonEvent = RIGHT_CLICKED;
0009f4  2002              MOVS     r0,#2
0009f6  4919              LDR      r1,|L1.2652|
0009f8  8048              STRH     r0,[r1,#2]
0009fa  e055              B        |L1.2728|
                  |L1.2556|
;;;528    			}
;;;529    			else if(!(buttonTemp0 & BUTTON_MID))
0009fc  2001              MOVS     r0,#1
0009fe  0440              LSLS     r0,r0,#17
000a00  4020              ANDS     r0,r0,r4
000a02  2800              CMP      r0,#0
000a04  d12c              BNE      |L1.2656|
;;;530    			{
;;;531    				g_GpioButtonEvent.ButtonEvent = MID_CLICKED;
000a06  2004              MOVS     r0,#4
000a08  4914              LDR      r1,|L1.2652|
000a0a  8048              STRH     r0,[r1,#2]
000a0c  e04c              B        |L1.2728|
000a0e  0000              DCW      0x0000
                  |L1.2576|
                          DCD      0x00002710
                  |L1.2580|
                          DCD      g_Main_Setting+0x20
                  |L1.2584|
                          DCD      poll_motion
                  |L1.2588|
                          DCD      u16temp_x
                  |L1.2592|
                          DCD      u16temp_y
                  |L1.2596|
                          DCD      report1ms_data_x
                  |L1.2600|
                          DCD      report1ms_data_y
                  |L1.2604|
                          DCD      tempBurst
                  |L1.2608|
                          DCD      u8temp
                  |L1.2612|
                          DCD      s16accuX
                  |L1.2616|
                          DCD      s16accuY
                  |L1.2620|
                          DCD      not_read
                  |L1.2624|
                          DCD      0x4000c000
                  |L1.2628|
                          DCD      motion_sync_counter
                  |L1.2632|
                          DCD      poll_counter
                  |L1.2636|
000a4c  00                DCB      0
000a4d  00                DCB      0
000a4e  00                DCB      0
000a4f  00                DCB      0
000a50  00                DCB      0
000a51  00                DCB      0
000a52  00                DCB      0
000a53  01                DCB      1
                  |L1.2644|
000a54  0f133c64          DCB      15,19,"<d",145,202,161,191
000a58  91caa1bf
                  |L1.2652|
                          DCD      g_GpioButtonEvent
                  |L1.2656|
;;;532    			}
;;;533    			else if(!(buttonTemp0 & BUTTON_LEFT))
000a60  2001              MOVS     r0,#1
000a62  0480              LSLS     r0,r0,#18
000a64  4020              ANDS     r0,r0,r4
000a66  2800              CMP      r0,#0
000a68  d103              BNE      |L1.2674|
;;;534    			{
;;;535    				g_GpioButtonEvent.ButtonEvent = LEFT_CLICKED;
000a6a  2001              MOVS     r0,#1
000a6c  498d              LDR      r1,|L1.3236|
000a6e  8048              STRH     r0,[r1,#2]
000a70  e01a              B        |L1.2728|
                  |L1.2674|
;;;536    			}
;;;537    			else if(!(buttonTemp0 & BUTTON_CPI_P))
000a72  2001              MOVS     r0,#1
000a74  04c0              LSLS     r0,r0,#19
000a76  4020              ANDS     r0,r0,r4
000a78  2800              CMP      r0,#0
000a7a  d103              BNE      |L1.2692|
;;;538    			{
;;;539    				g_GpioButtonEvent.ButtonEvent = CPI_P_CLICKED;
000a7c  2008              MOVS     r0,#8
000a7e  4989              LDR      r1,|L1.3236|
000a80  8048              STRH     r0,[r1,#2]
000a82  e011              B        |L1.2728|
                  |L1.2692|
;;;540    			}
;;;541    			else if(!(buttonTemp1 & BUTTON_CPI_M))
000a84  2001              MOVS     r0,#1
000a86  0400              LSLS     r0,r0,#16
000a88  4028              ANDS     r0,r0,r5
000a8a  2800              CMP      r0,#0
000a8c  d103              BNE      |L1.2710|
;;;542    			{
;;;543    				g_GpioButtonEvent.ButtonEvent = CPI_M_CLICKED;
000a8e  2010              MOVS     r0,#0x10
000a90  4984              LDR      r1,|L1.3236|
000a92  8048              STRH     r0,[r1,#2]
000a94  e008              B        |L1.2728|
                  |L1.2710|
;;;544    			}
;;;545    			else
;;;546    			{
;;;547    				g_GpioButtonEvent.ButtonEvent = 0;
000a96  2000              MOVS     r0,#0
000a98  4982              LDR      r1,|L1.3236|
000a9a  8048              STRH     r0,[r1,#2]
;;;548    				g_Main_Setting.MouseEvent &= ~MAIN_FLAG_MOUSE_BUTTON_EVENT;
000a9c  4882              LDR      r0,|L1.3240|
000a9e  8cc0              LDRH     r0,[r0,#0x26]  ; g_Main_Setting
000aa0  2102              MOVS     r1,#2
000aa2  4388              BICS     r0,r0,r1
000aa4  4980              LDR      r1,|L1.3240|
000aa6  84c8              STRH     r0,[r1,#0x26]
                  |L1.2728|
;;;549    			}
;;;550    	
;;;551    			if(g_GpioButtonEvent.ButtonEvent > 0)
000aa8  487e              LDR      r0,|L1.3236|
000aaa  8840              LDRH     r0,[r0,#2]  ; g_GpioButtonEvent
000aac  2800              CMP      r0,#0
000aae  dd0c              BLE      |L1.2762|
;;;552    			Ret = TRUE;
000ab0  2601              MOVS     r6,#1
000ab2  e00a              B        |L1.2762|
                  |L1.2740|
;;;553    		}
;;;554    	}
;;;555    	else
;;;556    	{
;;;557    		// Willie 18-03-2016
;;;558    		// Added additional check, if button event is non-zero, set to zero here due to no click detected,
;;;559    		// in order to reset clicking state machine 
;;;560    		if((g_GpioButtonEvent.ButtonStatus == GPIO_SCANKEY_PR )|| (g_GpioButtonEvent.ButtonEvent != 0) )
000ab4  487b              LDR      r0,|L1.3236|
000ab6  8800              LDRH     r0,[r0,#0]  ; g_GpioButtonEvent
000ab8  2801              CMP      r0,#1
000aba  d003              BEQ      |L1.2756|
000abc  4879              LDR      r0,|L1.3236|
000abe  8840              LDRH     r0,[r0,#2]  ; g_GpioButtonEvent
000ac0  2800              CMP      r0,#0
000ac2  d002              BEQ      |L1.2762|
                  |L1.2756|
;;;561    		{	
;;;562    			g_GpioButtonEvent.ButtonEvent = 0;
000ac4  2000              MOVS     r0,#0
000ac6  4977              LDR      r1,|L1.3236|
000ac8  8048              STRH     r0,[r1,#2]
                  |L1.2762|
;;;563    		}
;;;564    	}
;;;565    
;;;566    	//if((CHECK_MOTION_PIN() == HIGH) && (glitch_prevention == 0))  
;;;567    	if(glitch_prevention == 0)  
000aca  4878              LDR      r0,|L1.3244|
000acc  8800              LDRH     r0,[r0,#0]  ; glitch_prevention
000ace  2800              CMP      r0,#0
000ad0  d179              BNE      |L1.3014|
;;;568    	{
;;;569    	
;;;570    		if( ( g_GpioButtonEvent.ButtonEvent == CPI_P_CLICKED) || 
000ad2  4874              LDR      r0,|L1.3236|
000ad4  8840              LDRH     r0,[r0,#2]  ; g_GpioButtonEvent
000ad6  2808              CMP      r0,#8
000ad8  d003              BEQ      |L1.2786|
;;;571    			( g_GpioButtonEvent.ButtonEvent == CPI_M_CLICKED) )
000ada  4872              LDR      r0,|L1.3236|
000adc  8840              LDRH     r0,[r0,#2]  ; g_GpioButtonEvent
000ade  2810              CMP      r0,#0x10
000ae0  d173              BNE      |L1.3018|
                  |L1.2786|
;;;572    		{
;;;573    			if(trigger_send_cpi_click == 0) 
000ae2  4873              LDR      r0,|L1.3248|
000ae4  7800              LDRB     r0,[r0,#0]  ; trigger_send_cpi_click
000ae6  2800              CMP      r0,#0
000ae8  d178              BNE      |L1.3036|
;;;574    			{
;;;575    				cpi_clicked_flag = 1;
000aea  2001              MOVS     r0,#1
000aec  4971              LDR      r1,|L1.3252|
000aee  8008              STRH     r0,[r1,#0]
;;;576    
;;;577    				/*
;;;578    				if(g_GpioButtonEvent.ButtonEvent == CPI_P_CLICKED)
;;;579    					cpi_p_Cntr++;
;;;580    				else
;;;581    					cpi_m_Cntr++;
;;;582    				*/
;;;583    
;;;584    				if( (cpi_p_Cntr > CPI_CLICK_DURATION) || 
000af0  4871              LDR      r0,|L1.3256|
000af2  7800              LDRB     r0,[r0,#0]  ; cpi_p_Cntr
000af4  28c8              CMP      r0,#0xc8
000af6  dc03              BGT      |L1.2816|
;;;585    					(cpi_m_Cntr > CPI_CLICK_DURATION) )
000af8  4870              LDR      r0,|L1.3260|
000afa  7800              LDRB     r0,[r0,#0]  ; cpi_m_Cntr
000afc  28c8              CMP      r0,#0xc8
000afe  dd6d              BLE      |L1.3036|
                  |L1.2816|
;;;586    				{
;;;587    					trigger_send_cpi_click = 1;
000b00  2001              MOVS     r0,#1
000b02  496b              LDR      r1,|L1.3248|
000b04  7008              STRB     r0,[r1,#0]
;;;588    	
;;;589    					if(cpi_p_Cntr > CPI_CLICK_DURATION)
000b06  486c              LDR      r0,|L1.3256|
000b08  7800              LDRB     r0,[r0,#0]  ; cpi_p_Cntr
000b0a  28c8              CMP      r0,#0xc8
000b0c  dd0b              BLE      |L1.2854|
;;;590    					{
;;;591    						cpi_p_Cntr = 0;	// send P to sensor
000b0e  2000              MOVS     r0,#0
000b10  4969              LDR      r1,|L1.3256|
000b12  7008              STRB     r0,[r1,#0]
;;;592    		
;;;593    						if(cpiTemp < 7)
000b14  486a              LDR      r0,|L1.3264|
000b16  7800              LDRB     r0,[r0,#0]  ; cpiTemp
000b18  2807              CMP      r0,#7
000b1a  da04              BGE      |L1.2854|
;;;594    							cpiTemp = cpiTemp + 1;
000b1c  4868              LDR      r0,|L1.3264|
000b1e  7800              LDRB     r0,[r0,#0]  ; cpiTemp
000b20  1c40              ADDS     r0,r0,#1
000b22  4967              LDR      r1,|L1.3264|
000b24  7008              STRB     r0,[r1,#0]
                  |L1.2854|
;;;595    					}
;;;596    					if(cpi_m_Cntr > CPI_CLICK_DURATION)
000b26  4865              LDR      r0,|L1.3260|
000b28  7800              LDRB     r0,[r0,#0]  ; cpi_m_Cntr
000b2a  28c8              CMP      r0,#0xc8
000b2c  dd0b              BLE      |L1.2886|
;;;597    					{
;;;598    						cpi_m_Cntr = 0;	// send M to sensor
000b2e  2000              MOVS     r0,#0
000b30  4962              LDR      r1,|L1.3260|
000b32  7008              STRB     r0,[r1,#0]
;;;599    		
;;;600    						if(cpiTemp > 0)
000b34  4862              LDR      r0,|L1.3264|
000b36  7800              LDRB     r0,[r0,#0]  ; cpiTemp
000b38  2800              CMP      r0,#0
000b3a  dd04              BLE      |L1.2886|
;;;601    							cpiTemp = cpiTemp - 1;
000b3c  4860              LDR      r0,|L1.3264|
000b3e  7800              LDRB     r0,[r0,#0]  ; cpiTemp
000b40  1e40              SUBS     r0,r0,#1
000b42  495f              LDR      r1,|L1.3264|
000b44  7008              STRB     r0,[r1,#0]
                  |L1.2886|
;;;602    					}
;;;603    					
;;;604    					
;;;605    					
;;;606    					
;;;607    					if (cpiTemp > 5){
000b46  485e              LDR      r0,|L1.3264|
000b48  7800              LDRB     r0,[r0,#0]  ; cpiTemp
000b4a  2805              CMP      r0,#5
000b4c  dd04              BLE      |L1.2904|
;;;608    					nsAPI_SSP_Sensor_Write(0x4D, 0x90);}  //set 100cpi step size
000b4e  2190              MOVS     r1,#0x90
000b50  204d              MOVS     r0,#0x4d
000b52  f7fffffe          BL       nsAPI_SSP_Sensor_Write
000b56  e003              B        |L1.2912|
                  |L1.2904|
;;;609    					else{
;;;610    					nsAPI_SSP_Sensor_Write(0x4D, 0x10);}  //set 50cpi step size
000b58  2110              MOVS     r1,#0x10
000b5a  204d              MOVS     r0,#0x4d
000b5c  f7fffffe          BL       nsAPI_SSP_Sensor_Write
                  |L1.2912|
;;;611    
;;;612    					if (cpiTemp > 2){
000b60  4857              LDR      r0,|L1.3264|
000b62  7800              LDRB     r0,[r0,#0]  ; cpiTemp
000b64  2802              CMP      r0,#2
000b66  dd04              BLE      |L1.2930|
;;;613    					nsAPI_SSP_Sensor_Write(0x5A, 0x90);}  //ripple control on
000b68  2190              MOVS     r1,#0x90
000b6a  205a              MOVS     r0,#0x5a
000b6c  f7fffffe          BL       nsAPI_SSP_Sensor_Write
000b70  e003              B        |L1.2938|
                  |L1.2930|
;;;614    					else{	
;;;615    					nsAPI_SSP_Sensor_Write(0x5A, 0x10);}	//ripple control off
000b72  2110              MOVS     r1,#0x10
000b74  205a              MOVS     r0,#0x5a
000b76  f7fffffe          BL       nsAPI_SSP_Sensor_Write
                  |L1.2938|
;;;616    					
;;;617    					nsAPI_SSP_Sensor_Write(0x4E, cpi_lo_data[cpiTemp] );
000b7a  4668              MOV      r0,sp
000b7c  4a50              LDR      r2,|L1.3264|
000b7e  7812              LDRB     r2,[r2,#0]  ; cpiTemp
000b80  5c81              LDRB     r1,[r0,r2]
000b82  204e              MOVS     r0,#0x4e
000b84  f7fffffe          BL       nsAPI_SSP_Sensor_Write
;;;618    					
;;;619    					
;;;620    					// LED Setting				
;;;621    					NDrv_GPIO_SetBitValue(PORT0,20,(cpiTemp & BIT2)^BIT2); // DLED 1  PORT 0 _20
000b88  484d              LDR      r0,|L1.3264|
000b8a  7800              LDRB     r0,[r0,#0]  ; cpiTemp
000b8c  2104              MOVS     r1,#4
000b8e  4008              ANDS     r0,r0,r1
000b90  4048              EORS     r0,r0,r1
000b92  4602              MOV      r2,r0
000b94  2114              MOVS     r1,#0x14
000b96  2000              MOVS     r0,#0
000b98  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;622    					NDrv_GPIO_SetBitValue(PORT1,26,(cpiTemp & BIT1)^BIT1); // DLED 2  Port 1 _26				
000b9c  4848              LDR      r0,|L1.3264|
000b9e  7800              LDRB     r0,[r0,#0]  ; cpiTemp
000ba0  2102              MOVS     r1,#2
000ba2  4008              ANDS     r0,r0,r1
000ba4  4048              EORS     r0,r0,r1
000ba6  4602              MOV      r2,r0
000ba8  211a              MOVS     r1,#0x1a
000baa  2001              MOVS     r0,#1
000bac  f7fffffe          BL       NDrv_GPIO_SetBitValue
;;;623    					NDrv_GPIO_SetBitValue(PORT1,27,(cpiTemp & BIT0)^BIT0); // DLED 3  Port 1 _27	
000bb0  4843              LDR      r0,|L1.3264|
000bb2  7800              LDRB     r0,[r0,#0]  ; cpiTemp
000bb4  07c0              LSLS     r0,r0,#31
000bb6  0fc0              LSRS     r0,r0,#31
000bb8  2101              MOVS     r1,#1
000bba  4048              EORS     r0,r0,r1
000bbc  4602              MOV      r2,r0
000bbe  211b              MOVS     r1,#0x1b
000bc0  2001              MOVS     r0,#1
000bc2  f7fffffe          BL       NDrv_GPIO_SetBitValue
                  |L1.3014|
000bc6  e009              B        |L1.3036|
000bc8  e7ff              B        |L1.3018|
                  |L1.3018|
;;;624    				}
;;;625    			}
;;;626    		}
;;;627    		else
;;;628    		{
;;;629    				trigger_send_cpi_click = 0;
000bca  2000              MOVS     r0,#0
000bcc  4938              LDR      r1,|L1.3248|
000bce  7008              STRB     r0,[r1,#0]
;;;630    				cpi_m_Cntr = 0;
000bd0  493a              LDR      r1,|L1.3260|
000bd2  7008              STRB     r0,[r1,#0]
;;;631    				cpi_p_Cntr = 0;
000bd4  4938              LDR      r1,|L1.3256|
000bd6  7008              STRB     r0,[r1,#0]
;;;632    				cpi_clicked_flag = 0;
000bd8  4936              LDR      r1,|L1.3252|
000bda  8008              STRH     r0,[r1,#0]
                  |L1.3036|
;;;633    		}
;;;634    	}
;;;635    	return Ret;
000bdc  4630              MOV      r0,r6
;;;636    }
000bde  b004              ADD      sp,sp,#0x10
000be0  bd70              POP      {r4-r6,pc}
;;;637    
                          ENDP

                  Z_Wheel PROC
;;;638    
;;;639    void Z_Wheel()
000be2  b5f8              PUSH     {r3-r7,lr}
;;;640    {
;;;641    	#define SCROLL_TREND	3
;;;642    	#define SCROLL_SUBSIDY	1
;;;643    	#define Z_COUNT			1
;;;644    	static U8 ZA_PRE = 0;
;;;645    	static U8 ZB_PRE = 0;
;;;646    	//static S8 temp_z_ctr = 0;
;;;647    	static U8 temp_z_up_trend = 0;
;;;648    	static S8 temp_z_down_trend = 0;
;;;649    
;;;650    	U32 temp0 = 0;
000be4  2600              MOVS     r6,#0
;;;651    	U32 temp1 = 0;
000be6  2700              MOVS     r7,#0
;;;652    	U8 ZA_CUR = 0;
000be8  2500              MOVS     r5,#0
;;;653    	U8 ZB_CUR = 0;
000bea  2400              MOVS     r4,#0
;;;654    
;;;655    	temp0 = nsAPI_GPIO_GetPinValue(PORT0,0xFF);
000bec  21ff              MOVS     r1,#0xff
000bee  2000              MOVS     r0,#0
000bf0  f7fffffe          BL       nsAPI_GPIO_GetPinValue
000bf4  4606              MOV      r6,r0
;;;656    	temp1 = nsAPI_GPIO_GetPinValue(PORT1,0xFF);
000bf6  21ff              MOVS     r1,#0xff
000bf8  2001              MOVS     r0,#1
000bfa  f7fffffe          BL       nsAPI_GPIO_GetPinValue
000bfe  4607              MOV      r7,r0
;;;657    
;;;658    	if(IS_BIT_SET(temp0,ZB_WHEEL))
000c00  2080              MOVS     r0,#0x80
000c02  4030              ANDS     r0,r0,r6
000c04  2880              CMP      r0,#0x80
000c06  d100              BNE      |L1.3082|
;;;659    		ZB_CUR = 1;
000c08  2401              MOVS     r4,#1
                  |L1.3082|
;;;660    	
;;;661    	if(IS_BIT_SET(temp1,ZA_WHEEL))
000c0a  2001              MOVS     r0,#1
000c0c  0700              LSLS     r0,r0,#28
000c0e  4038              ANDS     r0,r0,r7
000c10  2101              MOVS     r1,#1
000c12  0709              LSLS     r1,r1,#28
000c14  4288              CMP      r0,r1
000c16  d100              BNE      |L1.3098|
;;;662    		ZA_CUR = 1;
000c18  2501              MOVS     r5,#1
                  |L1.3098|
;;;663    
;;;664    //solved z wheel scrolling buy (9 Nov 2016)	
;;;665    if ( ZB_CUR != ZB_PRE)
000c1a  482a              LDR      r0,|L1.3268|
000c1c  7800              LDRB     r0,[r0,#0]  ; ZB_PRE
000c1e  4284              CMP      r4,r0
000c20  d030              BEQ      |L1.3204|
;;;666    {
;;;667    	if(ZA_CUR ==0)
000c22  2d00              CMP      r5,#0
000c24  d117              BNE      |L1.3158|
;;;668    	{
;;;669    		if(ZB_CUR == 0 && ZA_PRE ==0 && ZB_PRE == 1)
000c26  2c00              CMP      r4,#0
000c28  d10e              BNE      |L1.3144|
000c2a  4827              LDR      r0,|L1.3272|
000c2c  7800              LDRB     r0,[r0,#0]  ; ZA_PRE
000c2e  2800              CMP      r0,#0
000c30  d10a              BNE      |L1.3144|
000c32  4824              LDR      r0,|L1.3268|
000c34  7800              LDRB     r0,[r0,#0]  ; ZB_PRE
000c36  2801              CMP      r0,#1
000c38  d106              BNE      |L1.3144|
;;;670    		{//B fell, A is low
;;;671    			count_z++;
000c3a  4824              LDR      r0,|L1.3276|
000c3c  7800              LDRB     r0,[r0,#0]  ; count_z
000c3e  1c40              ADDS     r0,r0,#1
000c40  b240              SXTB     r0,r0
000c42  4922              LDR      r1,|L1.3276|
000c44  7008              STRB     r0,[r1,#0]
000c46  e01d              B        |L1.3204|
                  |L1.3144|
;;;672    		}
;;;673    		else
;;;674    		{//B fell , A is High
;;;675    			count_z--;
000c48  4820              LDR      r0,|L1.3276|
000c4a  7800              LDRB     r0,[r0,#0]  ; count_z
000c4c  1e40              SUBS     r0,r0,#1
000c4e  b240              SXTB     r0,r0
000c50  491e              LDR      r1,|L1.3276|
000c52  7008              STRB     r0,[r1,#0]
000c54  e016              B        |L1.3204|
                  |L1.3158|
;;;676    		}
;;;677    	}
;;;678    	else
;;;679    	{
;;;680    		if(ZB_CUR == 0 && ZA_PRE ==0 && ZB_PRE == 0)
000c56  2c00              CMP      r4,#0
000c58  d10e              BNE      |L1.3192|
000c5a  481b              LDR      r0,|L1.3272|
000c5c  7800              LDRB     r0,[r0,#0]  ; ZA_PRE
000c5e  2800              CMP      r0,#0
000c60  d10a              BNE      |L1.3192|
000c62  4818              LDR      r0,|L1.3268|
000c64  7800              LDRB     r0,[r0,#0]  ; ZB_PRE
000c66  2800              CMP      r0,#0
000c68  d106              BNE      |L1.3192|
;;;681    		{//B rose, A is low
;;;682    			count_z--;
000c6a  4818              LDR      r0,|L1.3276|
000c6c  7800              LDRB     r0,[r0,#0]  ; count_z
000c6e  1e40              SUBS     r0,r0,#1
000c70  b240              SXTB     r0,r0
000c72  4916              LDR      r1,|L1.3276|
000c74  7008              STRB     r0,[r1,#0]
000c76  e005              B        |L1.3204|
                  |L1.3192|
;;;683    		}
;;;684    		else
;;;685    		{//B rose, A is High
;;;686    			count_z++;
000c78  4814              LDR      r0,|L1.3276|
000c7a  7800              LDRB     r0,[r0,#0]  ; count_z
000c7c  1c40              ADDS     r0,r0,#1
000c7e  b240              SXTB     r0,r0
000c80  4912              LDR      r1,|L1.3276|
000c82  7008              STRB     r0,[r1,#0]
                  |L1.3204|
;;;687    		}
;;;688    	}
;;;689    }
;;;690    
;;;691    	if(count_z != 0x00)
000c84  4811              LDR      r0,|L1.3276|
000c86  7800              LDRB     r0,[r0,#0]  ; count_z
000c88  2800              CMP      r0,#0
000c8a  d005              BEQ      |L1.3224|
;;;692    	{
;;;693    		g_Main_Setting.MouseEvent |= (MAIN_FLAG_MOUSE_EVENT|MAIN_FLAG_MOUSE_REPORT_READY);		
000c8c  4806              LDR      r0,|L1.3240|
000c8e  8cc0              LDRH     r0,[r0,#0x26]  ; g_Main_Setting
000c90  2109              MOVS     r1,#9
000c92  4308              ORRS     r0,r0,r1
000c94  4904              LDR      r1,|L1.3240|
000c96  84c8              STRH     r0,[r1,#0x26]
                  |L1.3224|
;;;694    	}
;;;695    	
;;;696    	ZA_PRE = ZA_CUR;
000c98  480b              LDR      r0,|L1.3272|
000c9a  7005              STRB     r5,[r0,#0]
;;;697    	ZB_PRE = ZB_CUR;
000c9c  4809              LDR      r0,|L1.3268|
000c9e  7004              STRB     r4,[r0,#0]
;;;698    	
;;;699    }
000ca0  bdf8              POP      {r3-r7,pc}
;;;700    
                          ENDP

000ca2  0000              DCW      0x0000
                  |L1.3236|
                          DCD      g_GpioButtonEvent
                  |L1.3240|
                          DCD      g_Main_Setting
                  |L1.3244|
                          DCD      glitch_prevention
                  |L1.3248|
                          DCD      trigger_send_cpi_click
                  |L1.3252|
                          DCD      cpi_clicked_flag
                  |L1.3256|
                          DCD      cpi_p_Cntr
                  |L1.3260|
                          DCD      cpi_m_Cntr
                  |L1.3264|
                          DCD      cpiTemp
                  |L1.3268|
                          DCD      ZB_PRE
                  |L1.3272|
                          DCD      ZA_PRE
                  |L1.3276|
                          DCD      count_z

                          AREA ||.data||, DATA, ALIGN=1

                  flagOne
000000  00                DCB      0x00
                  u8motion
000001  00                DCB      0x00
                  u8Squal
000002  00                DCB      0x00
                  u8PixelSum
000003  00                DCB      0x00
                  s16accuX
000004  0000              DCB      0x00,0x00
                  s16accuY
000006  0000              DCB      0x00,0x00
                  report1ms_data_x
000008  0000              DCB      0x00,0x00
                  report1ms_data_y
00000a  0000              DCB      0x00,0x00
                  stop_motion
00000c  0000              DCB      0x00,0x00
                  u16Pixel
00000e  0000              DCB      0x00,0x00
                  u16Shutter
000010  0000              DCB      0x00,0x00
                  count_z
000012  00                DCB      0x00
                  cpi_p_Cntr
000013  00                DCB      0x00
                  cpi_m_Cntr
000014  00                DCB      0x00
                  VarA
000015  00                DCB      0x00
                  VarB
000016  00                DCB      0x00
                  not_read
000017  00                DCB      0x00
                  motion_sync_counter
000018  0000              DCB      0x00,0x00
                  test_A
00001a  0000              DCB      0x00,0x00
                  u8temp
00001c  00000000          DCB      0x00,0x00,0x00,0x00
000020  0000              DCB      0x00,0x00
                  tempBurst
000022  0000              DCB      0x00,0x00
                  u16temp_x
000024  0000              DCB      0x00,0x00
                  u16temp_y
000026  0000              DCB      0x00,0x00
                  cpiTemp
000028  02                DCB      0x02
                  trigger_send_cpi_click
000029  00                DCB      0x00
                  ZA_PRE
00002a  00                DCB      0x00
                  ZB_PRE
00002b  00                DCB      0x00
                  temp_z_up_trend
00002c  00                DCB      0x00
                  temp_z_down_trend
00002d  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "Src\\Pixart_Sensor.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___15_Pixart_Sensor_c_4dcee60c____REV16|
#line 112 ".\\Inc\\core_cmInstr.h"
|__asm___15_Pixart_Sensor_c_4dcee60c____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___15_Pixart_Sensor_c_4dcee60c____REVSH|
#line 130
|__asm___15_Pixart_Sensor_c_4dcee60c____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
