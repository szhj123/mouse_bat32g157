<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\usbd.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\usbd.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Sun Nov 06 13:09:41 2022
<BR><P>
<H3>Maximum Stack Usage =        312 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; usb_main &rArr; USB_GetEvent &rArr; usb_cstd_usb_task &rArr; usb_pmsc_task &rArr; usb_pmsc_check_cbw &rArr; usb_pmsc_csw_transfer &rArr; usb_pmsc_transfer_start &rArr; usb_pstd_transfer_start &rArr; usb_pstd_set_submitutr &rArr; usb_pstd_send_start &rArr; usb_pstd_buf_to_fifo &rArr; usb_pstd_write_data &rArr; usb_cstd_is_set_frdy &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[8]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">NMI_Handler</a><BR>
 <LI><a href="#[9]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">HardFault_Handler</a><BR>
 <LI><a href="#[a]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SVC_Handler</a><BR>
 <LI><a href="#[b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">PendSV_Handler</a><BR>
 <LI><a href="#[d]">IRQ00_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">IRQ00_Handler</a><BR>
 <LI><a href="#[e]">IRQ01_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">IRQ01_Handler</a><BR>
 <LI><a href="#[f]">IRQ02_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">IRQ02_Handler</a><BR>
 <LI><a href="#[10]">IRQ03_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">IRQ03_Handler</a><BR>
 <LI><a href="#[11]">IRQ04_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">IRQ04_Handler</a><BR>
 <LI><a href="#[16]">IRQ09_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">IRQ09_Handler</a><BR>
 <LI><a href="#[18]">IRQ11_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">IRQ11_Handler</a><BR>
 <LI><a href="#[19]">IRQ12_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">IRQ12_Handler</a><BR>
 <LI><a href="#[1b]">IRQ14_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">IRQ14_Handler</a><BR>
 <LI><a href="#[1c]">IRQ15_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">IRQ15_Handler</a><BR>
 <LI><a href="#[1d]">IRQ16_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">IRQ16_Handler</a><BR>
 <LI><a href="#[1e]">IRQ17_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">IRQ17_Handler</a><BR>
 <LI><a href="#[1f]">IRQ18_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">IRQ18_Handler</a><BR>
 <LI><a href="#[20]">IRQ19_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">IRQ19_Handler</a><BR>
 <LI><a href="#[21]">IRQ20_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">IRQ20_Handler</a><BR>
 <LI><a href="#[22]">IRQ21_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">IRQ21_Handler</a><BR>
 <LI><a href="#[23]">IRQ22_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">IRQ22_Handler</a><BR>
 <LI><a href="#[24]">IRQ23_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">IRQ23_Handler</a><BR>
 <LI><a href="#[25]">IRQ24_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">IRQ24_Handler</a><BR>
 <LI><a href="#[26]">IRQ25_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">IRQ25_Handler</a><BR>
 <LI><a href="#[27]">IRQ26_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">IRQ26_Handler</a><BR>
 <LI><a href="#[28]">IRQ27_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">IRQ27_Handler</a><BR>
 <LI><a href="#[29]">IRQ28_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">IRQ28_Handler</a><BR>
 <LI><a href="#[2a]">IRQ29_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">IRQ29_Handler</a><BR>
 <LI><a href="#[2b]">IRQ30_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">IRQ30_Handler</a><BR>
 <LI><a href="#[2c]">IRQ31_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c]">IRQ31_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[9]">HardFault_Handler</a> from startup_bat32g157.o(.text) referenced from startup_bat32g157.o(RESET)
 <LI><a href="#[d]">IRQ00_Handler</a> from startup_bat32g157.o(.text) referenced from startup_bat32g157.o(RESET)
 <LI><a href="#[e]">IRQ01_Handler</a> from startup_bat32g157.o(.text) referenced from startup_bat32g157.o(RESET)
 <LI><a href="#[f]">IRQ02_Handler</a> from startup_bat32g157.o(.text) referenced from startup_bat32g157.o(RESET)
 <LI><a href="#[10]">IRQ03_Handler</a> from startup_bat32g157.o(.text) referenced from startup_bat32g157.o(RESET)
 <LI><a href="#[11]">IRQ04_Handler</a> from startup_bat32g157.o(.text) referenced from startup_bat32g157.o(RESET)
 <LI><a href="#[12]">IRQ05_Handler</a> from usb_157_mcu.o(i.intp_5_37_interrupt) referenced from startup_bat32g157.o(RESET)
 <LI><a href="#[13]">IRQ06_Handler</a> from usb_157_mcu.o(i.intp_6_38_interrupt) referenced from startup_bat32g157.o(RESET)
 <LI><a href="#[14]">IRQ07_Handler</a> from sci_user.o(i.uart0_interrupt_send) referenced from startup_bat32g157.o(RESET)
 <LI><a href="#[15]">IRQ08_Handler</a> from sci_user.o(i.spi01_interrupt) referenced from startup_bat32g157.o(RESET)
 <LI><a href="#[16]">IRQ09_Handler</a> from startup_bat32g157.o(.text) referenced from startup_bat32g157.o(RESET)
 <LI><a href="#[17]">IRQ10_Handler</a> from sci_user.o(i.uart1_interrupt_send) referenced from startup_bat32g157.o(RESET)
 <LI><a href="#[18]">IRQ11_Handler</a> from startup_bat32g157.o(.text) referenced from startup_bat32g157.o(RESET)
 <LI><a href="#[19]">IRQ12_Handler</a> from startup_bat32g157.o(.text) referenced from startup_bat32g157.o(RESET)
 <LI><a href="#[1a]">IRQ13_Handler</a> from sci_user.o(i.IRQ13_Handler) referenced from startup_bat32g157.o(RESET)
 <LI><a href="#[1b]">IRQ14_Handler</a> from startup_bat32g157.o(.text) referenced from startup_bat32g157.o(RESET)
 <LI><a href="#[1c]">IRQ15_Handler</a> from startup_bat32g157.o(.text) referenced from startup_bat32g157.o(RESET)
 <LI><a href="#[1d]">IRQ16_Handler</a> from startup_bat32g157.o(.text) referenced from startup_bat32g157.o(RESET)
 <LI><a href="#[1e]">IRQ17_Handler</a> from startup_bat32g157.o(.text) referenced from startup_bat32g157.o(RESET)
 <LI><a href="#[1f]">IRQ18_Handler</a> from startup_bat32g157.o(.text) referenced from startup_bat32g157.o(RESET)
 <LI><a href="#[20]">IRQ19_Handler</a> from startup_bat32g157.o(.text) referenced from startup_bat32g157.o(RESET)
 <LI><a href="#[21]">IRQ20_Handler</a> from startup_bat32g157.o(.text) referenced from startup_bat32g157.o(RESET)
 <LI><a href="#[22]">IRQ21_Handler</a> from startup_bat32g157.o(.text) referenced from startup_bat32g157.o(RESET)
 <LI><a href="#[23]">IRQ22_Handler</a> from startup_bat32g157.o(.text) referenced from startup_bat32g157.o(RESET)
 <LI><a href="#[24]">IRQ23_Handler</a> from startup_bat32g157.o(.text) referenced from startup_bat32g157.o(RESET)
 <LI><a href="#[25]">IRQ24_Handler</a> from startup_bat32g157.o(.text) referenced from startup_bat32g157.o(RESET)
 <LI><a href="#[26]">IRQ25_Handler</a> from startup_bat32g157.o(.text) referenced from startup_bat32g157.o(RESET)
 <LI><a href="#[27]">IRQ26_Handler</a> from startup_bat32g157.o(.text) referenced from startup_bat32g157.o(RESET)
 <LI><a href="#[28]">IRQ27_Handler</a> from startup_bat32g157.o(.text) referenced from startup_bat32g157.o(RESET)
 <LI><a href="#[29]">IRQ28_Handler</a> from startup_bat32g157.o(.text) referenced from startup_bat32g157.o(RESET)
 <LI><a href="#[2a]">IRQ29_Handler</a> from startup_bat32g157.o(.text) referenced from startup_bat32g157.o(RESET)
 <LI><a href="#[2b]">IRQ30_Handler</a> from startup_bat32g157.o(.text) referenced from startup_bat32g157.o(RESET)
 <LI><a href="#[2c]">IRQ31_Handler</a> from startup_bat32g157.o(.text) referenced from startup_bat32g157.o(RESET)
 <LI><a href="#[8]">NMI_Handler</a> from startup_bat32g157.o(.text) referenced from startup_bat32g157.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from startup_bat32g157.o(.text) referenced from startup_bat32g157.o(RESET)
 <LI><a href="#[7]">Reset_Handler</a> from startup_bat32g157.o(.text) referenced from startup_bat32g157.o(RESET)
 <LI><a href="#[a]">SVC_Handler</a> from startup_bat32g157.o(.text) referenced from startup_bat32g157.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from main.o(i.SysTick_Handler) referenced from startup_bat32g157.o(RESET)
 <LI><a href="#[2e]">SystemInit</a> from system_bat32g157.o(i.SystemInit) referenced from startup_bat32g157.o(.text)
 <LI><a href="#[2f]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_bat32g157.o(.text)
 <LI><a href="#[3]">ext_flash_disk_close</a> from ext_flash_disk.o(i.ext_flash_disk_close) referenced 2 times from ext_flash_disk.o(.data)
 <LI><a href="#[6]">ext_flash_disk_ioctl</a> from ext_flash_disk.o(i.ext_flash_disk_ioctl) referenced 2 times from ext_flash_disk.o(.data)
 <LI><a href="#[2]">ext_flash_disk_open</a> from ext_flash_disk.o(i.ext_flash_disk_open) referenced 2 times from ext_flash_disk.o(.data)
 <LI><a href="#[4]">ext_flash_disk_read</a> from ext_flash_disk.o(i.ext_flash_disk_read) referenced 2 times from ext_flash_disk.o(.data)
 <LI><a href="#[5]">ext_flash_disk_write</a> from ext_flash_disk.o(i.ext_flash_disk_write) referenced 2 times from ext_flash_disk.o(.data)
 <LI><a href="#[30]">fputc</a> from retarget.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[2d]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[0]">usb_phid_read_complete</a> from usb_phid_driver.o(i.usb_phid_read_complete) referenced 2 times from usb_cdataio.o(.data)
 <LI><a href="#[1]">usb_phid_write_complete</a> from usb_phid_driver.o(i.usb_phid_write_complete) referenced 2 times from usb_cdataio.o(.data)
 <LI><a href="#[31]">usb_pmsc_data_transfer</a> from usb_pmsc_driver.o(i.usb_pmsc_data_transfer) referenced from usb_pmsc_driver.o(i.usb_pmsc_check_cbw)
 <LI><a href="#[31]">usb_pmsc_data_transfer</a> from usb_pmsc_driver.o(i.usb_pmsc_data_transfer) referenced from usb_pmsc_driver.o(i.usb_pmsc_task)
 <LI><a href="#[32]">usb_pmsc_err_csw_ng</a> from usb_pmsc_driver.o(i.usb_pmsc_err_csw_ng) referenced from usb_pmsc_driver.o(i.usb_pmsc_check_cbw)
 <LI><a href="#[32]">usb_pmsc_err_csw_ng</a> from usb_pmsc_driver.o(i.usb_pmsc_err_csw_ng) referenced from usb_pmsc_driver.o(i.usb_pmsc_data_transfer)
 <LI><a href="#[34]">usb_pmsc_err_csw_ok</a> from usb_pmsc_driver.o(i.usb_pmsc_err_csw_ok) referenced from usb_pmsc_driver.o(i.usb_pmsc_data_transfer)
 <LI><a href="#[33]">usb_pmsc_err_phase_err</a> from usb_pmsc_driver.o(i.usb_pmsc_err_phase_err) referenced from usb_pmsc_driver.o(i.usb_pmsc_check_cbw)
 <LI><a href="#[35]">usb_pmsc_trans_result</a> from usb_pmsc_driver.o(i.usb_pmsc_trans_result) referenced from usb_pmsc_driver.o(i.usb_pmsc_transfer_start)
 <LI><a href="#[3c]">usb_pstd_class_request</a> from usb_pstdrequest.o(i.usb_pstd_class_request) referenced from usb_pdriver.o(i.usb_pstd_registration)
 <LI><a href="#[37]">usb_pstd_configured</a> from usb_pdriver.o(i.usb_pstd_configured) referenced from usb_pdriver.o(i.usb_pstd_registration)
 <LI><a href="#[38]">usb_pstd_detach</a> from usb_pdriver.o(i.usb_pstd_detach) referenced from usb_pdriver.o(i.usb_pstd_registration)
 <LI><a href="#[36]">usb_pstd_devdefault</a> from usb_pdriver.o(i.usb_pstd_devdefault) referenced from usb_pdriver.o(i.usb_pstd_registration)
 <LI><a href="#[3b]">usb_pstd_interface</a> from usb_pdriver.o(i.usb_pstd_interface) referenced from usb_pdriver.o(i.usb_pstd_registration)
 <LI><a href="#[3a]">usb_pstd_resume</a> from usb_pdriver.o(i.usb_pstd_resume) referenced from usb_pdriver.o(i.usb_pstd_registration)
 <LI><a href="#[39]">usb_pstd_suspended</a> from usb_pdriver.o(i.usb_pstd_suspended) referenced from usb_pdriver.o(i.usb_pstd_registration)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2f]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g157.o(.text)
</UL>
<P><STRONG><a name="[14f]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[3d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[150]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[151]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[152]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[3f]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_fini_ (Weak Reference)
</UL>

<P><STRONG><a name="[153]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[154]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[7]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_bat32g157.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g157.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g157.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g157.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g157.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g157.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g157.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>

<P><STRONG><a name="[42]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g157.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>

<P><STRONG><a name="[43]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g157.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>

<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g157.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g157.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g157.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>

<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g157.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g157.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>IRQ00_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g157.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ00_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ00_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g157.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>IRQ01_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g157.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ01_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ01_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g157.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>IRQ02_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g157.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ02_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ02_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g157.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>IRQ03_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g157.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ03_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ03_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g157.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>IRQ04_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g157.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ04_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ04_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g157.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>IRQ09_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g157.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ09_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ09_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g157.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>IRQ11_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g157.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ11_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ11_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g157.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>IRQ12_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g157.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ12_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ12_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g157.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>IRQ14_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g157.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ14_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ14_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g157.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>IRQ15_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g157.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ15_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ15_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g157.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>IRQ16_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g157.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ16_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ16_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g157.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>IRQ17_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g157.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ17_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ17_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g157.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>IRQ18_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g157.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ18_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ18_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g157.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>IRQ19_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g157.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ19_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ19_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g157.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>IRQ20_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g157.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ20_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ20_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g157.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>IRQ21_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g157.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ21_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ21_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g157.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>IRQ22_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g157.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ22_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ22_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g157.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>IRQ23_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g157.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ23_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ23_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g157.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>IRQ24_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g157.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ24_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ24_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g157.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>IRQ25_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g157.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ25_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ25_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g157.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>IRQ26_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g157.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ26_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ26_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g157.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>IRQ27_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g157.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ27_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ27_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g157.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>IRQ28_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g157.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ28_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ28_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g157.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>IRQ29_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g157.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ29_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ29_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g157.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>IRQ30_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g157.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ30_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ30_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g157.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>IRQ31_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32g157.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ31_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ31_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g157.o(RESET)
</UL>
<P><STRONG><a name="[155]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_pcd_task
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudRateCal
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_usb_handler
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_receive_start
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_disk_write
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_disk_read
</UL>

<P><STRONG><a name="[156]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_write_data
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_read_data
</UL>

<P><STRONG><a name="[b9]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_ctrl_send
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_other_request
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_class_request_wss
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_class_request_wnss
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_class_request_rwds
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_class_request_rss
</UL>

<P><STRONG><a name="[157]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[159]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_driver_init
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Open
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_driver_init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmsc_atapi_init
</UL>

<P><STRONG><a name="[15b]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[4a]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3e]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[15c]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[15d]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[15e]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[15f]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>CLK_Fclk_Select</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, clk.o(i.CLK_Fclk_Select))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4e]"></a>CLK_GetHocoFreq</STRONG> (Thumb, 122 bytes, Stack size 4 bytes, system_bat32g157.o(i.CLK_GetHocoFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CLK_GetHocoFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1a]"></a>IRQ13_Handler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, sci_user.o(i.IRQ13_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ13_Handler &rArr; INTC_ClearPendingIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_callback_sendend
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g157.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>SPI01_Stop</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sci.o(i.SPI01_Stop), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_DisableIRQ
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi01_callback_sendend
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi01_callback_receiveend
</UL>

<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g157.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 4 bytes, system_bat32g157.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; CLK_GetHocoFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHocoFreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g157.o(.text)
</UL>
<P><STRONG><a name="[5e]"></a>UART0_BaudRate</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, sci.o(i.UART0_BaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = UART0_BaudRate &rArr; UART_BaudRateCal &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudRateCal
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
</UL>

<P><STRONG><a name="[60]"></a>UART0_Init</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, sci.o(i.UART0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = UART0_Init &rArr; UART0_BaudRate &rArr; UART_BaudRateCal &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_BaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>UART0_Send</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sci.o(i.UART0_Send))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[5f]"></a>UART_BaudRateCal</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, sci.o(i.UART_BaudRateCal))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = UART_BaudRateCal &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_BaudRate
</UL>

<P><STRONG><a name="[61]"></a>USB_GetEvent</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, usb_usbif_api.o(i.USB_GetEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = USB_GetEvent &rArr; usb_cstd_usb_task &rArr; usb_pmsc_task &rArr; usb_pmsc_check_cbw &rArr; usb_pmsc_csw_transfer &rArr; usb_pmsc_transfer_start &rArr; usb_pstd_transfer_start &rArr; usb_pstd_set_submitutr &rArr; usb_pstd_send_start &rArr; usb_pstd_buf_to_fifo &rArr; usb_pstd_write_data &rArr; usb_cstd_is_set_frdy &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_usb_task
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_main
</UL>

<P><STRONG><a name="[63]"></a>USB_GetInformation</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, usb_usbif_api.o(i.USB_GetInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_GetInformation &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_port_speed
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_get_open_class
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_read_intsts
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Write
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Read
</UL>

<P><STRONG><a name="[67]"></a>USB_Open</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, usb_usbif_api.o(i.USB_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USB_Open &rArr; usb_pstd_driver_init &rArr; usb_pstd_registration
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cpu_delay_xms
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_module_start
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cpu_usbint_init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_pmodule_init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_driver_init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_chk_vbsts
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_pset_dprpu
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_main
</UL>

<P><STRONG><a name="[70]"></a>USB_Read</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, usb_usbif_api.o(i.USB_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = USB_Read &rArr; usb_cstd_data_read &rArr; usb_pstd_transfer_start &rArr; usb_pstd_set_submitutr &rArr; usb_pstd_send_start &rArr; usb_pstd_buf_to_fifo &rArr; usb_pstd_write_data &rArr; usb_cstd_is_set_frdy &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_data_read
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_ctrl_receive
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_main
</UL>

<P><STRONG><a name="[73]"></a>USB_Write</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, usb_usbif_api.o(i.USB_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = USB_Write &rArr; usb_cstd_data_write &rArr; usb_pstd_transfer_start &rArr; usb_pstd_set_submitutr &rArr; usb_pstd_send_start &rArr; usb_pstd_buf_to_fifo &rArr; usb_pstd_write_data &rArr; usb_cstd_is_set_frdy &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_data_write
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_ctrl_send
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_main
</UL>

<P><STRONG><a name="[8f]"></a>USB_media_initialize</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, media_driver_api.o(i.USB_media_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;media_driver_init
</UL>

<P><STRONG><a name="[92]"></a>USB_media_ioctl</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, media_driver_api.o(i.USB_media_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_media_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmsc_atapi_analyze_cbwcb
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmsc_atapi_get_read_data
</UL>

<P><STRONG><a name="[90]"></a>USB_media_open</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, media_driver_api.o(i.USB_media_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_media_open
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;media_driver_init
</UL>

<P><STRONG><a name="[97]"></a>USB_media_read</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, media_driver_api.o(i.USB_media_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_media_read
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmsc_atapi_get_read_data
</UL>

<P><STRONG><a name="[96]"></a>USB_media_write</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, media_driver_api.o(i.USB_media_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_media_write
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmsc_atapi_command_processing
</UL>

<P><STRONG><a name="[76]"></a>__0printf$8</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[161]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[7a]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_disk_write
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_disk_read
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_disk_open
</UL>

<P><STRONG><a name="[4f]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usb_phid_pmsc_apl.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Open
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_main
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_interrupt_process
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetInformation
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_get_descriptor1
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_class_request
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_eptbl_index
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_get_alternate_no
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHocoFreq
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_transfer_matrix
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_data_transfer
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_check_cbw
</UL>

<P><STRONG><a name="[162]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[163]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[164]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[30]"></a>fputc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[bf]"></a>hw_usb_clear_aclrm</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_clear_aclrm))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_do_aclrm
</UL>

<P><STRONG><a name="[ee]"></a>hw_usb_clear_batchge</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_clear_batchge))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_bc_detect_process
</UL>

<P><STRONG><a name="[e9]"></a>hw_usb_clear_bcctrl</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_clear_bcctrl))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_bc_secondary_detection
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_bc_primary_detection
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_bc_data_contact_detect
</UL>

<P><STRONG><a name="[a8]"></a>hw_usb_clear_bempenb</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_clear_bempenb))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_ctrl_end
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_pipe_config
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_clr_pipe_config
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_forced_termination
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_data_end
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_bemp_pipe
</UL>

<P><STRONG><a name="[a6]"></a>hw_usb_clear_brdyenb</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_clear_brdyenb))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_buf_to_fifo
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_ctrl_end
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_pipe_config
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_clr_pipe_config
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_forced_termination
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_data_end
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_brdy_pipe
</UL>

<P><STRONG><a name="[ea]"></a>hw_usb_clear_cnen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_clear_cnen))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_bc_data_contact_detect
</UL>

<P><STRONG><a name="[a7]"></a>hw_usb_clear_nrdyenb</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_clear_nrdyenb))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_ctrl_end
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_pipe_config
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_clr_pipe_config
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_forced_termination
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_data_end
</UL>

<P><STRONG><a name="[b3]"></a>hw_usb_clear_pid</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usb_creg_access.o(i.hw_usb_clear_pid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hw_usb_clear_pid
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_nak
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_clr_stall
</UL>

<P><STRONG><a name="[b1]"></a>hw_usb_clear_status_bemp</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_clear_status_bemp))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_ctrl_read
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_pipe_config
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_clr_pipe_config
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_brdy_pipe_process
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_send_start
</UL>

<P><STRONG><a name="[b0]"></a>hw_usb_clear_status_nrdy</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_clear_status_nrdy))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_pipe_config
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_clr_pipe_config
</UL>

<P><STRONG><a name="[af]"></a>hw_usb_clear_sts_brdy</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_clear_sts_brdy))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_pipe_config
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_clr_pipe_config
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_send_start
</UL>

<P><STRONG><a name="[b4]"></a>hw_usb_clear_trenb</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_clear_trenb))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_clr_transaction
</UL>

<P><STRONG><a name="[104]"></a>hw_usb_pclear_dprpu</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb_preg_access.o(i.hw_usb_pclear_dprpu))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_change_device_state
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_detach_process
</UL>

<P><STRONG><a name="[132]"></a>hw_usb_pclear_enb_rsme</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_preg_access.o(i.hw_usb_pclear_enb_rsme))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_suspend_process
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_resume_process
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_remote_wakeup
</UL>

<P><STRONG><a name="[a2]"></a>hw_usb_pclear_sts_resm</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_preg_access.o(i.hw_usb_pclear_sts_resm))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cpu_usb_resume_interrupt
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_suspend_process
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_resume_process
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_remote_wakeup
</UL>

<P><STRONG><a name="[11f]"></a>hw_usb_pclear_sts_valid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_preg_access.o(i.hw_usb_pclear_sts_valid))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_interrupt_handler
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_save_request
</UL>

<P><STRONG><a name="[6c]"></a>hw_usb_pmodule_init</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, usb_preg_access.o(i.hw_usb_pmodule_init))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Open
</UL>

<P><STRONG><a name="[111]"></a>hw_usb_pset_ccpl</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb_preg_access.o(i.hw_usb_pset_ccpl))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_ctrl_end
</UL>

<P><STRONG><a name="[6f]"></a>hw_usb_pset_dprpu</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb_preg_access.o(i.hw_usb_pset_dprpu))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Open
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_change_device_state
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_attach_process
</UL>

<P><STRONG><a name="[14a]"></a>hw_usb_pset_enb_rsme</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_preg_access.o(i.hw_usb_pset_enb_rsme))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_suspend_process
</UL>

<P><STRONG><a name="[133]"></a>hw_usb_pset_wkup</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_preg_access.o(i.hw_usb_pset_wkup))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_remote_wakeup
</UL>

<P><STRONG><a name="[ef]"></a>hw_usb_read_bcctrl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_read_bcctrl))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_bc_secondary_detection
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_bc_primary_detection
</UL>

<P><STRONG><a name="[11d]"></a>hw_usb_read_dcpctr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_read_dcpctr))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_get_status1
</UL>

<P><STRONG><a name="[c1]"></a>hw_usb_read_dcpmaxp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_read_dcpmaxp))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_get_maxpacket_size
</UL>

<P><STRONG><a name="[ce]"></a>hw_usb_read_dvstctr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_read_dvstctr))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_port_speed
</UL>

<P><STRONG><a name="[12f]"></a>hw_usb_read_fifo16</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_read_fifo16))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_read_fifo
</UL>

<P><STRONG><a name="[7c]"></a>hw_usb_read_fifoctr</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, usb_creg_access.o(i.hw_usb_read_fifoctr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hw_usb_read_fifoctr
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_get_fifoctr_adr
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_write_data
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_is_set_frdy
</UL>

<P><STRONG><a name="[7e]"></a>hw_usb_read_fifosel</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, usb_creg_access.o(i.hw_usb_read_fifosel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hw_usb_read_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_get_fifosel_adr
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_chg_curpipe
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_pipe_reg
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_forced_termination
</UL>

<P><STRONG><a name="[12c]"></a>hw_usb_read_frmnum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_read_frmnum))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_nrdy_pipe_process
</UL>

<P><STRONG><a name="[66]"></a>hw_usb_read_intsts</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_read_intsts))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetInformation
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_interrupt_handler
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_suspend_process
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_remote_wakeup
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_chk_vbsts
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_chk_configured
</UL>

<P><STRONG><a name="[c6]"></a>hw_usb_read_pipecfg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_read_pipecfg))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_get_pipe_type
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_get_pipe_dir
</UL>

<P><STRONG><a name="[c4]"></a>hw_usb_read_pipectr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_read_pipectr))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_nak
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_get_pid
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_bemp_pipe_process
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_forced_termination
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_data_end
</UL>

<P><STRONG><a name="[c2]"></a>hw_usb_read_pipemaxp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_read_pipemaxp))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_get_maxpacket_size
</UL>

<P><STRONG><a name="[c9]"></a>hw_usb_read_syscfg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_read_syscfg))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_is_set_frdy
</UL>

<P><STRONG><a name="[ca]"></a>hw_usb_read_syssts</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_read_syssts))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_bc_data_contact_detect
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_is_set_frdy
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_suspend_process
</UL>

<P><STRONG><a name="[136]"></a>hw_usb_read_usbindx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_read_usbindx))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_save_request
</UL>

<P><STRONG><a name="[137]"></a>hw_usb_read_usbleng</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_read_usbleng))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_save_request
</UL>

<P><STRONG><a name="[134]"></a>hw_usb_read_usbreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_read_usbreq))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_save_request
</UL>

<P><STRONG><a name="[135]"></a>hw_usb_read_usbval</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_read_usbval))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_save_request
</UL>

<P><STRONG><a name="[80]"></a>hw_usb_rmw_fifosel</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, usb_creg_access.o(i.hw_usb_rmw_fifosel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_get_fifosel_adr
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_chg_curpipe
</UL>

<P><STRONG><a name="[be]"></a>hw_usb_set_aclrm</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_set_aclrm))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_do_aclrm
</UL>

<P><STRONG><a name="[eb]"></a>hw_usb_set_batchge</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_set_batchge))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_bc_detect_process
</UL>

<P><STRONG><a name="[e8]"></a>hw_usb_set_bcctrl</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_set_bcctrl))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_bc_secondary_detection
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_bc_primary_detection
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_bc_data_contact_detect
</UL>

<P><STRONG><a name="[81]"></a>hw_usb_set_bclr</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usb_creg_access.o(i.hw_usb_set_bclr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hw_usb_set_bclr
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_get_fifoctr_adr
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_ctrl_write
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_ctrl_read
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_read_data
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_brdy_pipe
</UL>

<P><STRONG><a name="[f5]"></a>hw_usb_set_bempenb</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_set_bempenb))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_buf_to_fifo
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_ctrl_read
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_bemp_pipe_process
</UL>

<P><STRONG><a name="[fc]"></a>hw_usb_set_brdyenb</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_set_brdyenb))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_buf_to_fifo
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_ctrl_write
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_receive_start
</UL>

<P><STRONG><a name="[82]"></a>hw_usb_set_bval</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usb_creg_access.o(i.hw_usb_set_bval))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hw_usb_set_bval
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_get_fifoctr_adr
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_write_data
</UL>

<P><STRONG><a name="[e7]"></a>hw_usb_set_cnen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_set_cnen))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_bc_data_contact_detect
</UL>

<P><STRONG><a name="[83]"></a>hw_usb_set_mbw</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usb_creg_access.o(i.hw_usb_set_mbw))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hw_usb_set_mbw
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_get_fifosel_adr
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_ctrl_end
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_write_fifo
</UL>

<P><STRONG><a name="[cc]"></a>hw_usb_set_nrdyenb</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_set_nrdyenb))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_nrdy_enable
</UL>

<P><STRONG><a name="[cf]"></a>hw_usb_set_pid</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usb_creg_access.o(i.hw_usb_set_pid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hw_usb_set_pid
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_stall_pipe0
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_buf
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_stall
</UL>

<P><STRONG><a name="[ac]"></a>hw_usb_set_sqclr</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_set_sqclr))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_pipe_config
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_clr_pipe_config
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_clr_feature3
</UL>

<P><STRONG><a name="[b5]"></a>hw_usb_set_trclr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_set_trclr))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_transaction
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_clr_transaction
</UL>

<P><STRONG><a name="[d3]"></a>hw_usb_set_trenb</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_set_trenb))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_transaction
</UL>

<P><STRONG><a name="[d6]"></a>hw_usb_set_vdcen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_set_vdcen))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_module_start
</UL>

<P><STRONG><a name="[d7]"></a>hw_usb_set_vddusbe</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_set_vddusbe))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_module_start
</UL>

<P><STRONG><a name="[100]"></a>hw_usb_write_dcpcfg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_write_dcpcfg))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_bus_reset
</UL>

<P><STRONG><a name="[101]"></a>hw_usb_write_dcpmxps</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_write_dcpmxps))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_bus_reset
</UL>

<P><STRONG><a name="[14d]"></a>hw_usb_write_fifo16</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_write_fifo16))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_write_fifo
</UL>

<P><STRONG><a name="[14e]"></a>hw_usb_write_fifo8</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_write_fifo8))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_write_fifo
</UL>

<P><STRONG><a name="[aa]"></a>hw_usb_write_pipecfg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_write_pipecfg))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_pipe_config
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_clr_pipe_config
</UL>

<P><STRONG><a name="[ab]"></a>hw_usb_write_pipemaxp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_write_pipemaxp))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_pipe_config
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_clr_pipe_config
</UL>

<P><STRONG><a name="[a9]"></a>hw_usb_write_pipesel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_write_pipesel))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_get_pipe_type
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_get_pipe_dir
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_pipe_config
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_clr_pipe_config
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_get_maxpacket_size
</UL>

<P><STRONG><a name="[d2]"></a>hw_usb_write_pipetrn</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_creg_access.o(i.hw_usb_write_pipetrn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hw_usb_write_pipetrn
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_transaction
</UL>

<P><STRONG><a name="[12]"></a>IRQ05_Handler</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, usb_157_mcu.o(i.intp_5_37_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ05_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g157.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>intp_5_37_interrupt</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usb_157_mcu.o(i.intp_5_37_interrupt), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cpu_usb_interrupt
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_GetPendingIRQ
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_ClearPendingIRQ
</UL>

<P><STRONG><a name="[13]"></a>IRQ06_Handler</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, usb_157_mcu.o(i.intp_6_38_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ06_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g157.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>intp_6_38_interrupt</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usb_157_mcu.o(i.intp_6_38_interrupt), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cpu_usb_resume_interrupt
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_GetPendingIRQ
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_ClearPendingIRQ
</UL>

<P><STRONG><a name="[2d]"></a>main</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = main &rArr; usb_main &rArr; USB_GetEvent &rArr; usb_cstd_usb_task &rArr; usb_pmsc_task &rArr; usb_pmsc_check_cbw &rArr; usb_pmsc_csw_transfer &rArr; usb_pmsc_transfer_start &rArr; usb_pstd_transfer_start &rArr; usb_pstd_set_submitutr &rArr; usb_pstd_send_start &rArr; usb_pstd_buf_to_fifo &rArr; usb_pstd_write_data &rArr; usb_cstd_is_set_frdy &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_main
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Fclk_Select
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_INIT
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[91]"></a>pmsc_atapi_analyze_cbwcb</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, usb_atapi_driver.o(i.pmsc_atapi_analyze_cbwcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pmsc_atapi_analyze_cbwcb &rArr; USB_media_ioctl
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmsc_atapi_get_mode_sense10_data
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_media_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_check_cbw
</UL>

<P><STRONG><a name="[94]"></a>pmsc_atapi_command_processing</STRONG> (Thumb, 574 bytes, Stack size 32 bytes, usb_atapi_driver.o(i.pmsc_atapi_command_processing))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pmsc_atapi_command_processing &rArr; pmsc_atapi_get_read_data &rArr; USB_media_read
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmsc_atapi_get_read_data
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_media_write
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_task
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_check_cbw
</UL>

<P><STRONG><a name="[98]"></a>pmsc_atapi_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usb_atapi_driver.o(i.pmsc_atapi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pmsc_atapi_init
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_task
</UL>

<P><STRONG><a name="[15]"></a>IRQ08_Handler</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, sci_user.o(i.spi01_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ08_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g157.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>spi01_interrupt</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, sci_user.o(i.spi01_interrupt), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi01_callback_sendend
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi01_callback_receiveend
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi01_callback_error
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_ClearPendingIRQ
</UL>

<P><STRONG><a name="[14]"></a>IRQ07_Handler</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, sci_user.o(i.uart0_interrupt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ07_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g157.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>uart0_interrupt_send</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, sci_user.o(i.uart0_interrupt_send), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_callback_sendend
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_ClearPendingIRQ
</UL>

<P><STRONG><a name="[17]"></a>IRQ10_Handler</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, sci_user.o(i.uart1_interrupt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ10_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32g157.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>uart1_interrupt_send</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, sci_user.o(i.uart1_interrupt_send), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_callback_sendend
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_ClearPendingIRQ
</UL>

<P><STRONG><a name="[106]"></a>usb_cpu_delay_1us</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(i.usb_cpu_delay_1us))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_chk_vbsts
</UL>

<P><STRONG><a name="[6e]"></a>usb_cpu_delay_xms</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.usb_cpu_delay_xms))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Open
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_bc_secondary_detection
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_bc_primary_detection
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_bc_data_contact_detect
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_attach_process
</UL>

<P><STRONG><a name="[6a]"></a>usb_cpu_usbint_init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, usb_157_mcu.o(i.usb_cpu_usbint_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usb_cpu_usbint_init &rArr; INTC_ClearPendingIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Open
</UL>

<P><STRONG><a name="[a3]"></a>usb_cstd_chg_curpipe</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, usb_creg_abs.o(i.usb_cstd_chg_curpipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_rmw_fifosel
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_read_fifosel
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_ctrl_write
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_ctrl_read
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_clr_pipe_config
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_is_set_frdy
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_pipe_reg
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_receive_start
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_forced_termination
</UL>

<P><STRONG><a name="[a4]"></a>usb_cstd_clr_pipe_config</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, usb_creg_abs.o(i.usb_cstd_clr_pipe_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = usb_cstd_clr_pipe_config &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_clear_status_bemp
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_clear_nrdyenb
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_clear_brdyenb
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_clear_bempenb
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_write_pipesel
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_do_aclrm
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_clr_stall
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_chg_curpipe
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_write_pipemaxp
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_write_pipecfg
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_clear_status_nrdy
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_set_sqclr
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_clr_transaction
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_clear_sts_brdy
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_pipe_reg_clear
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_detach_process
</UL>

<P><STRONG><a name="[a5]"></a>usb_cstd_clr_stall</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usb_clibusbip.o(i.usb_cstd_clr_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usb_cstd_clr_stall &rArr; usb_cstd_set_nak &rArr; hw_usb_clear_pid
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_nak
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_clear_pid
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_pipe_config
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_clr_pipe_config
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_clr_feature3
</UL>

<P><STRONG><a name="[ae]"></a>usb_cstd_clr_transaction</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usb_creg_abs.o(i.usb_cstd_clr_transaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_cstd_clr_transaction
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_set_trclr
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_clear_trenb
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_clr_pipe_config
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_forced_termination
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_data_end
</UL>

<P><STRONG><a name="[71]"></a>usb_cstd_ctrl_receive</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usb_cdataio.o(i.usb_cstd_ctrl_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = usb_cstd_ctrl_receive &rArr; usb_pstd_ctrl_write &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_ctrl_write
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Read
</UL>

<P><STRONG><a name="[74]"></a>usb_cstd_ctrl_send</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, usb_cdataio.o(i.usb_cstd_ctrl_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = usb_cstd_ctrl_send &rArr; usb_pstd_ctrl_read &rArr; usb_pstd_write_data &rArr; usb_cstd_is_set_frdy &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_stall_pipe0
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_ctrl_read
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_buf
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_event
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Write
</UL>

<P><STRONG><a name="[72]"></a>usb_cstd_data_read</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, usb_cdataio.o(i.usb_cstd_data_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = usb_cstd_data_read &rArr; usb_pstd_transfer_start &rArr; usb_pstd_set_submitutr &rArr; usb_pstd_send_start &rArr; usb_pstd_buf_to_fifo &rArr; usb_pstd_write_data &rArr; usb_cstd_is_set_frdy &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_transfer_start
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_get_usepipe
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Read
</UL>

<P><STRONG><a name="[75]"></a>usb_cstd_data_write</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, usb_cdataio.o(i.usb_cstd_data_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = usb_cstd_data_write &rArr; usb_pstd_transfer_start &rArr; usb_pstd_set_submitutr &rArr; usb_pstd_send_start &rArr; usb_pstd_buf_to_fifo &rArr; usb_pstd_write_data &rArr; usb_cstd_is_set_frdy &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_transfer_start
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_get_usepipe
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Write
</UL>

<P><STRONG><a name="[ad]"></a>usb_cstd_do_aclrm</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usb_clibusbip.o(i.usb_cstd_do_aclrm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_cstd_do_aclrm
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_set_aclrm
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_clear_aclrm
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_pipe_config
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_clr_pipe_config
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_forced_termination
</UL>

<P><STRONG><a name="[c0]"></a>usb_cstd_get_maxpacket_size</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, usb_creg_abs.o(i.usb_cstd_get_maxpacket_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usb_cstd_get_maxpacket_size
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_write_pipesel
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_read_pipemaxp
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_read_dcpmaxp
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_write_data
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_receive_start
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_read_data
</UL>

<P><STRONG><a name="[c3]"></a>usb_cstd_get_pid</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, usb_clibusbip.o(i.usb_cstd_get_pid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usb_cstd_get_pid
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_read_pipectr
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_get_status1
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_clr_feature3
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_bemp_pipe_process
</UL>

<P><STRONG><a name="[c5]"></a>usb_cstd_get_pipe_dir</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usb_clibusbip.o(i.usb_cstd_get_pipe_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usb_cstd_get_pipe_dir
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_write_pipesel
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_read_pipecfg
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_brdy_pipe_process
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_data_end
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_submitutr
</UL>

<P><STRONG><a name="[c7]"></a>usb_cstd_get_pipe_type</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usb_clibusbip.o(i.usb_cstd_get_pipe_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usb_cstd_get_pipe_type
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_write_pipesel
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_read_pipecfg
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_transfer_start
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_nrdy_pipe_process
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_data_end
</UL>

<P><STRONG><a name="[bc]"></a>usb_cstd_get_usepipe</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usb_cdataio.o(i.usb_cstd_get_usepipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_cstd_get_usepipe
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_data_write
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_data_read
</UL>

<P><STRONG><a name="[c8]"></a>usb_cstd_is_set_frdy</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, usb_creg_abs.o(i.usb_cstd_is_set_frdy))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = usb_cstd_is_set_frdy &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_read_syssts
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_chg_curpipe
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_read_syscfg
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_read_fifoctr
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_write_data
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_read_data
</UL>

<P><STRONG><a name="[cb]"></a>usb_cstd_nrdy_enable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usb_clibusbip.o(i.usb_cstd_nrdy_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_cstd_nrdy_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_set_nrdyenb
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_buf_to_fifo
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_ctrl_write
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_ctrl_read
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_receive_start
</UL>

<P><STRONG><a name="[cd]"></a>usb_cstd_pipe_reg_clear</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usb_cdataio.o(i.usb_cstd_pipe_reg_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = usb_cstd_pipe_reg_clear &rArr; usb_cstd_clr_pipe_config &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_clr_pipe_config
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_configuration3
</UL>

<P><STRONG><a name="[113]"></a>usb_cstd_pipe_table_clear</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, usb_cdataio.o(i.usb_cstd_pipe_table_clear))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_devdefault
</UL>

<P><STRONG><a name="[f9]"></a>usb_cstd_pipe_to_fport</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_cdataio.o(i.usb_cstd_pipe_to_fport))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_brdy_pipe_process
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_send_start
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_receive_start
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_data_end
</UL>

<P><STRONG><a name="[65]"></a>usb_cstd_port_speed</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usb_clibusbip.o(i.usb_cstd_port_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_cstd_port_speed
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_read_dvstctr
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetInformation
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_bus_reset
</UL>

<P><STRONG><a name="[b7]"></a>usb_cstd_set_buf</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usb_clibusbip.o(i.usb_cstd_set_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usb_cstd_set_buf &rArr; hw_usb_set_pid
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_set_pid
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_ctrl_write
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_ctrl_read
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_ctrl_send
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_mass_strage_reset
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_class_request_wss
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_class_request_rss
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_interface3
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_feature3
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_configuration3
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_address3
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_clr_feature3
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_stand_req5
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_stand_req4
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_send_start
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_receive_start
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_brdy_pipe
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_bemp_pipe
</UL>

<P><STRONG><a name="[ba]"></a>usb_cstd_set_event</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usb_cdataio.o(i.usb_cstd_set_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usb_cstd_set_event
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_devdefault
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_detach
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_configured
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_bc_detect_process
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_phid_write_complete
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_phid_read_complete
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_ctrl_send
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_other_request
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_class_request_wss
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_class_request_wnss
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_class_request_rwds
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_class_request_rss
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_stand_req5
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_stand_req4
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_stand_req3
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_suspended
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_resume
</UL>

<P><STRONG><a name="[b2]"></a>usb_cstd_set_nak</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usb_creg_abs.o(i.usb_cstd_set_nak))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usb_cstd_set_nak &rArr; hw_usb_clear_pid
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_read_pipectr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_clear_pid
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_ctrl_end
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_clr_stall
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_clr_feature3
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_send_start
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_receive_start
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_read_data
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_forced_termination
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_data_end
</UL>

<P><STRONG><a name="[d0]"></a>usb_cstd_set_pipe_config</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, usb_creg_abs.o(i.usb_cstd_set_pipe_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usb_cstd_set_pipe_config &rArr; usb_cstd_clr_stall &rArr; usb_cstd_set_nak &rArr; hw_usb_clear_pid
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_clear_status_bemp
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_clear_nrdyenb
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_clear_brdyenb
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_clear_bempenb
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_write_pipesel
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_do_aclrm
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_clr_stall
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_write_pipemaxp
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_write_pipecfg
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_clear_status_nrdy
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_set_sqclr
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_clear_sts_brdy
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_pipe_reg
</UL>

<P><STRONG><a name="[d1]"></a>usb_cstd_set_transaction</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usb_creg_abs.o(i.usb_cstd_set_transaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usb_cstd_set_transaction &rArr; hw_usb_write_pipetrn
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_write_pipetrn
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_set_trenb
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_set_trclr
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_receive_start
</UL>

<P><STRONG><a name="[62]"></a>usb_cstd_usb_task</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usb_cdataio.o(i.usb_cstd_usb_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = usb_cstd_usb_task &rArr; usb_pmsc_task &rArr; usb_pmsc_check_cbw &rArr; usb_pmsc_csw_transfer &rArr; usb_pmsc_transfer_start &rArr; usb_pstd_transfer_start &rArr; usb_pstd_set_submitutr &rArr; usb_pstd_send_start &rArr; usb_pstd_buf_to_fifo &rArr; usb_pstd_write_data &rArr; usb_cstd_is_set_frdy &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_pcd_task
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_task
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetEvent
</UL>

<P><STRONG><a name="[8d]"></a>usb_main</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, usb_phid_pmsc_apl.o(i.usb_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = usb_main &rArr; USB_GetEvent &rArr; usb_cstd_usb_task &rArr; usb_pmsc_task &rArr; usb_pmsc_check_cbw &rArr; usb_pmsc_csw_transfer &rArr; usb_pmsc_transfer_start &rArr; usb_pstd_transfer_start &rArr; usb_pstd_set_submitutr &rArr; usb_pstd_send_start &rArr; usb_pstd_buf_to_fifo &rArr; usb_pstd_write_data &rArr; usb_cstd_is_set_frdy &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Write
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Read
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Open
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetEvent
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;media_driver_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69]"></a>usb_module_start</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usb_157_mcu.o(i.usb_module_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_module_start
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_set_vddusbe
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_set_vdcen
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Open
</UL>

<P><STRONG><a name="[0]"></a>usb_phid_read_complete</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, usb_phid_driver.o(i.usb_phid_read_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = usb_phid_read_complete &rArr; usb_cstd_set_event
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_cdataio.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>usb_phid_write_complete</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, usb_phid_driver.o(i.usb_phid_write_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = usb_phid_write_complete &rArr; usb_cstd_set_event
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_cdataio.o(.data)
</UL>
<P><STRONG><a name="[df]"></a>usb_pmsc_get_max_lun</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, usb_pmsc_driver.o(i.usb_pmsc_get_max_lun))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = usb_pmsc_get_max_lun &rArr; usb_pstd_ctrl_read &rArr; usb_pstd_write_data &rArr; usb_cstd_is_set_frdy &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_ctrl_end
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_stall_pipe0
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_ctrl_read
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_class_request_rwds
</UL>

<P><STRONG><a name="[e1]"></a>usb_pmsc_init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usb_pmsc_driver.o(i.usb_pmsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_pmsc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_task
</UL>

<P><STRONG><a name="[e2]"></a>usb_pmsc_mass_strage_reset</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usb_pmsc_driver.o(i.usb_pmsc_mass_strage_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = usb_pmsc_mass_strage_reset &rArr; usb_pmsc_receive_cbw &rArr; usb_pmsc_transfer_start &rArr; usb_pstd_transfer_start &rArr; usb_pstd_set_submitutr &rArr; usb_pstd_send_start &rArr; usb_pstd_buf_to_fifo &rArr; usb_pstd_write_data &rArr; usb_cstd_is_set_frdy &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_ctrl_end
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_stall_pipe0
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_buf
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_receive_cbw
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_class_request_wnss
</UL>

<P><STRONG><a name="[e3]"></a>usb_pmsc_receive_cbw</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usb_pmsc_driver.o(i.usb_pmsc_receive_cbw))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = usb_pmsc_receive_cbw &rArr; usb_pmsc_transfer_start &rArr; usb_pstd_transfer_start &rArr; usb_pstd_set_submitutr &rArr; usb_pstd_send_start &rArr; usb_pstd_buf_to_fifo &rArr; usb_pstd_write_data &rArr; usb_cstd_is_set_frdy &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_transfer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_configured
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_task
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_mass_strage_reset
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_interface
</UL>

<P><STRONG><a name="[d5]"></a>usb_pmsc_task</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, usb_pmsc_driver.o(i.usb_pmsc_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = usb_pmsc_task &rArr; usb_pmsc_check_cbw &rArr; usb_pmsc_csw_transfer &rArr; usb_pmsc_transfer_start &rArr; usb_pstd_transfer_start &rArr; usb_pstd_set_submitutr &rArr; usb_pstd_send_start &rArr; usb_pstd_buf_to_fifo &rArr; usb_pstd_write_data &rArr; usb_cstd_is_set_frdy &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_receive_cbw
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_check_cbw
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmsc_atapi_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmsc_atapi_command_processing
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_usb_task
</UL>

<P><STRONG><a name="[e4]"></a>usb_pstd_attach_process</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usb_psignal.o(i.usb_pstd_attach_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = usb_pstd_attach_process &rArr; usb_pstd_bc_detect_process &rArr; usb_pstd_bc_data_contact_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cpu_delay_xms
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_bc_detect_process
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_pset_dprpu
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_interrupt_process
</UL>

<P><STRONG><a name="[e5]"></a>usb_pstd_bc_detect_process</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, usb_pbc.o(i.usb_pstd_bc_detect_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usb_pstd_bc_detect_process &rArr; usb_pstd_bc_data_contact_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_set_batchge
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_clear_batchge
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_bc_secondary_detection
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_bc_primary_detection
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_bc_data_contact_detect
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_event
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_attach_process
</UL>

<P><STRONG><a name="[f0]"></a>usb_pstd_bemp_pipe</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, usb_pintfifo.o(i.usb_pstd_bemp_pipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = usb_pstd_bemp_pipe &rArr; usb_pstd_write_data &rArr; usb_cstd_is_set_frdy &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_write_data
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_clear_bempenb
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_ctrl_end
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_buf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_bemp_pipe_process
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_interrupt_process
</UL>

<P><STRONG><a name="[f2]"></a>usb_pstd_bemp_pipe_process</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, usb_plibusbip.o(i.usb_pstd_bemp_pipe_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = usb_pstd_bemp_pipe_process &rArr; usb_pstd_forced_termination &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_set_bempenb
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_read_pipectr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_get_pid
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_forced_termination
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_data_end
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_bemp_pipe
</UL>

<P><STRONG><a name="[f6]"></a>usb_pstd_brdy_pipe</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, usb_pintfifo.o(i.usb_pstd_brdy_pipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = usb_pstd_brdy_pipe &rArr; usb_pstd_brdy_pipe_process &rArr; usb_pstd_buf_to_fifo &rArr; usb_pstd_write_data &rArr; usb_cstd_is_set_frdy &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_set_bclr
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_clear_brdyenb
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_ctrl_end
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_buf
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_brdy_pipe_process
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_interrupt_process
</UL>

<P><STRONG><a name="[f8]"></a>usb_pstd_brdy_pipe_process</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, usb_plibusbip.o(i.usb_pstd_brdy_pipe_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = usb_pstd_brdy_pipe_process &rArr; usb_pstd_buf_to_fifo &rArr; usb_pstd_write_data &rArr; usb_cstd_is_set_frdy &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_buf_to_fifo
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_clear_status_bemp
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_get_pipe_dir
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_pipe_to_fport
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_fifo_to_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_brdy_pipe
</UL>

<P><STRONG><a name="[fa]"></a>usb_pstd_buf_to_fifo</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, usb_pdriver.o(i.usb_pstd_buf_to_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = usb_pstd_buf_to_fifo &rArr; usb_pstd_write_data &rArr; usb_cstd_is_set_frdy &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_write_data
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_set_brdyenb
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_set_bempenb
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_clear_brdyenb
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_nrdy_enable
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_forced_termination
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_brdy_pipe_process
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_send_start
</UL>

<P><STRONG><a name="[fd]"></a>usb_pstd_bus_reset</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usb_psignal.o(i.usb_pstd_bus_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usb_pstd_bus_reset &rArr; usb_cstd_port_speed
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_clr_mem
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_port_speed
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_busreset_function
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_write_dcpmxps
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_write_dcpcfg
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_interrupt_process
</UL>

<P><STRONG><a name="[fe]"></a>usb_pstd_busreset_function</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_pstdfunction.o(i.usb_pstd_busreset_function))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_bus_reset
</UL>

<P><STRONG><a name="[dc]"></a>usb_pstd_change_device_state</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, usb_pdriver.o(i.usb_pstd_change_device_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usb_pstd_change_device_state &rArr; usb_pstd_set_stall &rArr; hw_usb_set_pid
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_stall
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_remote_wakeup
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_pset_dprpu
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_pclear_dprpu
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_data_transfer
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_check_cbw
</UL>

<P><STRONG><a name="[105]"></a>usb_pstd_chk_configured</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usb_preg_abs.o(i.usb_pstd_chk_configured))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_pstd_chk_configured
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_read_intsts
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_transfer_start
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_interface3
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_get_status1
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_submitutr
</UL>

<P><STRONG><a name="[10e]"></a>usb_pstd_chk_remote</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usb_pdriver.o(i.usb_pstd_chk_remote))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_feature3
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_clr_feature3
</UL>

<P><STRONG><a name="[6d]"></a>usb_pstd_chk_vbsts</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, usb_pstdfunction.o(i.usb_pstd_chk_vbsts))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usb_pstd_chk_vbsts
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cpu_delay_1us
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_read_intsts
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Open
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_interrupt_process
</UL>

<P><STRONG><a name="[3c]"></a>usb_pstd_class_request</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, usb_pstdrequest.o(i.usb_pstd_class_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = usb_pstd_class_request &rArr; usb_pstd_class_request_wnss &rArr; usb_pmsc_mass_strage_reset &rArr; usb_pmsc_receive_cbw &rArr; usb_pmsc_transfer_start &rArr; usb_pstd_transfer_start &rArr; usb_pstd_set_submitutr &rArr; usb_pstd_send_start &rArr; usb_pstd_buf_to_fifo &rArr; usb_pstd_write_data &rArr; usb_cstd_is_set_frdy &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_ctrl_end
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_other_request
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_class_request_wss
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_class_request_wnss
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_class_request_rwds
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_class_request_rss
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_class_request_ioss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_pdriver.o(i.usb_pstd_registration)
</UL>
<P><STRONG><a name="[107]"></a>usb_pstd_class_request_ioss</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_pstdrequest.o(i.usb_pstd_class_request_ioss))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_class_request
</UL>

<P><STRONG><a name="[10a]"></a>usb_pstd_class_request_rss</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, usb_pstdrequest.o(i.usb_pstd_class_request_rss))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = usb_pstd_class_request_rss &rArr; usb_pstd_ctrl_end &rArr; usb_cstd_set_nak &rArr; hw_usb_clear_pid
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_ctrl_end
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_buf
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_event
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_class_request
</UL>

<P><STRONG><a name="[108]"></a>usb_pstd_class_request_rwds</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, usb_pstdrequest.o(i.usb_pstd_class_request_rwds))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = usb_pstd_class_request_rwds &rArr; usb_pmsc_get_max_lun &rArr; usb_pstd_ctrl_read &rArr; usb_pstd_write_data &rArr; usb_cstd_is_set_frdy &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_stall_pipe0
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_event
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_get_max_lun
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_class_request
</UL>

<P><STRONG><a name="[109]"></a>usb_pstd_class_request_wnss</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, usb_pstdrequest.o(i.usb_pstd_class_request_wnss))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = usb_pstd_class_request_wnss &rArr; usb_pmsc_mass_strage_reset &rArr; usb_pmsc_receive_cbw &rArr; usb_pmsc_transfer_start &rArr; usb_pstd_transfer_start &rArr; usb_pstd_set_submitutr &rArr; usb_pstd_send_start &rArr; usb_pstd_buf_to_fifo &rArr; usb_pstd_write_data &rArr; usb_cstd_is_set_frdy &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_ctrl_end
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_stall_pipe0
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_event
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_mass_strage_reset
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_class_request
</UL>

<P><STRONG><a name="[10b]"></a>usb_pstd_class_request_wss</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, usb_pstdrequest.o(i.usb_pstd_class_request_wss))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = usb_pstd_class_request_wss &rArr; usb_pstd_ctrl_end &rArr; usb_cstd_set_nak &rArr; hw_usb_clear_pid
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_ctrl_end
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_buf
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_event
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_class_request
</UL>

<P><STRONG><a name="[110]"></a>usb_pstd_clr_alt</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_pdriver.o(i.usb_pstd_clr_alt))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_clr_mem
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_config_no
</UL>

<P><STRONG><a name="[ff]"></a>usb_pstd_clr_mem</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, usb_pdriver.o(i.usb_pstd_clr_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = usb_pstd_clr_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_clr_alt
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_bus_reset
</UL>

<P><STRONG><a name="[37]"></a>usb_pstd_configured</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, usb_pdriver.o(i.usb_pstd_configured))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = usb_pstd_configured &rArr; usb_pmsc_receive_cbw &rArr; usb_pmsc_transfer_start &rArr; usb_pstd_transfer_start &rArr; usb_pstd_set_submitutr &rArr; usb_pstd_send_start &rArr; usb_pstd_buf_to_fifo &rArr; usb_pstd_write_data &rArr; usb_cstd_is_set_frdy &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_event
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_receive_cbw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_pdriver.o(i.usb_pstd_registration)
</UL>
<P><STRONG><a name="[e0]"></a>usb_pstd_ctrl_end</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, usb_pcontrolrw.o(i.usb_pstd_ctrl_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usb_pstd_ctrl_end &rArr; usb_cstd_set_nak &rArr; hw_usb_clear_pid
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_set_mbw
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_pset_ccpl
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_clear_nrdyenb
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_clear_brdyenb
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_clear_bempenb
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_nak
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_stall_pipe0
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_interrupt_process
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_mass_strage_reset
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_get_max_lun
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_class_request_wss
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_class_request_wnss
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_class_request_rss
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_stand_req5
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_stand_req4
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_stand_req3
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_class_request
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_brdy_pipe
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_bemp_pipe
</UL>

<P><STRONG><a name="[bb]"></a>usb_pstd_ctrl_read</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, usb_pcontrolrw.o(i.usb_pstd_ctrl_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = usb_pstd_ctrl_read &rArr; usb_pstd_write_data &rArr; usb_cstd_is_set_frdy &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_write_data
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_set_bempenb
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_set_bclr
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_clear_status_bemp
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_nrdy_enable
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_buf
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_chg_curpipe
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_ctrl_send
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_get_max_lun
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_get_status1
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_get_interface1
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_get_descriptor1
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_get_configuration1
</UL>

<P><STRONG><a name="[b6]"></a>usb_pstd_ctrl_write</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usb_pcontrolrw.o(i.usb_pstd_ctrl_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = usb_pstd_ctrl_write &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_set_brdyenb
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_set_bclr
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_nrdy_enable
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_buf
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_chg_curpipe
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_ctrl_receive
</UL>

<P><STRONG><a name="[f4]"></a>usb_pstd_data_end</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, usb_plibusbip.o(i.usb_pstd_data_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usb_pstd_data_end &rArr; usb_cstd_set_nak &rArr; hw_usb_clear_pid
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_clear_nrdyenb
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_clear_brdyenb
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_clear_bempenb
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_nak
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_read_pipectr
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_get_pipe_type
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_get_pipe_dir
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_pipe_to_fport
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_clr_transaction
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_bemp_pipe_process
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_fifo_to_buf
</UL>

<P><STRONG><a name="[38]"></a>usb_pstd_detach</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, usb_pdriver.o(i.usb_pstd_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = usb_pstd_detach &rArr; usb_cstd_set_event
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_event
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_devdefault
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_pdriver.o(i.usb_pstd_registration)
</UL>
<P><STRONG><a name="[112]"></a>usb_pstd_detach_process</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, usb_psignal.o(i.usb_pstd_detach_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = usb_pstd_detach_process &rArr; usb_pstd_forced_termination &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_clr_pipe_config
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_forced_termination
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_pclear_dprpu
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_interrupt_process
</UL>

<P><STRONG><a name="[36]"></a>usb_pstd_devdefault</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, usb_pdriver.o(i.usb_pstd_devdefault))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = usb_pstd_devdefault &rArr; usb_pstd_pipe_info &rArr; usb_pstd_set_pipe_table &rArr; usb_pstd_get_pipe_no
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_detach
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_event
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_pipe_table_clear
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_pipe_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_pdriver.o(i.usb_pstd_registration)
</UL>
<P><STRONG><a name="[6b]"></a>usb_pstd_driver_init</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, usb_pstdfunction.o(i.usb_pstd_driver_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = usb_pstd_driver_init &rArr; usb_pstd_registration
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_registration
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Open
</UL>

<P><STRONG><a name="[131]"></a>usb_pstd_driver_registration</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, usb_pdriver.o(i.usb_pstd_driver_registration))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_registration
</UL>

<P><STRONG><a name="[10f]"></a>usb_pstd_epadr_to_pipe</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, usb_plibusbip.o(i.usb_pstd_epadr_to_pipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usb_pstd_epadr_to_pipe
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_feature3
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_get_status1
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_clr_feature3
</UL>

<P><STRONG><a name="[fb]"></a>usb_pstd_fifo_to_buf</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, usb_pdriver.o(i.usb_pstd_fifo_to_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = usb_pstd_fifo_to_buf &rArr; usb_pstd_read_data &rArr; usb_cstd_is_set_frdy &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_read_data
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_forced_termination
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_data_end
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_brdy_pipe_process
</UL>

<P><STRONG><a name="[f3]"></a>usb_pstd_forced_termination</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, usb_preg_abs.o(i.usb_pstd_forced_termination))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = usb_pstd_forced_termination &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_clear_nrdyenb
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_clear_brdyenb
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_clear_bempenb
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_nak
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_read_pipectr
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_do_aclrm
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_chg_curpipe
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_clr_transaction
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_read_fifosel
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_buf_to_fifo
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_nrdy_pipe_process
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_bemp_pipe_process
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_send_start
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_receive_start
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_detach_process
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_submitutr
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_fifo_to_buf
</UL>

<P><STRONG><a name="[116]"></a>usb_pstd_get_alternate_no</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, usb_pdriver.o(i.usb_pstd_get_alternate_no))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usb_pstd_get_alternate_no &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_interface3
</UL>

<P><STRONG><a name="[11b]"></a>usb_pstd_get_current_power</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_pdriver.o(i.usb_pstd_get_current_power))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_get_status1
</UL>

<P><STRONG><a name="[11c]"></a>usb_pstd_get_interface_no</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_pdriver.o(i.usb_pstd_get_interface_no))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_interface3
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_configuration3
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_get_status1
</UL>

<P><STRONG><a name="[64]"></a>usb_pstd_get_open_class</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, usb_pstdfunction.o(i.usb_pstd_get_open_class))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetInformation
</UL>

<P><STRONG><a name="[143]"></a>usb_pstd_get_pipe_no</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, usb_plibusbip.o(i.usb_pstd_get_pipe_no))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usb_pstd_get_pipe_no
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_pipe_table
</UL>

<P><STRONG><a name="[3b]"></a>usb_pstd_interface</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, usb_pdriver.o(i.usb_pstd_interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = usb_pstd_interface &rArr; usb_pmsc_receive_cbw &rArr; usb_pmsc_transfer_start &rArr; usb_pstd_transfer_start &rArr; usb_pstd_set_submitutr &rArr; usb_pstd_send_start &rArr; usb_pstd_buf_to_fifo &rArr; usb_pstd_write_data &rArr; usb_cstd_is_set_frdy &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_receive_cbw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_pdriver.o(i.usb_pstd_registration)
</UL>
<P><STRONG><a name="[11e]"></a>usb_pstd_interrupt_handler</STRONG> (Thumb, 498 bytes, Stack size 64 bytes, usb_preg_abs.o(i.usb_pstd_interrupt_handler), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_read_intsts
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_pclear_sts_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_usb_handler
</UL>

<P><STRONG><a name="[121]"></a>usb_pstd_nrdy_pipe</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usb_pintfifo.o(i.usb_pstd_nrdy_pipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = usb_pstd_nrdy_pipe &rArr; usb_pstd_nrdy_pipe_process &rArr; usb_pstd_forced_termination &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_nrdy_pipe_process
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_interrupt_process
</UL>

<P><STRONG><a name="[12b]"></a>usb_pstd_nrdy_pipe_process</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usb_plibusbip.o(i.usb_pstd_nrdy_pipe_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = usb_pstd_nrdy_pipe_process &rArr; usb_pstd_forced_termination &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_get_pipe_type
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_read_frmnum
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_forced_termination
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_nrdy_pipe
</UL>

<P><STRONG><a name="[10c]"></a>usb_pstd_other_request</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, usb_pstdrequest.o(i.usb_pstd_other_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usb_pstd_other_request &rArr; usb_cstd_set_event
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_event
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_class_request
</UL>

<P><STRONG><a name="[d4]"></a>usb_pstd_pcd_task</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usb_pdriver.o(i.usb_pstd_pcd_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = usb_pstd_pcd_task &rArr; usb_pstd_interrupt_process &rArr; usb_pstd_stand_req1 &rArr; usb_pstd_get_status1 &rArr; usb_pstd_ctrl_read &rArr; usb_pstd_write_data &rArr; usb_cstd_is_set_frdy &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_interrupt_process
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_usb_task
</UL>

<P><STRONG><a name="[114]"></a>usb_pstd_pipe_info</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, usb_pdriver.o(i.usb_pstd_pipe_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = usb_pstd_pipe_info &rArr; usb_pstd_set_pipe_table &rArr; usb_pstd_get_pipe_no
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_pipe_table
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_devdefault
</UL>

<P><STRONG><a name="[f7]"></a>usb_pstd_read_data</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, usb_plibusbip.o(i.usb_pstd_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = usb_pstd_read_data &rArr; usb_cstd_is_set_frdy &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_set_bclr
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_nak
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_read_fifo
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_is_set_frdy
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_get_maxpacket_size
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_brdy_pipe
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_fifo_to_buf
</UL>

<P><STRONG><a name="[12e]"></a>usb_pstd_read_fifo</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, usb_preg_abs.o(i.usb_pstd_read_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usb_pstd_read_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_read_fifo16
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_read_data
</UL>

<P><STRONG><a name="[130]"></a>usb_pstd_receive_start</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, usb_plibusbip.o(i.usb_pstd_receive_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = usb_pstd_receive_start &rArr; usb_pstd_forced_termination &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_set_brdyenb
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_nak
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_nrdy_enable
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_buf
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_chg_curpipe
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_pipe_to_fport
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_transaction
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_get_maxpacket_size
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_forced_termination
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_submitutr
</UL>

<P><STRONG><a name="[115]"></a>usb_pstd_registration</STRONG> (Thumb, 70 bytes, Stack size 52 bytes, usb_pdriver.o(i.usb_pstd_registration))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = usb_pstd_registration
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_driver_registration
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_driver_init
</UL>

<P><STRONG><a name="[103]"></a>usb_pstd_remote_wakeup</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, usb_preg_abs.o(i.usb_pstd_remote_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_pstd_remote_wakeup
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_read_intsts
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_pclear_sts_resm
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_pclear_enb_rsme
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_pset_wkup
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_change_device_state
</UL>

<P><STRONG><a name="[3a]"></a>usb_pstd_resume</STRONG> (Thumb, 18 bytes, Stack size 32 bytes, usb_pdriver.o(i.usb_pstd_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = usb_pstd_resume &rArr; usb_cstd_set_event
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_pdriver.o(i.usb_pstd_registration)
</UL>
<P><STRONG><a name="[122]"></a>usb_pstd_resume_process</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usb_preg_abs.o(i.usb_pstd_resume_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_pstd_resume_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_pclear_sts_resm
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_pclear_enb_rsme
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_interrupt_process
</UL>

<P><STRONG><a name="[124]"></a>usb_pstd_save_request</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usb_preg_abs.o(i.usb_pstd_save_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_pstd_save_request
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_pclear_sts_valid
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_read_usbval
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_read_usbreq
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_read_usbleng
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_read_usbindx
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_interrupt_process
</UL>

<P><STRONG><a name="[138]"></a>usb_pstd_send_start</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, usb_plibusbip.o(i.usb_pstd_send_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = usb_pstd_send_start &rArr; usb_pstd_buf_to_fifo &rArr; usb_pstd_write_data &rArr; usb_cstd_is_set_frdy &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_buf_to_fifo
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_clear_status_bemp
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_nak
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_buf
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_pipe_to_fport
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_clear_sts_brdy
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_forced_termination
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_submitutr
</UL>

<P><STRONG><a name="[13a]"></a>usb_pstd_set_config_no</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_pdriver.o(i.usb_pstd_set_config_no))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_pstd_set_config_no
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_clr_alt
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_configuration0
</UL>

<P><STRONG><a name="[13d]"></a>usb_pstd_set_eptbl_index</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, usb_pdriver.o(i.usb_pstd_set_eptbl_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usb_pstd_set_eptbl_index &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_interface3
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_configuration3
</UL>

<P><STRONG><a name="[141]"></a>usb_pstd_set_feature_function</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usb_pstdfunction.o(i.usb_pstd_set_feature_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usb_pstd_set_feature_function &rArr; usb_pstd_set_stall_pipe0 &rArr; hw_usb_set_pid
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_stall_pipe0
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_feature3
</UL>

<P><STRONG><a name="[13e]"></a>usb_pstd_set_pipe_reg</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, usb_plibusbip.o(i.usb_pstd_set_pipe_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = usb_pstd_set_pipe_reg &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_pipe_config
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_chg_curpipe
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_read_fifosel
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_interface3
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_configuration3
</UL>

<P><STRONG><a name="[12d]"></a>usb_pstd_set_pipe_table</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, usb_plibusbip.o(i.usb_pstd_set_pipe_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usb_pstd_set_pipe_table &rArr; usb_pstd_get_pipe_no
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_get_pipe_no
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_pipe_info
</UL>

<P><STRONG><a name="[102]"></a>usb_pstd_set_stall</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_preg_abs.o(i.usb_pstd_set_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usb_pstd_set_stall &rArr; hw_usb_set_pid
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_set_pid
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_change_device_state
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_feature3
</UL>

<P><STRONG><a name="[b8]"></a>usb_pstd_set_stall_pipe0</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usb_preg_abs.o(i.usb_pstd_set_stall_pipe0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usb_pstd_set_stall_pipe0 &rArr; hw_usb_set_pid
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_set_pid
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_ctrl_end
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_ctrl_send
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_mass_strage_reset
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_get_max_lun
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_class_request_wnss
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_class_request_rwds
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_synch_rame1
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_interface3
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_feature3
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_descriptor2
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_configuration3
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_address3
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_get_status1
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_get_interface1
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_get_descriptor1
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_get_configuration1
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_clr_feature3
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_feature_function
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_stand_req5
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_stand_req4
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_stand_req3
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_stand_req2
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_stand_req1
</UL>

<P><STRONG><a name="[144]"></a>usb_pstd_set_submitutr</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usb_pdriver.o(i.usb_pstd_set_submitutr))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = usb_pstd_set_submitutr &rArr; usb_pstd_send_start &rArr; usb_pstd_buf_to_fifo &rArr; usb_pstd_write_data &rArr; usb_cstd_is_set_frdy &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_get_pipe_dir
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_send_start
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_receive_start
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_forced_termination
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_chk_configured
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_transfer_start
</UL>

<P><STRONG><a name="[125]"></a>usb_pstd_stand_req0</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, usb_pstdrequest.o(i.usb_pstd_stand_req0))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usb_pstd_stand_req0 &rArr; usb_pstd_set_configuration0 &rArr; usb_pstd_set_config_no
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_interface0
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_feature0
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_configuration0
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_address0
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_clr_feature0
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_interrupt_process
</UL>

<P><STRONG><a name="[126]"></a>usb_pstd_stand_req1</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, usb_pstdrequest.o(i.usb_pstd_stand_req1))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = usb_pstd_stand_req1 &rArr; usb_pstd_get_status1 &rArr; usb_pstd_ctrl_read &rArr; usb_pstd_write_data &rArr; usb_cstd_is_set_frdy &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_stall_pipe0
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_synch_rame1
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_get_status1
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_get_interface1
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_get_descriptor1
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_get_configuration1
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_interrupt_process
</UL>

<P><STRONG><a name="[127]"></a>usb_pstd_stand_req2</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usb_pstdrequest.o(i.usb_pstd_stand_req2))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usb_pstd_stand_req2 &rArr; usb_pstd_set_descriptor2 &rArr; usb_pstd_set_stall_pipe0 &rArr; hw_usb_set_pid
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_stall_pipe0
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_descriptor2
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_interrupt_process
</UL>

<P><STRONG><a name="[128]"></a>usb_pstd_stand_req3</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, usb_pstdrequest.o(i.usb_pstd_stand_req3))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = usb_pstd_stand_req3 &rArr; usb_pstd_set_configuration3 &rArr; usb_cstd_pipe_reg_clear &rArr; usb_cstd_clr_pipe_config &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_ctrl_end
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_stall_pipe0
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_event
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_interface3
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_feature3
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_configuration3
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_address3
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_clr_feature3
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_interrupt_process
</UL>

<P><STRONG><a name="[129]"></a>usb_pstd_stand_req4</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, usb_pstdrequest.o(i.usb_pstd_stand_req4))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = usb_pstd_stand_req4 &rArr; usb_pstd_ctrl_end &rArr; usb_cstd_set_nak &rArr; hw_usb_clear_pid
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_ctrl_end
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_stall_pipe0
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_buf
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_event
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_interrupt_process
</UL>

<P><STRONG><a name="[12a]"></a>usb_pstd_stand_req5</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, usb_pstdrequest.o(i.usb_pstd_stand_req5))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = usb_pstd_stand_req5 &rArr; usb_pstd_ctrl_end &rArr; usb_cstd_set_nak &rArr; hw_usb_clear_pid
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_ctrl_end
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_stall_pipe0
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_buf
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_event
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_interrupt_process
</UL>

<P><STRONG><a name="[14b]"></a>usb_pstd_suspend_function</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_pstdfunction.o(i.usb_pstd_suspend_function))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_suspend_process
</UL>

<P><STRONG><a name="[123]"></a>usb_pstd_suspend_process</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usb_psignal.o(i.usb_pstd_suspend_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usb_pstd_suspend_process
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_read_syssts
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_suspend_function
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_read_intsts
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_pset_enb_rsme
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_pclear_sts_resm
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_pclear_enb_rsme
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_interrupt_process
</UL>

<P><STRONG><a name="[39]"></a>usb_pstd_suspended</STRONG> (Thumb, 18 bytes, Stack size 32 bytes, usb_pdriver.o(i.usb_pstd_suspended))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = usb_pstd_suspended &rArr; usb_cstd_set_event
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_pdriver.o(i.usb_pstd_registration)
</UL>
<P><STRONG><a name="[bd]"></a>usb_pstd_transfer_start</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, usb_pdriver.o(i.usb_pstd_transfer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = usb_pstd_transfer_start &rArr; usb_pstd_set_submitutr &rArr; usb_pstd_send_start &rArr; usb_pstd_buf_to_fifo &rArr; usb_pstd_write_data &rArr; usb_cstd_is_set_frdy &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_get_pipe_type
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_chk_configured
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_submitutr
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_data_write
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_data_read
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_transfer_start
</UL>

<P><STRONG><a name="[a1]"></a>usb_pstd_usb_handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usb_pinthandler_usbip0.o(i.usb_pstd_usb_handler), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_interrupt_handler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cpu_usb_interrupt
</UL>

<P><STRONG><a name="[f1]"></a>usb_pstd_write_data</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, usb_plibusbip.o(i.usb_pstd_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = usb_pstd_write_data &rArr; usb_cstd_is_set_frdy &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_write_fifo
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_is_set_frdy
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_get_maxpacket_size
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_set_bval
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_read_fifoctr
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_buf_to_fifo
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_ctrl_read
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_bemp_pipe
</UL>

<P><STRONG><a name="[14c]"></a>usb_pstd_write_fifo</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, usb_preg_abs.o(i.usb_pstd_write_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usb_pstd_write_fifo &rArr; hw_usb_set_mbw
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_set_mbw
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_write_fifo8
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_write_fifo16
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_write_data
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8c]"></a>SPI_INIT</STRONG> (Thumb, 224 bytes, Stack size 0 bytes, main.o(i.SPI_INIT))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>__NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, main.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8e]"></a>media_driver_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_phid_pmsc_apl.o(i.media_driver_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = media_driver_init &rArr; USB_media_open
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_media_open
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_media_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_main
</UL>

<P><STRONG><a name="[5c]"></a>INTC_ClearPendingIRQ</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sci.o(i.INTC_ClearPendingIRQ), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI01_Stop
</UL>

<P><STRONG><a name="[5b]"></a>INTC_DisableIRQ</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, sci.o(i.INTC_DisableIRQ), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI01_Stop
</UL>

<P><STRONG><a name="[5d]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sci.o(i.__NVIC_ClearPendingIRQ), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI01_Stop
</UL>

<P><STRONG><a name="[58]"></a>INTC_ClearPendingIRQ</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sci_user.o(i.INTC_ClearPendingIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = INTC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_interrupt_send
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_interrupt_send
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi01_interrupt
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ13_Handler
</UL>

<P><STRONG><a name="[9c]"></a>spi01_callback_error</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sci_user.o(i.spi01_callback_error), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi01_interrupt
</UL>

<P><STRONG><a name="[99]"></a>spi01_callback_receiveend</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sci_user.o(i.spi01_callback_receiveend), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI01_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi01_interrupt
</UL>

<P><STRONG><a name="[9a]"></a>spi01_callback_sendend</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sci_user.o(i.spi01_callback_sendend), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI01_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi01_interrupt
</UL>

<P><STRONG><a name="[9e]"></a>uart0_callback_sendend</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sci_user.o(i.uart0_callback_sendend), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_interrupt_send
</UL>

<P><STRONG><a name="[a0]"></a>uart1_callback_sendend</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sci_user.o(i.uart1_callback_sendend), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_interrupt_send
</UL>

<P><STRONG><a name="[59]"></a>uart2_callback_sendend</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sci_user.o(i.uart2_callback_sendend))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ13_Handler
</UL>

<P><STRONG><a name="[e6]"></a>usb_pstd_bc_data_contact_detect</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, usb_pbc.o(i.usb_pstd_bc_data_contact_detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usb_pstd_bc_data_contact_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cpu_delay_xms
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_set_cnen
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_set_bcctrl
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_read_syssts
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_clear_cnen
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_clear_bcctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_bc_detect_process
</UL>

<P><STRONG><a name="[ec]"></a>usb_pstd_bc_primary_detection</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usb_pbc.o(i.usb_pstd_bc_primary_detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_pstd_bc_primary_detection
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cpu_delay_xms
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_set_bcctrl
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_read_bcctrl
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_clear_bcctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_bc_detect_process
</UL>

<P><STRONG><a name="[ed]"></a>usb_pstd_bc_secondary_detection</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usb_pbc.o(i.usb_pstd_bc_secondary_detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_pstd_bc_secondary_detection
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cpu_delay_xms
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_set_bcctrl
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_read_bcctrl
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_clear_bcctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_bc_detect_process
</UL>

<P><STRONG><a name="[120]"></a>usb_pstd_interrupt_process</STRONG> (Thumb, 354 bytes, Stack size 16 bytes, usb_pdriver.o(i.usb_pstd_interrupt_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = usb_pstd_interrupt_process &rArr; usb_pstd_stand_req1 &rArr; usb_pstd_get_status1 &rArr; usb_pstd_ctrl_read &rArr; usb_pstd_write_data &rArr; usb_cstd_is_set_frdy &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_ctrl_end
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_suspend_process
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_stand_req5
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_stand_req4
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_stand_req3
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_stand_req2
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_stand_req1
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_stand_req0
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_save_request
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_resume_process
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_nrdy_pipe
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_detach_process
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_chk_vbsts
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_bus_reset
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_brdy_pipe
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_bemp_pipe
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_attach_process
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_pcd_task
</UL>

<P><STRONG><a name="[145]"></a>usb_pstd_clr_feature0</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_pstdrequest.o(i.usb_pstd_clr_feature0))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_stand_req0
</UL>

<P><STRONG><a name="[10d]"></a>usb_pstd_clr_feature3</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, usb_pstdrequest.o(i.usb_pstd_clr_feature3))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = usb_pstd_clr_feature3 &rArr; usb_cstd_clr_stall &rArr; usb_cstd_set_nak &rArr; hw_usb_clear_pid
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_chk_remote
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_nak
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_get_pid
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_clr_stall
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_stall_pipe0
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_buf
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_set_sqclr
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_epadr_to_pipe
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_stand_req3
</UL>

<P><STRONG><a name="[117]"></a>usb_pstd_get_configuration1</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usb_pstdrequest.o(i.usb_pstd_get_configuration1))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = usb_pstd_get_configuration1 &rArr; usb_pstd_ctrl_read &rArr; usb_pstd_write_data &rArr; usb_cstd_is_set_frdy &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_stall_pipe0
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_ctrl_read
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_stand_req1
</UL>

<P><STRONG><a name="[118]"></a>usb_pstd_get_descriptor1</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, usb_pstdrequest.o(i.usb_pstd_get_descriptor1))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = usb_pstd_get_descriptor1 &rArr; usb_pstd_ctrl_read &rArr; usb_pstd_write_data &rArr; usb_cstd_is_set_frdy &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_stall_pipe0
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_ctrl_read
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_stand_req1
</UL>

<P><STRONG><a name="[119]"></a>usb_pstd_get_interface1</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, usb_pstdrequest.o(i.usb_pstd_get_interface1))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = usb_pstd_get_interface1 &rArr; usb_pstd_ctrl_read &rArr; usb_pstd_write_data &rArr; usb_cstd_is_set_frdy &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_stall_pipe0
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_ctrl_read
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_stand_req1
</UL>

<P><STRONG><a name="[11a]"></a>usb_pstd_get_status1</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, usb_pstdrequest.o(i.usb_pstd_get_status1))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = usb_pstd_get_status1 &rArr; usb_pstd_ctrl_read &rArr; usb_pstd_write_data &rArr; usb_cstd_is_set_frdy &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_get_pid
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_stall_pipe0
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_ctrl_read
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_read_dcpctr
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_epadr_to_pipe
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_chk_configured
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_get_interface_no
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_get_current_power
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_stand_req1
</UL>

<P><STRONG><a name="[147]"></a>usb_pstd_set_address0</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_pstdrequest.o(i.usb_pstd_set_address0))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_stand_req0
</UL>

<P><STRONG><a name="[139]"></a>usb_pstd_set_address3</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, usb_pstdrequest.o(i.usb_pstd_set_address3))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usb_pstd_set_address3 &rArr; usb_pstd_set_stall_pipe0 &rArr; hw_usb_set_pid
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_stall_pipe0
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_stand_req3
</UL>

<P><STRONG><a name="[13b]"></a>usb_pstd_set_configuration0</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usb_pstdrequest.o(i.usb_pstd_set_configuration0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usb_pstd_set_configuration0 &rArr; usb_pstd_set_config_no
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_config_no
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_stand_req0
</UL>

<P><STRONG><a name="[13c]"></a>usb_pstd_set_configuration3</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, usb_pstdrequest.o(i.usb_pstd_set_configuration3))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = usb_pstd_set_configuration3 &rArr; usb_cstd_pipe_reg_clear &rArr; usb_cstd_clr_pipe_config &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_stall_pipe0
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_buf
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_pipe_reg_clear
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_pipe_reg
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_eptbl_index
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_get_interface_no
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_stand_req3
</UL>

<P><STRONG><a name="[13f]"></a>usb_pstd_set_descriptor2</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usb_pstdrequest.o(i.usb_pstd_set_descriptor2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usb_pstd_set_descriptor2 &rArr; usb_pstd_set_stall_pipe0 &rArr; hw_usb_set_pid
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_stall_pipe0
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_stand_req2
</UL>

<P><STRONG><a name="[146]"></a>usb_pstd_set_feature0</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_pstdrequest.o(i.usb_pstd_set_feature0))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_stand_req0
</UL>

<P><STRONG><a name="[140]"></a>usb_pstd_set_feature3</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, usb_pstdrequest.o(i.usb_pstd_set_feature3))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usb_pstd_set_feature3 &rArr; usb_pstd_set_feature_function &rArr; usb_pstd_set_stall_pipe0 &rArr; hw_usb_set_pid
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_chk_remote
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_stall_pipe0
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_buf
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_feature_function
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_epadr_to_pipe
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_stand_req3
</UL>

<P><STRONG><a name="[148]"></a>usb_pstd_set_interface0</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usb_pstdrequest.o(i.usb_pstd_set_interface0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_pstd_set_interface0
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_stand_req0
</UL>

<P><STRONG><a name="[142]"></a>usb_pstd_set_interface3</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, usb_pstdrequest.o(i.usb_pstd_set_interface3))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = usb_pstd_set_interface3 &rArr; usb_pstd_set_pipe_reg &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_stall_pipe0
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cstd_set_buf
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_pipe_reg
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_chk_configured
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_eptbl_index
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_get_interface_no
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_get_alternate_no
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_stand_req3
</UL>

<P><STRONG><a name="[149]"></a>usb_pstd_synch_rame1</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usb_pstdrequest.o(i.usb_pstd_synch_rame1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usb_pstd_synch_rame1 &rArr; usb_pstd_set_stall_pipe0 &rArr; hw_usb_set_pid
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_set_stall_pipe0
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_stand_req1
</UL>

<P><STRONG><a name="[86]"></a>INTC_ClearPendingIRQ</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, usb_157_mcu.o(i.INTC_ClearPendingIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = INTC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp_6_38_interrupt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp_5_37_interrupt
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cpu_usbint_init
</UL>

<P><STRONG><a name="[85]"></a>INTC_GetPendingIRQ</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, usb_157_mcu.o(i.INTC_GetPendingIRQ), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp_6_38_interrupt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp_5_37_interrupt
</UL>

<P><STRONG><a name="[87]"></a>usb_cpu_usb_interrupt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usb_157_mcu.o(i.usb_cpu_usb_interrupt), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_usb_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp_5_37_interrupt
</UL>

<P><STRONG><a name="[89]"></a>usb_cpu_usb_resume_interrupt</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usb_157_mcu.o(i.usb_cpu_usb_resume_interrupt), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_pclear_sts_resm
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp_6_38_interrupt
</UL>

<P><STRONG><a name="[7d]"></a>hw_usb_get_fifoctr_adr</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_get_fifoctr_adr))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_set_bclr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_set_bval
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_read_fifoctr
</UL>

<P><STRONG><a name="[7f]"></a>hw_usb_get_fifosel_adr</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usb_creg_access.o(i.hw_usb_get_fifosel_adr))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_set_mbw
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_rmw_fifosel
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_usb_read_fifosel
</UL>

<P><STRONG><a name="[50]"></a>FlashCheckBusy</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ext_flash_disk.o(i.FlashCheckBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FlashCheckBusy &rArr; SPI_CPU_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CPU_WRITE
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CPU_READ
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOOP_WAIT
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_disk_write
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_disk_read
</UL>

<P><STRONG><a name="[54]"></a>FlashEraseSector</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, ext_flash_disk.o(i.FlashEraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FlashEraseSector &rArr; FlashWriteEnable &rArr; SPI_CPU_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CPU_WRITE
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CPU_READ
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOOP_WAIT
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_disk_write
</UL>

<P><STRONG><a name="[56]"></a>FlashFastRead</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ext_flash_disk.o(i.FlashFastRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FlashFastRead &rArr; SPI_CPU_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CPU_WRITE
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CPU_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_disk_read
</UL>

<P><STRONG><a name="[57]"></a>FlashProgramPage</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, ext_flash_disk.o(i.FlashProgramPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FlashProgramPage &rArr; FlashWriteEnable &rArr; SPI_CPU_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CPU_WRITE
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CPU_READ
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOOP_WAIT
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_disk_write
</UL>

<P><STRONG><a name="[55]"></a>FlashWriteEnable</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ext_flash_disk.o(i.FlashWriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FlashWriteEnable &rArr; SPI_CPU_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CPU_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashProgramPage
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashEraseSector
</UL>

<P><STRONG><a name="[53]"></a>LOOP_WAIT</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ext_flash_disk.o(i.LOOP_WAIT))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashProgramPage
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashEraseSector
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashCheckBusy
</UL>

<P><STRONG><a name="[52]"></a>SPI_CPU_READ</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ext_flash_disk.o(i.SPI_CPU_READ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_CPU_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_disk_open
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashProgramPage
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashFastRead
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashEraseSector
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashCheckBusy
</UL>

<P><STRONG><a name="[51]"></a>SPI_CPU_WRITE</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ext_flash_disk.o(i.SPI_CPU_WRITE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_CPU_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_disk_open
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteEnable
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashProgramPage
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashFastRead
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashEraseSector
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashCheckBusy
</UL>

<P><STRONG><a name="[3]"></a>ext_flash_disk_close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ext_flash_disk.o(i.ext_flash_disk_close))
<BR>[Address Reference Count : 1]<UL><LI> ext_flash_disk.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>ext_flash_disk_ioctl</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ext_flash_disk.o(i.ext_flash_disk_ioctl))
<BR>[Address Reference Count : 1]<UL><LI> ext_flash_disk.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>ext_flash_disk_open</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, ext_flash_disk.o(i.ext_flash_disk_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ext_flash_disk_open &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CPU_WRITE
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CPU_READ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ext_flash_disk.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>ext_flash_disk_read</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, ext_flash_disk.o(i.ext_flash_disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ext_flash_disk_read &rArr; FlashFastRead &rArr; SPI_CPU_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashFastRead
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashCheckBusy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ext_flash_disk.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>ext_flash_disk_write</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, ext_flash_disk.o(i.ext_flash_disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ext_flash_disk_write &rArr; FlashProgramPage &rArr; FlashWriteEnable &rArr; SPI_CPU_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashProgramPage
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashEraseSector
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashCheckBusy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ext_flash_disk.o(.data)
</UL>
<P><STRONG><a name="[93]"></a>pmsc_atapi_get_mode_sense10_data</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, usb_atapi_driver.o(i.pmsc_atapi_get_mode_sense10_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pmsc_atapi_get_mode_sense10_data
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmsc_atapi_analyze_cbwcb
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmsc_atapi_get_read_data
</UL>

<P><STRONG><a name="[95]"></a>pmsc_atapi_get_read_data</STRONG> (Thumb, 482 bytes, Stack size 32 bytes, usb_atapi_driver.o(i.pmsc_atapi_get_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pmsc_atapi_get_read_data &rArr; USB_media_read
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmsc_atapi_get_mode_sense10_data
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_media_read
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_media_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmsc_atapi_command_processing
</UL>

<P><STRONG><a name="[d9]"></a>usb_pmsc_check_case13</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, usb_pmsc_driver.o(i.usb_pmsc_check_case13))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_pmsc_check_case13
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_check_cbw
</UL>

<P><STRONG><a name="[d8]"></a>usb_pmsc_check_cbw</STRONG> (Thumb, 478 bytes, Stack size 16 bytes, usb_pmsc_driver.o(i.usb_pmsc_check_cbw))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = usb_pmsc_check_cbw &rArr; usb_pmsc_csw_transfer &rArr; usb_pmsc_transfer_start &rArr; usb_pstd_transfer_start &rArr; usb_pstd_set_submitutr &rArr; usb_pstd_send_start &rArr; usb_pstd_buf_to_fifo &rArr; usb_pstd_write_data &rArr; usb_cstd_is_set_frdy &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_change_device_state
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_transfer_matrix
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_csw_transfer
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_check_case13
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmsc_atapi_command_processing
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmsc_atapi_analyze_cbwcb
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_task
</UL>

<P><STRONG><a name="[db]"></a>usb_pmsc_csw_transfer</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usb_pmsc_driver.o(i.usb_pmsc_csw_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = usb_pmsc_csw_transfer &rArr; usb_pmsc_transfer_start &rArr; usb_pstd_transfer_start &rArr; usb_pstd_set_submitutr &rArr; usb_pstd_send_start &rArr; usb_pstd_buf_to_fifo &rArr; usb_pstd_write_data &rArr; usb_cstd_is_set_frdy &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_transfer_start
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_setcsw
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_err_phase_err
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_err_csw_ok
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_err_csw_ng
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_data_transfer
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_check_cbw
</UL>

<P><STRONG><a name="[31]"></a>usb_pmsc_data_transfer</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, usb_pmsc_driver.o(i.usb_pmsc_data_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = usb_pmsc_data_transfer &rArr; usb_pmsc_csw_transfer &rArr; usb_pmsc_transfer_start &rArr; usb_pstd_transfer_start &rArr; usb_pstd_set_submitutr &rArr; usb_pstd_send_start &rArr; usb_pstd_buf_to_fifo &rArr; usb_pstd_write_data &rArr; usb_cstd_is_set_frdy &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_change_device_state
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_transfer_start
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_csw_transfer
</UL>
<BR>[Address Reference Count : 2]<UL><LI> usb_pmsc_driver.o(i.usb_pmsc_check_cbw)
<LI> usb_pmsc_driver.o(i.usb_pmsc_task)
</UL>
<P><STRONG><a name="[32]"></a>usb_pmsc_err_csw_ng</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, usb_pmsc_driver.o(i.usb_pmsc_err_csw_ng))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = usb_pmsc_err_csw_ng &rArr; usb_pmsc_csw_transfer &rArr; usb_pmsc_transfer_start &rArr; usb_pstd_transfer_start &rArr; usb_pstd_set_submitutr &rArr; usb_pstd_send_start &rArr; usb_pstd_buf_to_fifo &rArr; usb_pstd_write_data &rArr; usb_cstd_is_set_frdy &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_csw_transfer
</UL>
<BR>[Address Reference Count : 2]<UL><LI> usb_pmsc_driver.o(i.usb_pmsc_check_cbw)
<LI> usb_pmsc_driver.o(i.usb_pmsc_data_transfer)
</UL>
<P><STRONG><a name="[34]"></a>usb_pmsc_err_csw_ok</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, usb_pmsc_driver.o(i.usb_pmsc_err_csw_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = usb_pmsc_err_csw_ok &rArr; usb_pmsc_csw_transfer &rArr; usb_pmsc_transfer_start &rArr; usb_pstd_transfer_start &rArr; usb_pstd_set_submitutr &rArr; usb_pstd_send_start &rArr; usb_pstd_buf_to_fifo &rArr; usb_pstd_write_data &rArr; usb_cstd_is_set_frdy &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_csw_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_pmsc_driver.o(i.usb_pmsc_data_transfer)
</UL>
<P><STRONG><a name="[33]"></a>usb_pmsc_err_phase_err</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, usb_pmsc_driver.o(i.usb_pmsc_err_phase_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = usb_pmsc_err_phase_err &rArr; usb_pmsc_csw_transfer &rArr; usb_pmsc_transfer_start &rArr; usb_pstd_transfer_start &rArr; usb_pstd_set_submitutr &rArr; usb_pstd_send_start &rArr; usb_pstd_buf_to_fifo &rArr; usb_pstd_write_data &rArr; usb_cstd_is_set_frdy &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_csw_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_pmsc_driver.o(i.usb_pmsc_check_cbw)
</UL>
<P><STRONG><a name="[dd]"></a>usb_pmsc_setcsw</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, usb_pmsc_driver.o(i.usb_pmsc_setcsw))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_csw_transfer
</UL>

<P><STRONG><a name="[35]"></a>usb_pmsc_trans_result</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usb_pmsc_driver.o(i.usb_pmsc_trans_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_pmsc_trans_result
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_pmsc_driver.o(i.usb_pmsc_transfer_start)
</UL>
<P><STRONG><a name="[da]"></a>usb_pmsc_transfer_matrix</STRONG> (Thumb, 80 bytes, Stack size 4 bytes, usb_pmsc_driver.o(i.usb_pmsc_transfer_matrix))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usb_pmsc_transfer_matrix &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_check_cbw
</UL>

<P><STRONG><a name="[de]"></a>usb_pmsc_transfer_start</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usb_pmsc_driver.o(i.usb_pmsc_transfer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = usb_pmsc_transfer_start &rArr; usb_pstd_transfer_start &rArr; usb_pstd_set_submitutr &rArr; usb_pstd_send_start &rArr; usb_pstd_buf_to_fifo &rArr; usb_pstd_write_data &rArr; usb_cstd_is_set_frdy &rArr; usb_cstd_chg_curpipe &rArr; hw_usb_rmw_fifosel
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pstd_transfer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_receive_cbw
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_data_transfer
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pmsc_csw_transfer
</UL>

<P><STRONG><a name="[77]"></a>_printf_core</STRONG> (Thumb, 1020 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[79]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[78]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[40]"></a>__arm_fini_</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_fini
</UL>
<HR></body></html>
